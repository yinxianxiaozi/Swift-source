sil_stage canonical

import Builtin
import Swift
import SwiftShims

import Foundation

class WYStudent {
  @_hasStorage @_hasInitialValue var age: Int { get set }
  @_hasStorage @_hasInitialValue var name: String { get set }
  @objc deinit
  init()
}

@_hasStorage @_hasInitialValue let t: WYStudent { get }

class Square {
  @_hasStorage @_hasInitialValue var width: Double { get set }
  var area: Double { get set }
  @objc deinit
  init()
}

class WYStudent2 {
  @_hasStorage @_hasInitialValue var name: String { get set }
  @objc deinit
  init()
}

@_hasStorage @_hasInitialValue var stu2: WYStudent2 { get set }

//第一次访问时才赋值
//在内部会创建一个$__lazy_storage_$_age属性，使用final、var修饰
class WYStudent4 {
  lazy var age: Int? { get set }
  @_hasStorage @_hasInitialValue final var $__lazy_storage_$_age: Int?? { get set }
  @objc deinit
  init()
}

@_hasStorage @_hasInitialValue var stu4: WYStudent4 { get set }

class WYStudent5 {
  @_hasStorage @_hasInitialValue static var age: Int { get set }
  @objc deinit
  init()
}

@_hasStorage @_hasInitialValue var age: Int { get set }

class WYStudent6 {
  @_hasStorage @_hasInitialValue static let shareInstance: WYStudent6 { get }
  private init()
  @objc deinit
}

@_hasStorage @_hasInitialValue var stu6: WYStudent6 { get set }

// t
sil_global hidden [let] @main.t : main.WYStudent : $WYStudent

// stu2
sil_global hidden @main.stu2 : main.WYStudent2 : $WYStudent2

// stu4
sil_global hidden @main.stu4 : main.WYStudent4 : $WYStudent4

// one-time initialization token for age
sil_global private @one-time initialization token for age : $Builtin.Word

//WYStudent5类中的age属性，被static修饰会变成全局变量
//将直接数转换成结构体返回
// static WYStudent5.age
sil_global hidden @static main.WYStudent5.age : Swift.Int : $Int = {
  %0 = integer_literal $Builtin.Int64, 18         // user: %1
  %initval = struct $Int (%0 : $Builtin.Int64)
}


// age
sil_global hidden @main.age : Swift.Int : $Int

// one-time initialization token for shareInstance
sil_global private @one-time initialization token for shareInstance : $Builtin.Word

// static WYStudent6.shareInstance
sil_global hidden [let] @static main.WYStudent6.shareInstance : main.WYStudent6 : $WYStudent6

// stu6
sil_global hidden @main.stu6 : main.WYStudent6 : $WYStudent6

// main
sil @main : $@convention(c) (Int32, UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>) -> Int32 {
bb0(%0 : $Int32, %1 : $UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>):
  %2 = integer_literal $Builtin.Word, 1           // user: %4
  // function_ref _allocateUninitializedArray<A>(_:)
  %3 = function_ref @Swift._allocateUninitializedArray<A>(Builtin.Word) -> ([A], Builtin.RawPointer) : $@convention(thin) <τ_0_0> (Builtin.Word) -> (@owned Array<τ_0_0>, Builtin.RawPointer) // user: %4
  %4 = apply %3<Any>(%2) : $@convention(thin) <τ_0_0> (Builtin.Word) -> (@owned Array<τ_0_0>, Builtin.RawPointer) // users: %6, %5
  %5 = tuple_extract %4 : $(Array<Any>, Builtin.RawPointer), 0 // user: %17
  %6 = tuple_extract %4 : $(Array<Any>, Builtin.RawPointer), 1 // user: %7
  %7 = pointer_to_address %6 : $Builtin.RawPointer to [strict] $*Any // user: %14
  %8 = string_literal utf8 "Hello, World!"        // user: %13
  %9 = integer_literal $Builtin.Word, 13          // user: %13
  %10 = integer_literal $Builtin.Int1, -1         // user: %13
  %11 = metatype $@thin String.Type               // user: %13
  // function_ref String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)
  %12 = function_ref @Swift.String.init(_builtinStringLiteral: Builtin.RawPointer, utf8CodeUnitCount: Builtin.Word, isASCII: Builtin.Int1) -> Swift.String : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String // user: %13
  %13 = apply %12(%8, %9, %10, %11) : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String // user: %15
  %14 = init_existential_addr %7 : $*Any, $String // user: %15
  store %13 to %14 : $*String                     // id: %15
  // function_ref _finalizeUninitializedArray<A>(_:)
  %16 = function_ref @Swift._finalizeUninitializedArray<A>(__owned [A]) -> [A] : $@convention(thin) <τ_0_0> (@owned Array<τ_0_0>) -> @owned Array<τ_0_0> // user: %17
  %17 = apply %16<Any>(%5) : $@convention(thin) <τ_0_0> (@owned Array<τ_0_0>) -> @owned Array<τ_0_0> // users: %26, %23
  // function_ref default argument 1 of print(_:separator:terminator:)
  %18 = function_ref @default argument 1 of Swift.print(_: Any..., separator: Swift.String, terminator: Swift.String) -> () : $@convention(thin) () -> @owned String // user: %19
  %19 = apply %18() : $@convention(thin) () -> @owned String // users: %25, %23
  // function_ref default argument 2 of print(_:separator:terminator:)
  %20 = function_ref @default argument 2 of Swift.print(_: Any..., separator: Swift.String, terminator: Swift.String) -> () : $@convention(thin) () -> @owned String // user: %21
  %21 = apply %20() : $@convention(thin) () -> @owned String // users: %24, %23
  // function_ref print(_:separator:terminator:)
  %22 = function_ref @Swift.print(_: Any..., separator: Swift.String, terminator: Swift.String) -> () : $@convention(thin) (@guaranteed Array<Any>, @guaranteed String, @guaranteed String) -> () // user: %23
  %23 = apply %22(%17, %19, %21) : $@convention(thin) (@guaranteed Array<Any>, @guaranteed String, @guaranteed String) -> ()
  release_value %21 : $String                     // id: %24
  release_value %19 : $String                     // id: %25
  release_value %17 : $Array<Any>                 // id: %26
  alloc_global @main.t : main.WYStudent          // id: %27
  %28 = global_addr @main.t : main.WYStudent : $*WYStudent // user: %32
  %29 = metatype $@thick WYStudent.Type           // user: %31
  // function_ref WYStudent.__allocating_init()
  %30 = function_ref @main.WYStudent.__allocating_init() -> main.WYStudent : $@convention(method) (@thick WYStudent.Type) -> @owned WYStudent // user: %31
  %31 = apply %30(%29) : $@convention(method) (@thick WYStudent.Type) -> @owned WYStudent // user: %32
  store %31 to %28 : $*WYStudent                  // id: %32
  %33 = integer_literal $Builtin.Word, 1          // user: %35
  // function_ref _allocateUninitializedArray<A>(_:)
  %34 = function_ref @Swift._allocateUninitializedArray<A>(Builtin.Word) -> ([A], Builtin.RawPointer) : $@convention(thin) <τ_0_0> (Builtin.Word) -> (@owned Array<τ_0_0>, Builtin.RawPointer) // user: %35
  %35 = apply %34<Any>(%33) : $@convention(thin) <τ_0_0> (Builtin.Word) -> (@owned Array<τ_0_0>, Builtin.RawPointer) // users: %37, %36
  %36 = tuple_extract %35 : $(Array<Any>, Builtin.RawPointer), 0 // user: %48
  %37 = tuple_extract %35 : $(Array<Any>, Builtin.RawPointer), 1 // user: %38
  %38 = pointer_to_address %37 : $Builtin.RawPointer to [strict] $*Any // user: %45
  %39 = string_literal utf8 "end"                 // user: %44
  %40 = integer_literal $Builtin.Word, 3          // user: %44
  %41 = integer_literal $Builtin.Int1, -1         // user: %44
  %42 = metatype $@thin String.Type               // user: %44
  // function_ref String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)
  %43 = function_ref @Swift.String.init(_builtinStringLiteral: Builtin.RawPointer, utf8CodeUnitCount: Builtin.Word, isASCII: Builtin.Int1) -> Swift.String : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String // user: %44
  %44 = apply %43(%39, %40, %41, %42) : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String // user: %46
  %45 = init_existential_addr %38 : $*Any, $String // user: %46
  store %44 to %45 : $*String                     // id: %46
  // function_ref _finalizeUninitializedArray<A>(_:)
  %47 = function_ref @Swift._finalizeUninitializedArray<A>(__owned [A]) -> [A] : $@convention(thin) <τ_0_0> (@owned Array<τ_0_0>) -> @owned Array<τ_0_0> // user: %48
  %48 = apply %47<Any>(%36) : $@convention(thin) <τ_0_0> (@owned Array<τ_0_0>) -> @owned Array<τ_0_0> // users: %57, %54
  // function_ref default argument 1 of print(_:separator:terminator:)
  %49 = function_ref @default argument 1 of Swift.print(_: Any..., separator: Swift.String, terminator: Swift.String) -> () : $@convention(thin) () -> @owned String // user: %50
  %50 = apply %49() : $@convention(thin) () -> @owned String // users: %56, %54
  // function_ref default argument 2 of print(_:separator:terminator:)
  %51 = function_ref @default argument 2 of Swift.print(_: Any..., separator: Swift.String, terminator: Swift.String) -> () : $@convention(thin) () -> @owned String // user: %52
  %52 = apply %51() : $@convention(thin) () -> @owned String // users: %55, %54
  // function_ref print(_:separator:terminator:)
  %53 = function_ref @Swift.print(_: Any..., separator: Swift.String, terminator: Swift.String) -> () : $@convention(thin) (@guaranteed Array<Any>, @guaranteed String, @guaranteed String) -> () // user: %54
  %54 = apply %53(%48, %50, %52) : $@convention(thin) (@guaranteed Array<Any>, @guaranteed String, @guaranteed String) -> ()
  release_value %52 : $String                     // id: %55
  release_value %50 : $String                     // id: %56
  release_value %48 : $Array<Any>                 // id: %57
  %58 = integer_literal $Builtin.Word, 1          // user: %60
  // function_ref _allocateUninitializedArray<A>(_:)
  %59 = function_ref @Swift._allocateUninitializedArray<A>(Builtin.Word) -> ([A], Builtin.RawPointer) : $@convention(thin) <τ_0_0> (Builtin.Word) -> (@owned Array<τ_0_0>, Builtin.RawPointer) // user: %60
  %60 = apply %59<Any>(%58) : $@convention(thin) <τ_0_0> (Builtin.Word) -> (@owned Array<τ_0_0>, Builtin.RawPointer) // users: %62, %61
  %61 = tuple_extract %60 : $(Array<Any>, Builtin.RawPointer), 0 // user: %73
  %62 = tuple_extract %60 : $(Array<Any>, Builtin.RawPointer), 1 // user: %63
  %63 = pointer_to_address %62 : $Builtin.RawPointer to [strict] $*Any // user: %70
  %64 = metatype $@thick Square.Type              // user: %65
  %65 = init_existential_metatype %64 : $@thick Square.Type, $@thick AnyObject.Type // user: %66
  %66 = thick_to_objc_metatype %65 : $@thick AnyObject.Type to $@objc_metatype AnyObject.Type // user: %67
  %67 = enum $Optional<@objc_metatype AnyObject.Type>, #Optional.some!enumelt, %66 : $@objc_metatype AnyObject.Type // user: %69
  // function_ref class_getInstanceSize
  %68 = function_ref @class_getInstanceSize : $@convention(c) (Optional<@objc_metatype AnyObject.Type>) -> Int // user: %69
  %69 = apply %68(%67) : $@convention(c) (Optional<@objc_metatype AnyObject.Type>) -> Int // user: %71
  %70 = init_existential_addr %63 : $*Any, $Int   // user: %71
  store %69 to %70 : $*Int                        // id: %71
  // function_ref _finalizeUninitializedArray<A>(_:)
  %72 = function_ref @Swift._finalizeUninitializedArray<A>(__owned [A]) -> [A] : $@convention(thin) <τ_0_0> (@owned Array<τ_0_0>) -> @owned Array<τ_0_0> // user: %73
  %73 = apply %72<Any>(%61) : $@convention(thin) <τ_0_0> (@owned Array<τ_0_0>) -> @owned Array<τ_0_0> // users: %82, %79
  // function_ref default argument 1 of print(_:separator:terminator:)
  %74 = function_ref @default argument 1 of Swift.print(_: Any..., separator: Swift.String, terminator: Swift.String) -> () : $@convention(thin) () -> @owned String // user: %75
  %75 = apply %74() : $@convention(thin) () -> @owned String // users: %81, %79
  // function_ref default argument 2 of print(_:separator:terminator:)
  %76 = function_ref @default argument 2 of Swift.print(_: Any..., separator: Swift.String, terminator: Swift.String) -> () : $@convention(thin) () -> @owned String // user: %77
  %77 = apply %76() : $@convention(thin) () -> @owned String // users: %80, %79
  // function_ref print(_:separator:terminator:)
  %78 = function_ref @Swift.print(_: Any..., separator: Swift.String, terminator: Swift.String) -> () : $@convention(thin) (@guaranteed Array<Any>, @guaranteed String, @guaranteed String) -> () // user: %79
  %79 = apply %78(%73, %75, %77) : $@convention(thin) (@guaranteed Array<Any>, @guaranteed String, @guaranteed String) -> ()
  release_value %77 : $String                     // id: %80
  release_value %75 : $String                     // id: %81
  release_value %73 : $Array<Any>                 // id: %82
  alloc_global @main.stu2 : main.WYStudent2     // id: %83
  %84 = global_addr @main.stu2 : main.WYStudent2 : $*WYStudent2 // users: %88, %89
  %85 = metatype $@thick WYStudent2.Type          // user: %87
  // function_ref WYStudent2.__allocating_init()
  %86 = function_ref @main.WYStudent2.__allocating_init() -> main.WYStudent2 : $@convention(method) (@thick WYStudent2.Type) -> @owned WYStudent2 // user: %87
  %87 = apply %86(%85) : $@convention(method) (@thick WYStudent2.Type) -> @owned WYStudent2 // user: %88
  store %87 to %84 : $*WYStudent2                 // id: %88
  %89 = begin_access [read] [dynamic] %84 : $*WYStudent2 // users: %90, %92
  %90 = load %89 : $*WYStudent2                   // users: %101, %99, %100, %91
  strong_retain %90 : $WYStudent2                 // id: %91
  end_access %89 : $*WYStudent2                   // id: %92
  %93 = string_literal utf8 "wy"                  // user: %98
  %94 = integer_literal $Builtin.Word, 2          // user: %98
  %95 = integer_literal $Builtin.Int1, -1         // user: %98
  %96 = metatype $@thin String.Type               // user: %98
  // function_ref String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)
  %97 = function_ref @Swift.String.init(_builtinStringLiteral: Builtin.RawPointer, utf8CodeUnitCount: Builtin.Word, isASCII: Builtin.Int1) -> Swift.String : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String // user: %98
  %98 = apply %97(%93, %94, %95, %96) : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String // user: %100
  %99 = class_method %90 : $WYStudent2, #WYStudent2.name!setter : (WYStudent2) -> (String) -> (), $@convention(method) (@owned String, @guaranteed WYStudent2) -> () // user: %100
  %100 = apply %99(%98, %90) : $@convention(method) (@owned String, @guaranteed WYStudent2) -> ()
  strong_release %90 : $WYStudent2                // id: %101
  alloc_global @main.stu4 : main.WYStudent4     // id: %102
  %103 = global_addr @main.stu4 : main.WYStudent4 : $*WYStudent4 // users: %107, %114
  %104 = metatype $@thick WYStudent4.Type         // user: %106
  // function_ref WYStudent4.__allocating_init()
  %105 = function_ref @main.WYStudent4.__allocating_init() -> main.WYStudent4 : $@convention(method) (@thick WYStudent4.Type) -> @owned WYStudent4 // user: %106
  %106 = apply %105(%104) : $@convention(method) (@thick WYStudent4.Type) -> @owned WYStudent4 // user: %107
  store %106 to %103 : $*WYStudent4               // id: %107
  %108 = integer_literal $Builtin.Word, 1         // user: %110
  // function_ref _allocateUninitializedArray<A>(_:)
  %109 = function_ref @Swift._allocateUninitializedArray<A>(Builtin.Word) -> ([A], Builtin.RawPointer) : $@convention(thin) <τ_0_0> (Builtin.Word) -> (@owned Array<τ_0_0>, Builtin.RawPointer) // user: %110
  %110 = apply %109<Any>(%108) : $@convention(thin) <τ_0_0> (Builtin.Word) -> (@owned Array<τ_0_0>, Builtin.RawPointer) // users: %112, %111
  %111 = tuple_extract %110 : $(Array<Any>, Builtin.RawPointer), 0 // user: %153
  %112 = tuple_extract %110 : $(Array<Any>, Builtin.RawPointer), 1 // user: %113
  %113 = pointer_to_address %112 : $Builtin.RawPointer to [strict] $*Any // user: %150
  %114 = begin_access [read] [dynamic] %103 : $*WYStudent4 // users: %115, %117
  %115 = load %114 : $*WYStudent4                 // users: %120, %119, %118, %116
  strong_retain %115 : $WYStudent4                // id: %116
  end_access %114 : $*WYStudent4                  // id: %117
  //调用getter方法
  %118 = class_method %115 : $WYStudent4, #WYStudent4.age!getter : (WYStudent4) -> () -> Int?, $@convention(method) (@guaranteed WYStudent4) -> Optional<Int> // user: %119
  %119 = apply %118(%115) : $@convention(method) (@guaranteed WYStudent4) -> Optional<Int> // user: %121
  strong_release %115 : $WYStudent4               // id: %120
  switch_enum %119 : $Optional<Int>, case #Optional.some!enumelt: bb8, case #Optional.none!enumelt: bb1 // id: %121

bb1:                                              // Preds: bb0
  %122 = string_literal utf8 "main/main.swift"    // user: %131
  %123 = integer_literal $Builtin.Word, 15        // user: %134
  %124 = integer_literal $Builtin.Word, 15
  br bb2                                          // id: %125

bb2:                                              // Preds: bb1
  %126 = string_literal utf8 "Unexpectedly found nil while unwrapping an Optional value" // user: %128
  %127 = integer_literal $Builtin.Word, 57        // user: %130
  %128 = builtin "ptrtoint_Word"(%126 : $Builtin.RawPointer) : $Builtin.Word // user: %130
  %129 = integer_literal $Builtin.Int8, 2         // users: %134, %141, %130
  %130 = struct $StaticString (%128 : $Builtin.Word, %127 : $Builtin.Word, %129 : $Builtin.Int8) // user: %147
  %131 = builtin "ptrtoint_Word"(%122 : $Builtin.RawPointer) : $Builtin.Word // user: %134
  br bb3                                          // id: %132

bb3:                                              // Preds: bb2
  br bb4                                          // id: %133

bb4:                                              // Preds: bb3
  %134 = struct $StaticString (%131 : $Builtin.Word, %123 : $Builtin.Word, %129 : $Builtin.Int8) // user: %147
  %135 = integer_literal $Builtin.Int64, 73       // user: %136
  %136 = struct $UInt (%135 : $Builtin.Int64)     // user: %147
  br bb5                                          // id: %137

bb5:                                              // Preds: bb4
  %138 = string_literal utf8 "Fatal error"        // user: %140
  %139 = integer_literal $Builtin.Word, 11        // user: %141
  %140 = builtin "ptrtoint_Word"(%138 : $Builtin.RawPointer) : $Builtin.Word // user: %141
  %141 = struct $StaticString (%140 : $Builtin.Word, %139 : $Builtin.Word, %129 : $Builtin.Int8) // user: %147
  br bb6                                          // id: %142

bb6:                                              // Preds: bb5
  %143 = integer_literal $Builtin.Int32, 1        // user: %144
  %144 = struct $UInt32 (%143 : $Builtin.Int32)   // user: %147
  br bb7                                          // id: %145

bb7:                                              // Preds: bb6
  // function_ref _assertionFailure(_:_:file:line:flags:)
  %146 = function_ref @Swift._assertionFailure(_: Swift.StaticString, _: Swift.StaticString, file: Swift.StaticString, line: Swift.UInt, flags: Swift.UInt32) -> Swift.Never : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %147
  %147 = apply %146(%141, %130, %134, %136, %144) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %148

// %149                                           // user: %151
bb8(%149 : $Int):                                 // Preds: bb0
  %150 = init_existential_addr %113 : $*Any, $Int // user: %151
  store %149 to %150 : $*Int                      // id: %151
  // function_ref _finalizeUninitializedArray<A>(_:)
  %152 = function_ref @Swift._finalizeUninitializedArray<A>(__owned [A]) -> [A] : $@convention(thin) <τ_0_0> (@owned Array<τ_0_0>) -> @owned Array<τ_0_0> // user: %153
  %153 = apply %152<Any>(%111) : $@convention(thin) <τ_0_0> (@owned Array<τ_0_0>) -> @owned Array<τ_0_0> // users: %162, %159
  // function_ref default argument 1 of print(_:separator:terminator:)
  %154 = function_ref @default argument 1 of Swift.print(_: Any..., separator: Swift.String, terminator: Swift.String) -> () : $@convention(thin) () -> @owned String // user: %155
  %155 = apply %154() : $@convention(thin) () -> @owned String // users: %161, %159
  // function_ref default argument 2 of print(_:separator:terminator:)
  %156 = function_ref @default argument 2 of Swift.print(_: Any..., separator: Swift.String, terminator: Swift.String) -> () : $@convention(thin) () -> @owned String // user: %157
  %157 = apply %156() : $@convention(thin) () -> @owned String // users: %160, %159
  // function_ref print(_:separator:terminator:)
  %158 = function_ref @Swift.print(_: Any..., separator: Swift.String, terminator: Swift.String) -> () : $@convention(thin) (@guaranteed Array<Any>, @guaranteed String, @guaranteed String) -> () // user: %159
  %159 = apply %158(%153, %155, %157) : $@convention(thin) (@guaranteed Array<Any>, @guaranteed String, @guaranteed String) -> ()
  release_value %157 : $String                    // id: %160
  release_value %155 : $String                    // id: %161
  release_value %153 : $Array<Any>                // id: %162
  %163 = integer_literal $Builtin.Word, 1         // user: %165
  // function_ref _allocateUninitializedArray<A>(_:)
  %164 = function_ref @Swift._allocateUninitializedArray<A>(Builtin.Word) -> ([A], Builtin.RawPointer) : $@convention(thin) <τ_0_0> (Builtin.Word) -> (@owned Array<τ_0_0>, Builtin.RawPointer) // user: %165
  %165 = apply %164<Any>(%163) : $@convention(thin) <τ_0_0> (Builtin.Word) -> (@owned Array<τ_0_0>, Builtin.RawPointer) // users: %167, %166
  %166 = tuple_extract %165 : $(Array<Any>, Builtin.RawPointer), 0 // user: %178
  %167 = tuple_extract %165 : $(Array<Any>, Builtin.RawPointer), 1 // user: %168
  %168 = pointer_to_address %167 : $Builtin.RawPointer to [strict] $*Any // user: %175
  %169 = string_literal utf8 "end"                // user: %174
  %170 = integer_literal $Builtin.Word, 3         // user: %174
  %171 = integer_literal $Builtin.Int1, -1        // user: %174
  %172 = metatype $@thin String.Type              // user: %174
  // function_ref String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)
  %173 = function_ref @Swift.String.init(_builtinStringLiteral: Builtin.RawPointer, utf8CodeUnitCount: Builtin.Word, isASCII: Builtin.Int1) -> Swift.String : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String // user: %174
  %174 = apply %173(%169, %170, %171, %172) : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String // user: %176
  %175 = init_existential_addr %168 : $*Any, $String // user: %176
  store %174 to %175 : $*String                   // id: %176
  // function_ref _finalizeUninitializedArray<A>(_:)
  %177 = function_ref @Swift._finalizeUninitializedArray<A>(__owned [A]) -> [A] : $@convention(thin) <τ_0_0> (@owned Array<τ_0_0>) -> @owned Array<τ_0_0> // user: %178
  %178 = apply %177<Any>(%166) : $@convention(thin) <τ_0_0> (@owned Array<τ_0_0>) -> @owned Array<τ_0_0> // users: %187, %184
  // function_ref default argument 1 of print(_:separator:terminator:)
  %179 = function_ref @default argument 1 of Swift.print(_: Any..., separator: Swift.String, terminator: Swift.String) -> () : $@convention(thin) () -> @owned String // user: %180
  %180 = apply %179() : $@convention(thin) () -> @owned String // users: %186, %184
  // function_ref default argument 2 of print(_:separator:terminator:)
  %181 = function_ref @default argument 2 of Swift.print(_: Any..., separator: Swift.String, terminator: Swift.String) -> () : $@convention(thin) () -> @owned String // user: %182
  %182 = apply %181() : $@convention(thin) () -> @owned String // users: %185, %184
  // function_ref print(_:separator:terminator:)
  %183 = function_ref @Swift.print(_: Any..., separator: Swift.String, terminator: Swift.String) -> () : $@convention(thin) (@guaranteed Array<Any>, @guaranteed String, @guaranteed String) -> () // user: %184
  %184 = apply %183(%178, %180, %182) : $@convention(thin) (@guaranteed Array<Any>, @guaranteed String, @guaranteed String) -> ()
  release_value %182 : $String                    // id: %185
  release_value %180 : $String                    // id: %186
  release_value %178 : $Array<Any>                // id: %187
  %188 = integer_literal $Builtin.Word, 1         // user: %190
  // function_ref _allocateUninitializedArray<A>(_:)
  %189 = function_ref @Swift._allocateUninitializedArray<A>(Builtin.Word) -> ([A], Builtin.RawPointer) : $@convention(thin) <τ_0_0> (Builtin.Word) -> (@owned Array<τ_0_0>, Builtin.RawPointer) // user: %190
  %190 = apply %189<Any>(%188) : $@convention(thin) <τ_0_0> (Builtin.Word) -> (@owned Array<τ_0_0>, Builtin.RawPointer) // users: %192, %191
  %191 = tuple_extract %190 : $(Array<Any>, Builtin.RawPointer), 0 // user: %203
  %192 = tuple_extract %190 : $(Array<Any>, Builtin.RawPointer), 1 // user: %193
  %193 = pointer_to_address %192 : $Builtin.RawPointer to [strict] $*Any // user: %200
  %194 = metatype $@thick WYStudent4.Type         // user: %195
  %195 = init_existential_metatype %194 : $@thick WYStudent4.Type, $@thick AnyObject.Type // user: %196
  %196 = thick_to_objc_metatype %195 : $@thick AnyObject.Type to $@objc_metatype AnyObject.Type // user: %197
  %197 = enum $Optional<@objc_metatype AnyObject.Type>, #Optional.some!enumelt, %196 : $@objc_metatype AnyObject.Type // user: %199
  // function_ref class_getInstanceSize
  %198 = function_ref @class_getInstanceSize : $@convention(c) (Optional<@objc_metatype AnyObject.Type>) -> Int // user: %199
  %199 = apply %198(%197) : $@convention(c) (Optional<@objc_metatype AnyObject.Type>) -> Int // user: %201
  %200 = init_existential_addr %193 : $*Any, $Int // user: %201
  store %199 to %200 : $*Int                      // id: %201
  // function_ref _finalizeUninitializedArray<A>(_:)
  %202 = function_ref @Swift._finalizeUninitializedArray<A>(__owned [A]) -> [A] : $@convention(thin) <τ_0_0> (@owned Array<τ_0_0>) -> @owned Array<τ_0_0> // user: %203
  %203 = apply %202<Any>(%191) : $@convention(thin) <τ_0_0> (@owned Array<τ_0_0>) -> @owned Array<τ_0_0> // users: %212, %209
  // function_ref default argument 1 of print(_:separator:terminator:)
  %204 = function_ref @default argument 1 of Swift.print(_: Any..., separator: Swift.String, terminator: Swift.String) -> () : $@convention(thin) () -> @owned String // user: %205
  %205 = apply %204() : $@convention(thin) () -> @owned String // users: %211, %209
  // function_ref default argument 2 of print(_:separator:terminator:)
  %206 = function_ref @default argument 2 of Swift.print(_: Any..., separator: Swift.String, terminator: Swift.String) -> () : $@convention(thin) () -> @owned String // user: %207
  %207 = apply %206() : $@convention(thin) () -> @owned String // users: %210, %209
  // function_ref print(_:separator:terminator:)
  %208 = function_ref @Swift.print(_: Any..., separator: Swift.String, terminator: Swift.String) -> () : $@convention(thin) (@guaranteed Array<Any>, @guaranteed String, @guaranteed String) -> () // user: %209
  %209 = apply %208(%203, %205, %207) : $@convention(thin) (@guaranteed Array<Any>, @guaranteed String, @guaranteed String) -> ()
  release_value %207 : $String                    // id: %210
  release_value %205 : $String                    // id: %211
  release_value %203 : $Array<Any>                // id: %212
  alloc_global @main.age : Swift.Int                   // id: %213
  %214 = global_addr @main.age : Swift.Int : $*Int     // user: %220
  %215 = metatype $@thick WYStudent5.Type
  // function_ref WYStudent5.age.unsafeMutableAddressor
  %216 = function_ref @main.WYStudent5.age.unsafeMutableAddressor : Swift.Int : $@convention(thin) () -> Builtin.RawPointer // user: %217
  %217 = apply %216() : $@convention(thin) () -> Builtin.RawPointer // user: %218
  %218 = pointer_to_address %217 : $Builtin.RawPointer to [strict] $*Int // user: %219
  %219 = begin_access [read] [dynamic] %218 : $*Int // users: %221, %220
  copy_addr %219 to [initialization] %214 : $*Int // id: %220
  end_access %219 : $*Int                         // id: %221
  alloc_global @main.stu6 : main.WYStudent6     // id: %222
  %223 = global_addr @main.stu6 : main.WYStudent6 : $*WYStudent6 // user: %230
  %224 = metatype $@thick WYStudent6.Type
  // function_ref WYStudent6.shareInstance.unsafeMutableAddressor
  %225 = function_ref @main.WYStudent6.shareInstance.unsafeMutableAddressor : main.WYStudent6 : $@convention(thin) () -> Builtin.RawPointer // user: %226
  %226 = apply %225() : $@convention(thin) () -> Builtin.RawPointer // user: %227
  %227 = pointer_to_address %226 : $Builtin.RawPointer to [strict] $*WYStudent6 // user: %228
  %228 = load %227 : $*WYStudent6                 // users: %230, %229
  strong_retain %228 : $WYStudent6                // id: %229
  store %228 to %223 : $*WYStudent6               // id: %230
  %231 = integer_literal $Builtin.Int32, 0        // user: %232
  %232 = struct $Int32 (%231 : $Builtin.Int32)    // user: %233
  return %232 : $Int32                            // id: %233
} // end sil function 'main'

// _allocateUninitializedArray<A>(_:)
sil [always_inline] [_semantics "array.uninitialized_intrinsic"] @Swift._allocateUninitializedArray<A>(Builtin.Word) -> ([A], Builtin.RawPointer) : $@convention(thin) <τ_0_0> (Builtin.Word) -> (@owned Array<τ_0_0>, Builtin.RawPointer)

// String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)
sil [always_inline] [readonly] [_semantics "string.makeUTF8"] @Swift.String.init(_builtinStringLiteral: Builtin.RawPointer, utf8CodeUnitCount: Builtin.Word, isASCII: Builtin.Int1) -> Swift.String : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String

// _finalizeUninitializedArray<A>(_:)
sil shared_external [readnone] [_semantics "array.finalize_intrinsic"] @Swift._finalizeUninitializedArray<A>(__owned [A]) -> [A] : $@convention(thin) <Element> (@owned Array<Element>) -> @owned Array<Element> {
// %0                                             // user: %2
bb0(%0 : $Array<Element>):
  %1 = alloc_stack $Array<Element>                // users: %15, %6, %5, %4, %2
  store %0 to %1 : $*Array<Element>               // id: %2
  // function_ref Array._endMutation()
  %3 = function_ref @Swift.Array._endMutation() -> () : $@convention(method) <τ_0_0> (@inout Array<τ_0_0>) -> () // user: %4
  %4 = apply %3<Element>(%1) : $@convention(method) <τ_0_0> (@inout Array<τ_0_0>) -> ()
  %5 = load %1 : $*Array<Element>                 // users: %16, %10
  %6 = struct_element_addr %1 : $*Array<Element>, #Array._buffer // user: %7
  %7 = struct_element_addr %6 : $*_ArrayBuffer<Element>, #_ArrayBuffer._storage // user: %8
  %8 = struct_element_addr %7 : $*_BridgeStorage<__ContiguousArrayStorageBase>, #_BridgeStorage.rawValue // user: %9
  %9 = load %8 : $*Builtin.BridgeObject           // user: %14
  %10 = struct_extract %5 : $Array<Element>, #Array._buffer // user: %11
  %11 = struct_extract %10 : $_ArrayBuffer<Element>, #_ArrayBuffer._storage // user: %12
  %12 = struct_extract %11 : $_BridgeStorage<__ContiguousArrayStorageBase>, #_BridgeStorage.rawValue // user: %13
  strong_retain %12 : $Builtin.BridgeObject       // id: %13
  strong_release %9 : $Builtin.BridgeObject       // id: %14
  dealloc_stack %1 : $*Array<Element>             // id: %15
  return %5 : $Array<Element>                     // id: %16
} // end sil function 'Swift._finalizeUninitializedArray<A>(__owned [A]) -> [A]'

// default argument 1 of print(_:separator:terminator:)
sil shared_external @default argument 1 of Swift.print(_: Any..., separator: Swift.String, terminator: Swift.String) -> () : $@convention(thin) () -> @owned String {
bb0:
  %0 = string_literal utf8 " "                    // user: %5
  %1 = integer_literal $Builtin.Word, 1           // user: %5
  %2 = integer_literal $Builtin.Int1, -1          // user: %5
  %3 = metatype $@thin String.Type                // user: %5
  // function_ref String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)
  %4 = function_ref @Swift.String.init(_builtinStringLiteral: Builtin.RawPointer, utf8CodeUnitCount: Builtin.Word, isASCII: Builtin.Int1) -> Swift.String : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String // user: %5
  %5 = apply %4(%0, %1, %2, %3) : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String // user: %6
  return %5 : $String                             // id: %6
} // end sil function 'default argument 1 of Swift.print(_: Any..., separator: Swift.String, terminator: Swift.String) -> ()'

// default argument 2 of print(_:separator:terminator:)
sil shared_external @default argument 2 of Swift.print(_: Any..., separator: Swift.String, terminator: Swift.String) -> () : $@convention(thin) () -> @owned String {
bb0:
  %0 = string_literal utf8 "\n"                   // user: %5
  %1 = integer_literal $Builtin.Word, 1           // user: %5
  %2 = integer_literal $Builtin.Int1, -1          // user: %5
  %3 = metatype $@thin String.Type                // user: %5
  // function_ref String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)
  %4 = function_ref @Swift.String.init(_builtinStringLiteral: Builtin.RawPointer, utf8CodeUnitCount: Builtin.Word, isASCII: Builtin.Int1) -> Swift.String : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String // user: %5
  %5 = apply %4(%0, %1, %2, %3) : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String // user: %6
  return %5 : $String                             // id: %6
} // end sil function 'default argument 2 of Swift.print(_: Any..., separator: Swift.String, terminator: Swift.String) -> ()'

// print(_:separator:terminator:)
sil @Swift.print(_: Any..., separator: Swift.String, terminator: Swift.String) -> () : $@convention(thin) (@guaranteed Array<Any>, @guaranteed String, @guaranteed String) -> ()

// variable initialization expression of WYStudent.age
sil hidden [transparent] @variable initialization expression of main.WYStudent.age : Swift.Int : $@convention(thin) () -> Int {
bb0:
  %0 = integer_literal $Builtin.Int64, 18         // user: %1
  %1 = struct $Int (%0 : $Builtin.Int64)          // user: %2
  return %1 : $Int                                // id: %2
} // end sil function 'variable initialization expression of main.WYStudent.age : Swift.Int'

// Int.init(_builtinIntegerLiteral:)
sil public_external [transparent] @Swift.Int.init(_builtinIntegerLiteral: Builtin.IntLiteral) -> Swift.Int : $@convention(method) (Builtin.IntLiteral, @thin Int.Type) -> Int {
// %0                                             // user: %2
bb0(%0 : $Builtin.IntLiteral, %1 : $@thin Int.Type):
  %2 = builtin "s_to_s_checked_trunc_IntLiteral_Int64"(%0 : $Builtin.IntLiteral) : $(Builtin.Int64, Builtin.Int1) // user: %3
  %3 = tuple_extract %2 : $(Builtin.Int64, Builtin.Int1), 0 // user: %4
  %4 = struct $Int (%3 : $Builtin.Int64)          // user: %5
  return %4 : $Int                                // id: %5
} // end sil function 'Swift.Int.init(_builtinIntegerLiteral: Builtin.IntLiteral) -> Swift.Int'

// WYStudent.age.getter
sil hidden [transparent] @main.WYStudent.age.getter : Swift.Int : $@convention(method) (@guaranteed WYStudent) -> Int {
// %0 "self"                                      // users: %2, %1
bb0(%0 : $WYStudent):
  debug_value %0 : $WYStudent, let, name "self", argno 1, implicit // id: %1
  %2 = ref_element_addr %0 : $WYStudent, #WYStudent.age // user: %3
  %3 = begin_access [read] [dynamic] %2 : $*Int   // users: %4, %5
  %4 = load %3 : $*Int                            // user: %6
  end_access %3 : $*Int                           // id: %5
  return %4 : $Int                                // id: %6
} // end sil function 'main.WYStudent.age.getter : Swift.Int'

// WYStudent.age.setter
sil hidden [transparent] @main.WYStudent.age.setter : Swift.Int : $@convention(method) (Int, @guaranteed WYStudent) -> () {
// %0 "value"                                     // users: %6, %2
// %1 "self"                                      // users: %4, %3
bb0(%0 : $Int, %1 : $WYStudent):
  debug_value %0 : $Int, let, name "value", argno 1, implicit // id: %2
  debug_value %1 : $WYStudent, let, name "self", argno 2, implicit // id: %3
  %4 = ref_element_addr %1 : $WYStudent, #WYStudent.age // user: %5
  %5 = begin_access [modify] [dynamic] %4 : $*Int // users: %6, %7
  store %0 to %5 : $*Int                          // id: %6
  end_access %5 : $*Int                           // id: %7
  %8 = tuple ()                                   // user: %9
  return %8 : $()                                 // id: %9
} // end sil function 'main.WYStudent.age.setter : Swift.Int'

// WYStudent.age.modify
sil hidden [transparent] @main.WYStudent.age.modify : Swift.Int : $@yield_once @convention(method) (@guaranteed WYStudent) -> @yields @inout Int {
// %0 "self"                                      // users: %2, %1
bb0(%0 : $WYStudent):
  debug_value %0 : $WYStudent, let, name "self", argno 1, implicit // id: %1
  %2 = ref_element_addr %0 : $WYStudent, #WYStudent.age // user: %3
  %3 = begin_access [modify] [dynamic] %2 : $*Int // users: %5, %8, %4
  yield %3 : $*Int, resume bb1, unwind bb2        // id: %4

bb1:                                              // Preds: bb0
  end_access %3 : $*Int                           // id: %5
  %6 = tuple ()                                   // user: %7
  return %6 : $()                                 // id: %7

bb2:                                              // Preds: bb0
  end_access %3 : $*Int                           // id: %8
  unwind                                          // id: %9
} // end sil function 'main.WYStudent.age.modify : Swift.Int'

// variable initialization expression of WYStudent.name
sil hidden [transparent] @variable initialization expression of main.WYStudent.name : Swift.String : $@convention(thin) () -> @owned String {
bb0:
  %0 = string_literal utf8 "wy"                   // user: %5
  %1 = integer_literal $Builtin.Word, 2           // user: %5
  %2 = integer_literal $Builtin.Int1, -1          // user: %5
  %3 = metatype $@thin String.Type                // user: %5
  // function_ref String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)
  %4 = function_ref @Swift.String.init(_builtinStringLiteral: Builtin.RawPointer, utf8CodeUnitCount: Builtin.Word, isASCII: Builtin.Int1) -> Swift.String : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String // user: %5
  %5 = apply %4(%0, %1, %2, %3) : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String // user: %6
  return %5 : $String                             // id: %6
} // end sil function 'variable initialization expression of main.WYStudent.name : Swift.String'

// WYStudent.name.getter
sil hidden [transparent] @main.WYStudent.name.getter : Swift.String : $@convention(method) (@guaranteed WYStudent) -> @owned String {
// %0 "self"                                      // users: %2, %1
bb0(%0 : $WYStudent):
  debug_value %0 : $WYStudent, let, name "self", argno 1, implicit // id: %1
  %2 = ref_element_addr %0 : $WYStudent, #WYStudent.name // user: %3
  %3 = begin_access [read] [dynamic] %2 : $*String // users: %4, %6
  %4 = load %3 : $*String                         // users: %7, %5
  retain_value %4 : $String                       // id: %5
  end_access %3 : $*String                        // id: %6
  return %4 : $String                             // id: %7
} // end sil function 'main.WYStudent.name.getter : Swift.String'

// WYStudent.name.setter
sil hidden [transparent] @main.WYStudent.name.setter : Swift.String : $@convention(method) (@owned String, @guaranteed WYStudent) -> () {
// %0 "value"                                     // users: %11, %8, %4, %2
// %1 "self"                                      // users: %5, %3
bb0(%0 : $String, %1 : $WYStudent):
  debug_value %0 : $String, let, name "value", argno 1, implicit // id: %2
  debug_value %1 : $WYStudent, let, name "self", argno 2, implicit // id: %3
  retain_value %0 : $String                       // id: %4
  %5 = ref_element_addr %1 : $WYStudent, #WYStudent.name // user: %6
  %6 = begin_access [modify] [dynamic] %5 : $*String // users: %8, %7, %10
  %7 = load %6 : $*String                         // user: %9
  store %0 to %6 : $*String                       // id: %8
  release_value %7 : $String                      // id: %9
  end_access %6 : $*String                        // id: %10
  release_value %0 : $String                      // id: %11
  %12 = tuple ()                                  // user: %13
  return %12 : $()                                // id: %13
} // end sil function 'main.WYStudent.name.setter : Swift.String'

// WYStudent.name.modify
sil hidden [transparent] @main.WYStudent.name.modify : Swift.String : $@yield_once @convention(method) (@guaranteed WYStudent) -> @yields @inout String {
// %0 "self"                                      // users: %2, %1
bb0(%0 : $WYStudent):
  debug_value %0 : $WYStudent, let, name "self", argno 1, implicit // id: %1
  %2 = ref_element_addr %0 : $WYStudent, #WYStudent.name // user: %3
  %3 = begin_access [modify] [dynamic] %2 : $*String // users: %5, %8, %4
  yield %3 : $*String, resume bb1, unwind bb2     // id: %4

bb1:                                              // Preds: bb0
  end_access %3 : $*String                        // id: %5
  %6 = tuple ()                                   // user: %7
  return %6 : $()                                 // id: %7

bb2:                                              // Preds: bb0
  end_access %3 : $*String                        // id: %8
  unwind                                          // id: %9
} // end sil function 'main.WYStudent.name.modify : Swift.String'

// WYStudent.deinit
sil hidden @main.WYStudent.deinit : $@convention(method) (@guaranteed WYStudent) -> @owned Builtin.NativeObject {
// %0 "self"                                      // users: %6, %2, %1
bb0(%0 : $WYStudent):
  debug_value %0 : $WYStudent, let, name "self", argno 1, implicit // id: %1
  %2 = ref_element_addr %0 : $WYStudent, #WYStudent.name // user: %3
  %3 = begin_access [deinit] [static] %2 : $*String // users: %5, %4
  destroy_addr %3 : $*String                      // id: %4
  end_access %3 : $*String                        // id: %5
  %6 = unchecked_ref_cast %0 : $WYStudent to $Builtin.NativeObject // user: %7
  return %6 : $Builtin.NativeObject               // id: %7
} // end sil function 'main.WYStudent.deinit'

// WYStudent.__deallocating_deinit
sil hidden @main.WYStudent.__deallocating_deinit : $@convention(method) (@owned WYStudent) -> () {
// %0 "self"                                      // users: %3, %1
bb0(%0 : $WYStudent):
  debug_value %0 : $WYStudent, let, name "self", argno 1, implicit // id: %1
  // function_ref WYStudent.deinit
  %2 = function_ref @main.WYStudent.deinit : $@convention(method) (@guaranteed WYStudent) -> @owned Builtin.NativeObject // user: %3
  %3 = apply %2(%0) : $@convention(method) (@guaranteed WYStudent) -> @owned Builtin.NativeObject // user: %4
  %4 = unchecked_ref_cast %3 : $Builtin.NativeObject to $WYStudent // user: %5
  dealloc_ref %4 : $WYStudent                     // id: %5
  %6 = tuple ()                                   // user: %7
  return %6 : $()                                 // id: %7
} // end sil function 'main.WYStudent.__deallocating_deinit'

// WYStudent.__allocating_init()
sil hidden [exact_self_class] @main.WYStudent.__allocating_init() -> main.WYStudent : $@convention(method) (@thick WYStudent.Type) -> @owned WYStudent {
// %0 "$metatype"
bb0(%0 : $@thick WYStudent.Type):
  %1 = alloc_ref $WYStudent                       // user: %3
  // function_ref WYStudent.init()
  %2 = function_ref @main.WYStudent.init() -> main.WYStudent : $@convention(method) (@owned WYStudent) -> @owned WYStudent // user: %3
  %3 = apply %2(%1) : $@convention(method) (@owned WYStudent) -> @owned WYStudent // user: %4
  return %3 : $WYStudent                          // id: %4
} // end sil function 'main.WYStudent.__allocating_init() -> main.WYStudent'

// WYStudent.init()
sil hidden @main.WYStudent.init() -> main.WYStudent : $@convention(method) (@owned WYStudent) -> @owned WYStudent {
// %0 "self"                                      // users: %6, %2, %14, %1
bb0(%0 : $WYStudent):
  debug_value %0 : $WYStudent, let, name "self", argno 1, implicit // id: %1
  %2 = ref_element_addr %0 : $WYStudent, #WYStudent.age // user: %5
  %3 = integer_literal $Builtin.Int64, 18         // user: %4
  %4 = struct $Int (%3 : $Builtin.Int64)          // user: %5
  store %4 to %2 : $*Int                          // id: %5
  %6 = ref_element_addr %0 : $WYStudent, #WYStudent.name // user: %13
  %7 = string_literal utf8 "wy"                   // user: %12
  %8 = integer_literal $Builtin.Word, 2           // user: %12
  %9 = integer_literal $Builtin.Int1, -1          // user: %12
  %10 = metatype $@thin String.Type               // user: %12
  // function_ref String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)
  %11 = function_ref @Swift.String.init(_builtinStringLiteral: Builtin.RawPointer, utf8CodeUnitCount: Builtin.Word, isASCII: Builtin.Int1) -> Swift.String : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String // user: %12
  %12 = apply %11(%7, %8, %9, %10) : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String // user: %13
  store %12 to %6 : $*String                      // id: %13
  return %0 : $WYStudent                          // id: %14
} // end sil function 'main.WYStudent.init() -> main.WYStudent'

// variable initialization expression of Square.width
sil hidden [transparent] @variable initialization expression of main.Square.width : Swift.Double : $@convention(thin) () -> Double {
bb0:
  %0 = float_literal $Builtin.FPIEEE64, 0x4020000000000000 // 8 // user: %1
  %1 = struct $Double (%0 : $Builtin.FPIEEE64)    // user: %2
  return %1 : $Double                             // id: %2
} // end sil function 'variable initialization expression of main.Square.width : Swift.Double'

// Double.init(_builtinFloatLiteral:)
sil public_external [transparent] @Swift.Double.init(_builtinFloatLiteral: Builtin.FPIEEE80) -> Swift.Double : $@convention(method) (Builtin.FPIEEE80, @thin Double.Type) -> Double {
// %0                                             // user: %2
bb0(%0 : $Builtin.FPIEEE80, %1 : $@thin Double.Type):
  %2 = builtin "fptrunc_FPIEEE80_FPIEEE64"(%0 : $Builtin.FPIEEE80) : $Builtin.FPIEEE64 // user: %3
  %3 = struct $Double (%2 : $Builtin.FPIEEE64)    // user: %4
  return %3 : $Double                             // id: %4
} // end sil function 'Swift.Double.init(_builtinFloatLiteral: Builtin.FPIEEE80) -> Swift.Double'

// Square.width.getter
sil hidden [transparent] @main.Square.width.getter : Swift.Double : $@convention(method) (@guaranteed Square) -> Double {
// %0 "self"                                      // users: %2, %1
bb0(%0 : $Square):
  debug_value %0 : $Square, let, name "self", argno 1, implicit // id: %1
  %2 = ref_element_addr %0 : $Square, #Square.width // user: %3
  %3 = begin_access [read] [dynamic] %2 : $*Double // users: %4, %5
  %4 = load %3 : $*Double                         // user: %6
  end_access %3 : $*Double                        // id: %5
  return %4 : $Double                             // id: %6
} // end sil function 'main.Square.width.getter : Swift.Double'

// Square.width.setter
sil hidden [transparent] @main.Square.width.setter : Swift.Double : $@convention(method) (Double, @guaranteed Square) -> () {
// %0 "value"                                     // users: %6, %2
// %1 "self"                                      // users: %4, %3
bb0(%0 : $Double, %1 : $Square):
  debug_value %0 : $Double, let, name "value", argno 1, implicit // id: %2
  debug_value %1 : $Square, let, name "self", argno 2, implicit // id: %3
  %4 = ref_element_addr %1 : $Square, #Square.width // user: %5
  %5 = begin_access [modify] [dynamic] %4 : $*Double // users: %6, %7
  store %0 to %5 : $*Double                       // id: %6
  end_access %5 : $*Double                        // id: %7
  %8 = tuple ()                                   // user: %9
  return %8 : $()                                 // id: %9
} // end sil function 'main.Square.width.setter : Swift.Double'

// Square.width.modify
sil hidden [transparent] @main.Square.width.modify : Swift.Double : $@yield_once @convention(method) (@guaranteed Square) -> @yields @inout Double {
// %0 "self"                                      // users: %2, %1
bb0(%0 : $Square):
  debug_value %0 : $Square, let, name "self", argno 1, implicit // id: %1
  %2 = ref_element_addr %0 : $Square, #Square.width // user: %3
  %3 = begin_access [modify] [dynamic] %2 : $*Double // users: %5, %8, %4
  yield %3 : $*Double, resume bb1, unwind bb2     // id: %4

bb1:                                              // Preds: bb0
  end_access %3 : $*Double                        // id: %5
  %6 = tuple ()                                   // user: %7
  return %6 : $()                                 // id: %7

bb2:                                              // Preds: bb0
  end_access %3 : $*Double                        // id: %8
  unwind                                          // id: %9
} // end sil function 'main.Square.width.modify : Swift.Double'

// Square.area.getter
sil hidden @main.Square.area.getter : Swift.Double : $@convention(method) (@guaranteed Square) -> Double {
// %0 "self"                                      // users: %5, %4, %3, %2, %1
bb0(%0 : $Square):
  debug_value %0 : $Square, let, name "self", argno 1, implicit // id: %1
  %2 = class_method %0 : $Square, #Square.width!getter : (Square) -> () -> Double, $@convention(method) (@guaranteed Square) -> Double // user: %3
  %3 = apply %2(%0) : $@convention(method) (@guaranteed Square) -> Double // user: %6
  %4 = class_method %0 : $Square, #Square.width!getter : (Square) -> () -> Double, $@convention(method) (@guaranteed Square) -> Double // user: %5
  %5 = apply %4(%0) : $@convention(method) (@guaranteed Square) -> Double // user: %7
  %6 = struct_extract %3 : $Double, #Double._value // user: %8
  %7 = struct_extract %5 : $Double, #Double._value // user: %8
  %8 = builtin "fmul_FPIEEE64"(%6 : $Builtin.FPIEEE64, %7 : $Builtin.FPIEEE64) : $Builtin.FPIEEE64 // user: %9
  %9 = struct $Double (%8 : $Builtin.FPIEEE64)    // user: %10
  return %9 : $Double                             // id: %10
} // end sil function 'main.Square.area.getter : Swift.Double'

// static Double.* infix(_:_:)
sil public_external [transparent] @static Swift.Double.* infix(Swift.Double, Swift.Double) -> Swift.Double : $@convention(method) (Double, Double, @thin Double.Type) -> Double {
// %0                                             // user: %3
// %1                                             // user: %4
bb0(%0 : $Double, %1 : $Double, %2 : $@thin Double.Type):
  %3 = struct_extract %0 : $Double, #Double._value // user: %5
  %4 = struct_extract %1 : $Double, #Double._value // user: %5
  %5 = builtin "fmul_FPIEEE64"(%3 : $Builtin.FPIEEE64, %4 : $Builtin.FPIEEE64) : $Builtin.FPIEEE64 // user: %6
  %6 = struct $Double (%5 : $Builtin.FPIEEE64)    // user: %7
  return %6 : $Double                             // id: %7
} // end sil function 'static Swift.Double.* infix(Swift.Double, Swift.Double) -> Swift.Double'

// Square.area.setter
sil hidden @main.Square.area.setter : Swift.Double : $@convention(method) (Double, @guaranteed Square) -> () {
// %0 "newValue"                                  // users: %5, %2
// %1 "self"                                      // users: %7, %6, %3
bb0(%0 : $Double, %1 : $Square):
  debug_value %0 : $Double, let, name "newValue", argno 1, implicit // id: %2
  debug_value %1 : $Square, let, name "self", argno 2, implicit // id: %3
  // function_ref sqrt
  %4 = function_ref @sqrt : $@convention(c) (Double) -> Double // user: %5
  %5 = apply %4(%0) : $@convention(c) (Double) -> Double // user: %7
  %6 = class_method %1 : $Square, #Square.width!setter : (Square) -> (Double) -> (), $@convention(method) (Double, @guaranteed Square) -> () // user: %7
  %7 = apply %6(%5, %1) : $@convention(method) (Double, @guaranteed Square) -> ()
  %8 = tuple ()                                   // user: %9
  return %8 : $()                                 // id: %9
} // end sil function 'main.Square.area.setter : Swift.Double'

// sqrt
// clang name: sqrt
sil [readnone] [clang sqrt] @sqrt : $@convention(c) (Double) -> Double

// Square.area.modify
sil hidden [transparent] @main.Square.area.modify : Swift.Double : $@yield_once @convention(method) (@guaranteed Square) -> @yields @inout Double {
// %0 "self"                                      // users: %9, %15, %4, %1
bb0(%0 : $Square):
  debug_value %0 : $Square, let, name "self", argno 1, implicit // id: %1
  %2 = alloc_stack $Double                        // users: %13, %7, %5, %10, %16, %6
  // function_ref Square.area.getter
  %3 = function_ref @main.Square.area.getter : Swift.Double : $@convention(method) (@guaranteed Square) -> Double // user: %4
  %4 = apply %3(%0) : $@convention(method) (@guaranteed Square) -> Double // user: %5
  store %4 to %2 : $*Double                       // id: %5
  yield %2 : $*Double, resume bb1, unwind bb2     // id: %6

bb1:                                              // Preds: bb0
  %7 = load %2 : $*Double                         // user: %9
  // function_ref Square.area.setter
  %8 = function_ref @main.Square.area.setter : Swift.Double : $@convention(method) (Double, @guaranteed Square) -> () // user: %9
  %9 = apply %8(%7, %0) : $@convention(method) (Double, @guaranteed Square) -> ()
  dealloc_stack %2 : $*Double                     // id: %10
  %11 = tuple ()                                  // user: %12
  return %11 : $()                                // id: %12

bb2:                                              // Preds: bb0
  %13 = load %2 : $*Double                        // user: %15
  // function_ref Square.area.setter
  %14 = function_ref @main.Square.area.setter : Swift.Double : $@convention(method) (Double, @guaranteed Square) -> () // user: %15
  %15 = apply %14(%13, %0) : $@convention(method) (Double, @guaranteed Square) -> ()
  dealloc_stack %2 : $*Double                     // id: %16
  unwind                                          // id: %17
} // end sil function 'main.Square.area.modify : Swift.Double'

// Square.deinit
sil hidden @main.Square.deinit : $@convention(method) (@guaranteed Square) -> @owned Builtin.NativeObject {
// %0 "self"                                      // users: %2, %1
bb0(%0 : $Square):
  debug_value %0 : $Square, let, name "self", argno 1, implicit // id: %1
  %2 = unchecked_ref_cast %0 : $Square to $Builtin.NativeObject // user: %3
  return %2 : $Builtin.NativeObject               // id: %3
} // end sil function 'main.Square.deinit'

// Square.__deallocating_deinit
sil hidden @main.Square.__deallocating_deinit : $@convention(method) (@owned Square) -> () {
// %0 "self"                                      // users: %3, %1
bb0(%0 : $Square):
  debug_value %0 : $Square, let, name "self", argno 1, implicit // id: %1
  // function_ref Square.deinit
  %2 = function_ref @main.Square.deinit : $@convention(method) (@guaranteed Square) -> @owned Builtin.NativeObject // user: %3
  %3 = apply %2(%0) : $@convention(method) (@guaranteed Square) -> @owned Builtin.NativeObject // user: %4
  %4 = unchecked_ref_cast %3 : $Builtin.NativeObject to $Square // user: %5
  dealloc_ref %4 : $Square                        // id: %5
  %6 = tuple ()                                   // user: %7
  return %6 : $()                                 // id: %7
} // end sil function 'main.Square.__deallocating_deinit'

// Square.__allocating_init()
sil hidden [exact_self_class] @main.Square.__allocating_init() -> main.Square : $@convention(method) (@thick Square.Type) -> @owned Square {
// %0 "$metatype"
bb0(%0 : $@thick Square.Type):
  %1 = alloc_ref $Square                          // user: %3
  // function_ref Square.init()
  %2 = function_ref @main.Square.init() -> main.Square : $@convention(method) (@owned Square) -> @owned Square // user: %3
  %3 = apply %2(%1) : $@convention(method) (@owned Square) -> @owned Square // user: %4
  return %3 : $Square                             // id: %4
} // end sil function 'main.Square.__allocating_init() -> main.Square'

// Square.init()
sil hidden @main.Square.init() -> main.Square : $@convention(method) (@owned Square) -> @owned Square {
// %0 "self"                                      // users: %2, %6, %1
bb0(%0 : $Square):
  debug_value %0 : $Square, let, name "self", argno 1, implicit // id: %1
  %2 = ref_element_addr %0 : $Square, #Square.width // user: %5
  %3 = float_literal $Builtin.FPIEEE64, 0x4020000000000000 // 8 // user: %4
  %4 = struct $Double (%3 : $Builtin.FPIEEE64)    // user: %5
  store %4 to %2 : $*Double                       // id: %5
  return %0 : $Square                             // id: %6
} // end sil function 'main.Square.init() -> main.Square'

// class_getInstanceSize
// clang name: class_getInstanceSize
sil [available 10.5] [clang class_getInstanceSize] @class_getInstanceSize : $@convention(c) (Optional<@objc_metatype AnyObject.Type>) -> Int

// variable initialization expression of WYStudent2.name
sil hidden [transparent] @variable initialization expression of main.WYStudent2.name : Swift.String : $@convention(thin) () -> @owned String {
bb0:
  %0 = string_literal utf8 "测试"                 // user: %5
  %1 = integer_literal $Builtin.Word, 6           // user: %5
  %2 = integer_literal $Builtin.Int1, 0           // user: %5
  %3 = metatype $@thin String.Type                // user: %5
  // function_ref String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)
  %4 = function_ref @Swift.String.init(_builtinStringLiteral: Builtin.RawPointer, utf8CodeUnitCount: Builtin.Word, isASCII: Builtin.Int1) -> Swift.String : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String // user: %5
  %5 = apply %4(%0, %1, %2, %3) : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String // user: %6
  return %5 : $String                             // id: %6
} // end sil function 'variable initialization expression of main.WYStudent2.name : Swift.String'

// WYStudent2.name.willset
sil private @main.WYStudent2.name.willset : Swift.String : $@convention(method) (@guaranteed String, @guaranteed WYStudent2) -> () {
// %0 "newValue"                                  // users: %31, %2
// %1 "self"                                      // user: %3
bb0(%0 : $String, %1 : $WYStudent2):
  debug_value %0 : $String, let, name "newValue", argno 1, implicit // id: %2
  debug_value %1 : $WYStudent2, let, name "self", argno 2, implicit // id: %3
  %4 = integer_literal $Builtin.Word, 1           // user: %6
  // function_ref _allocateUninitializedArray<A>(_:)
  %5 = function_ref @Swift._allocateUninitializedArray<A>(Builtin.Word) -> ([A], Builtin.RawPointer) : $@convention(thin) <τ_0_0> (Builtin.Word) -> (@owned Array<τ_0_0>, Builtin.RawPointer) // user: %6
  %6 = apply %5<Any>(%4) : $@convention(thin) <τ_0_0> (Builtin.Word) -> (@owned Array<τ_0_0>, Builtin.RawPointer) // users: %8, %7
  %7 = tuple_extract %6 : $(Array<Any>, Builtin.RawPointer), 0 // user: %58
  %8 = tuple_extract %6 : $(Array<Any>, Builtin.RawPointer), 1 // user: %9
  %9 = pointer_to_address %8 : $Builtin.RawPointer to [strict] $*Any // user: %55
  %10 = alloc_stack $DefaultStringInterpolation, var, name "$interpolation", implicit // users: %48, %18, %51, %50, %25, %32, %43
  %11 = integer_literal $Builtin.Int64, 17        // user: %12
  %12 = struct $Int (%11 : $Builtin.Int64)        // user: %17
  %13 = integer_literal $Builtin.Int64, 1         // user: %14
  %14 = struct $Int (%13 : $Builtin.Int64)        // user: %17
  %15 = metatype $@thin DefaultStringInterpolation.Type // user: %17
  // function_ref DefaultStringInterpolation.init(literalCapacity:interpolationCount:)
  %16 = function_ref @Swift.DefaultStringInterpolation.init(literalCapacity: Swift.Int, interpolationCount: Swift.Int) -> Swift.DefaultStringInterpolation : $@convention(method) (Int, Int, @thin DefaultStringInterpolation.Type) -> @owned DefaultStringInterpolation // user: %17
  %17 = apply %16(%12, %14, %15) : $@convention(method) (Int, Int, @thin DefaultStringInterpolation.Type) -> @owned DefaultStringInterpolation // user: %18
  store %17 to %10 : $*DefaultStringInterpolation // id: %18
  %19 = string_literal utf8 "willSet newValue "   // user: %24
  %20 = integer_literal $Builtin.Word, 17         // user: %24
  %21 = integer_literal $Builtin.Int1, -1         // user: %24
  %22 = metatype $@thin String.Type               // user: %24
  // function_ref String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)
  %23 = function_ref @Swift.String.init(_builtinStringLiteral: Builtin.RawPointer, utf8CodeUnitCount: Builtin.Word, isASCII: Builtin.Int1) -> Swift.String : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String // user: %24
  %24 = apply %23(%19, %20, %21, %22) : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String // users: %29, %27
  %25 = begin_access [modify] [static] %10 : $*DefaultStringInterpolation // users: %28, %27
  // function_ref DefaultStringInterpolation.appendLiteral(_:)
  %26 = function_ref @Swift.DefaultStringInterpolation.appendLiteral(Swift.String) -> () : $@convention(method) (@guaranteed String, @inout DefaultStringInterpolation) -> () // user: %27
  %27 = apply %26(%24, %25) : $@convention(method) (@guaranteed String, @inout DefaultStringInterpolation) -> ()
  end_access %25 : $*DefaultStringInterpolation   // id: %28
  release_value %24 : $String                     // id: %29
  %30 = alloc_stack $String                       // users: %31, %36, %34
  store %0 to %30 : $*String                      // id: %31
  %32 = begin_access [modify] [static] %10 : $*DefaultStringInterpolation // users: %35, %34
  // function_ref DefaultStringInterpolation.appendInterpolation<A>(_:)
  %33 = function_ref @Swift.DefaultStringInterpolation.appendInterpolation<A where A: Swift.CustomStringConvertible, A: Swift.TextOutputStreamable>(A) -> () : $@convention(method) <τ_0_0 where τ_0_0 : CustomStringConvertible, τ_0_0 : TextOutputStreamable> (@in_guaranteed τ_0_0, @inout DefaultStringInterpolation) -> () // user: %34
  %34 = apply %33<String>(%30, %32) : $@convention(method) <τ_0_0 where τ_0_0 : CustomStringConvertible, τ_0_0 : TextOutputStreamable> (@in_guaranteed τ_0_0, @inout DefaultStringInterpolation) -> ()
  end_access %32 : $*DefaultStringInterpolation   // id: %35
  dealloc_stack %30 : $*String                    // id: %36
  %37 = string_literal utf8 ""                    // user: %42
  %38 = integer_literal $Builtin.Word, 0          // user: %42
  %39 = integer_literal $Builtin.Int1, -1         // user: %42
  %40 = metatype $@thin String.Type               // user: %42
  // function_ref String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)
  %41 = function_ref @Swift.String.init(_builtinStringLiteral: Builtin.RawPointer, utf8CodeUnitCount: Builtin.Word, isASCII: Builtin.Int1) -> Swift.String : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String // user: %42
  %42 = apply %41(%37, %38, %39, %40) : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String // users: %47, %45
  %43 = begin_access [modify] [static] %10 : $*DefaultStringInterpolation // users: %46, %45
  // function_ref DefaultStringInterpolation.appendLiteral(_:)
  %44 = function_ref @Swift.DefaultStringInterpolation.appendLiteral(Swift.String) -> () : $@convention(method) (@guaranteed String, @inout DefaultStringInterpolation) -> () // user: %45
  %45 = apply %44(%42, %43) : $@convention(method) (@guaranteed String, @inout DefaultStringInterpolation) -> ()
  end_access %43 : $*DefaultStringInterpolation   // id: %46
  release_value %42 : $String                     // id: %47
  %48 = load %10 : $*DefaultStringInterpolation   // users: %54, %49
  retain_value %48 : $DefaultStringInterpolation  // id: %49
  destroy_addr %10 : $*DefaultStringInterpolation // id: %50
  dealloc_stack %10 : $*DefaultStringInterpolation // id: %51
  %52 = metatype $@thin String.Type               // user: %54
  // function_ref String.init(stringInterpolation:)
  %53 = function_ref @Swift.String.init(stringInterpolation: Swift.DefaultStringInterpolation) -> Swift.String : $@convention(method) (@owned DefaultStringInterpolation, @thin String.Type) -> @owned String // user: %54
  %54 = apply %53(%48, %52) : $@convention(method) (@owned DefaultStringInterpolation, @thin String.Type) -> @owned String // user: %56
  %55 = init_existential_addr %9 : $*Any, $String // user: %56
  store %54 to %55 : $*String                     // id: %56
  // function_ref _finalizeUninitializedArray<A>(_:)
  %57 = function_ref @Swift._finalizeUninitializedArray<A>(__owned [A]) -> [A] : $@convention(thin) <τ_0_0> (@owned Array<τ_0_0>) -> @owned Array<τ_0_0> // user: %58
  %58 = apply %57<Any>(%7) : $@convention(thin) <τ_0_0> (@owned Array<τ_0_0>) -> @owned Array<τ_0_0> // users: %67, %64
  // function_ref default argument 1 of print(_:separator:terminator:)
  %59 = function_ref @default argument 1 of Swift.print(_: Any..., separator: Swift.String, terminator: Swift.String) -> () : $@convention(thin) () -> @owned String // user: %60
  %60 = apply %59() : $@convention(thin) () -> @owned String // users: %66, %64
  // function_ref default argument 2 of print(_:separator:terminator:)
  %61 = function_ref @default argument 2 of Swift.print(_: Any..., separator: Swift.String, terminator: Swift.String) -> () : $@convention(thin) () -> @owned String // user: %62
  %62 = apply %61() : $@convention(thin) () -> @owned String // users: %65, %64
  // function_ref print(_:separator:terminator:)
  %63 = function_ref @Swift.print(_: Any..., separator: Swift.String, terminator: Swift.String) -> () : $@convention(thin) (@guaranteed Array<Any>, @guaranteed String, @guaranteed String) -> () // user: %64
  %64 = apply %63(%58, %60, %62) : $@convention(thin) (@guaranteed Array<Any>, @guaranteed String, @guaranteed String) -> ()
  release_value %62 : $String                     // id: %65
  release_value %60 : $String                     // id: %66
  release_value %58 : $Array<Any>                 // id: %67
  %68 = tuple ()                                  // user: %69
  return %68 : $()                                // id: %69
} // end sil function 'main.WYStudent2.name.willset : Swift.String'

// DefaultStringInterpolation.init(literalCapacity:interpolationCount:)
sil @Swift.DefaultStringInterpolation.init(literalCapacity: Swift.Int, interpolationCount: Swift.Int) -> Swift.DefaultStringInterpolation : $@convention(method) (Int, Int, @thin DefaultStringInterpolation.Type) -> @owned DefaultStringInterpolation

// DefaultStringInterpolation.appendLiteral(_:)
sil @Swift.DefaultStringInterpolation.appendLiteral(Swift.String) -> () : $@convention(method) (@guaranteed String, @inout DefaultStringInterpolation) -> ()

// DefaultStringInterpolation.appendInterpolation<A>(_:)
sil @Swift.DefaultStringInterpolation.appendInterpolation<A where A: Swift.CustomStringConvertible, A: Swift.TextOutputStreamable>(A) -> () : $@convention(method) <τ_0_0 where τ_0_0 : CustomStringConvertible, τ_0_0 : TextOutputStreamable> (@in_guaranteed τ_0_0, @inout DefaultStringInterpolation) -> ()

// String.init(stringInterpolation:)
sil [readonly] @Swift.String.init(stringInterpolation: Swift.DefaultStringInterpolation) -> Swift.String : $@convention(method) (@owned DefaultStringInterpolation, @thin String.Type) -> @owned String

// WYStudent2.name.didset
sil private @main.WYStudent2.name.didset : Swift.String : $@convention(method) (@guaranteed String, @guaranteed WYStudent2) -> () {
// %0 "oldValue"                                  // users: %31, %2
// %1 "self"                                      // user: %3
bb0(%0 : $String, %1 : $WYStudent2):
  debug_value %0 : $String, let, name "oldValue", argno 1, implicit // id: %2
  debug_value %1 : $WYStudent2, let, name "self", argno 2, implicit // id: %3
  %4 = integer_literal $Builtin.Word, 1           // user: %6
  // function_ref _allocateUninitializedArray<A>(_:)
  %5 = function_ref @Swift._allocateUninitializedArray<A>(Builtin.Word) -> ([A], Builtin.RawPointer) : $@convention(thin) <τ_0_0> (Builtin.Word) -> (@owned Array<τ_0_0>, Builtin.RawPointer) // user: %6
  %6 = apply %5<Any>(%4) : $@convention(thin) <τ_0_0> (Builtin.Word) -> (@owned Array<τ_0_0>, Builtin.RawPointer) // users: %8, %7
  %7 = tuple_extract %6 : $(Array<Any>, Builtin.RawPointer), 0 // user: %58
  %8 = tuple_extract %6 : $(Array<Any>, Builtin.RawPointer), 1 // user: %9
  %9 = pointer_to_address %8 : $Builtin.RawPointer to [strict] $*Any // user: %55
  %10 = alloc_stack $DefaultStringInterpolation, var, name "$interpolation", implicit // users: %48, %18, %51, %50, %25, %32, %43
  %11 = integer_literal $Builtin.Int64, 16        // user: %12
  %12 = struct $Int (%11 : $Builtin.Int64)        // user: %17
  %13 = integer_literal $Builtin.Int64, 1         // user: %14
  %14 = struct $Int (%13 : $Builtin.Int64)        // user: %17
  %15 = metatype $@thin DefaultStringInterpolation.Type // user: %17
  // function_ref DefaultStringInterpolation.init(literalCapacity:interpolationCount:)
  %16 = function_ref @Swift.DefaultStringInterpolation.init(literalCapacity: Swift.Int, interpolationCount: Swift.Int) -> Swift.DefaultStringInterpolation : $@convention(method) (Int, Int, @thin DefaultStringInterpolation.Type) -> @owned DefaultStringInterpolation // user: %17
  %17 = apply %16(%12, %14, %15) : $@convention(method) (Int, Int, @thin DefaultStringInterpolation.Type) -> @owned DefaultStringInterpolation // user: %18
  store %17 to %10 : $*DefaultStringInterpolation // id: %18
  %19 = string_literal utf8 "didSet oldValue "    // user: %24
  %20 = integer_literal $Builtin.Word, 16         // user: %24
  %21 = integer_literal $Builtin.Int1, -1         // user: %24
  %22 = metatype $@thin String.Type               // user: %24
  // function_ref String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)
  %23 = function_ref @Swift.String.init(_builtinStringLiteral: Builtin.RawPointer, utf8CodeUnitCount: Builtin.Word, isASCII: Builtin.Int1) -> Swift.String : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String // user: %24
  %24 = apply %23(%19, %20, %21, %22) : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String // users: %29, %27
  %25 = begin_access [modify] [static] %10 : $*DefaultStringInterpolation // users: %28, %27
  // function_ref DefaultStringInterpolation.appendLiteral(_:)
  %26 = function_ref @Swift.DefaultStringInterpolation.appendLiteral(Swift.String) -> () : $@convention(method) (@guaranteed String, @inout DefaultStringInterpolation) -> () // user: %27
  %27 = apply %26(%24, %25) : $@convention(method) (@guaranteed String, @inout DefaultStringInterpolation) -> ()
  end_access %25 : $*DefaultStringInterpolation   // id: %28
  release_value %24 : $String                     // id: %29
  %30 = alloc_stack $String                       // users: %31, %36, %34
  store %0 to %30 : $*String                      // id: %31
  %32 = begin_access [modify] [static] %10 : $*DefaultStringInterpolation // users: %35, %34
  // function_ref DefaultStringInterpolation.appendInterpolation<A>(_:)
  %33 = function_ref @Swift.DefaultStringInterpolation.appendInterpolation<A where A: Swift.CustomStringConvertible, A: Swift.TextOutputStreamable>(A) -> () : $@convention(method) <τ_0_0 where τ_0_0 : CustomStringConvertible, τ_0_0 : TextOutputStreamable> (@in_guaranteed τ_0_0, @inout DefaultStringInterpolation) -> () // user: %34
  %34 = apply %33<String>(%30, %32) : $@convention(method) <τ_0_0 where τ_0_0 : CustomStringConvertible, τ_0_0 : TextOutputStreamable> (@in_guaranteed τ_0_0, @inout DefaultStringInterpolation) -> ()
  end_access %32 : $*DefaultStringInterpolation   // id: %35
  dealloc_stack %30 : $*String                    // id: %36
  %37 = string_literal utf8 ""                    // user: %42
  %38 = integer_literal $Builtin.Word, 0          // user: %42
  %39 = integer_literal $Builtin.Int1, -1         // user: %42
  %40 = metatype $@thin String.Type               // user: %42
  // function_ref String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)
  %41 = function_ref @Swift.String.init(_builtinStringLiteral: Builtin.RawPointer, utf8CodeUnitCount: Builtin.Word, isASCII: Builtin.Int1) -> Swift.String : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String // user: %42
  %42 = apply %41(%37, %38, %39, %40) : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String // users: %47, %45
  %43 = begin_access [modify] [static] %10 : $*DefaultStringInterpolation // users: %46, %45
  // function_ref DefaultStringInterpolation.appendLiteral(_:)
  %44 = function_ref @Swift.DefaultStringInterpolation.appendLiteral(Swift.String) -> () : $@convention(method) (@guaranteed String, @inout DefaultStringInterpolation) -> () // user: %45
  %45 = apply %44(%42, %43) : $@convention(method) (@guaranteed String, @inout DefaultStringInterpolation) -> ()
  end_access %43 : $*DefaultStringInterpolation   // id: %46
  release_value %42 : $String                     // id: %47
  %48 = load %10 : $*DefaultStringInterpolation   // users: %54, %49
  retain_value %48 : $DefaultStringInterpolation  // id: %49
  destroy_addr %10 : $*DefaultStringInterpolation // id: %50
  dealloc_stack %10 : $*DefaultStringInterpolation // id: %51
  %52 = metatype $@thin String.Type               // user: %54
  // function_ref String.init(stringInterpolation:)
  %53 = function_ref @Swift.String.init(stringInterpolation: Swift.DefaultStringInterpolation) -> Swift.String : $@convention(method) (@owned DefaultStringInterpolation, @thin String.Type) -> @owned String // user: %54
  %54 = apply %53(%48, %52) : $@convention(method) (@owned DefaultStringInterpolation, @thin String.Type) -> @owned String // user: %56
  %55 = init_existential_addr %9 : $*Any, $String // user: %56
  store %54 to %55 : $*String                     // id: %56
  // function_ref _finalizeUninitializedArray<A>(_:)
  %57 = function_ref @Swift._finalizeUninitializedArray<A>(__owned [A]) -> [A] : $@convention(thin) <τ_0_0> (@owned Array<τ_0_0>) -> @owned Array<τ_0_0> // user: %58
  %58 = apply %57<Any>(%7) : $@convention(thin) <τ_0_0> (@owned Array<τ_0_0>) -> @owned Array<τ_0_0> // users: %67, %64
  // function_ref default argument 1 of print(_:separator:terminator:)
  %59 = function_ref @default argument 1 of Swift.print(_: Any..., separator: Swift.String, terminator: Swift.String) -> () : $@convention(thin) () -> @owned String // user: %60
  %60 = apply %59() : $@convention(thin) () -> @owned String // users: %66, %64
  // function_ref default argument 2 of print(_:separator:terminator:)
  %61 = function_ref @default argument 2 of Swift.print(_: Any..., separator: Swift.String, terminator: Swift.String) -> () : $@convention(thin) () -> @owned String // user: %62
  %62 = apply %61() : $@convention(thin) () -> @owned String // users: %65, %64
  // function_ref print(_:separator:terminator:)
  %63 = function_ref @Swift.print(_: Any..., separator: Swift.String, terminator: Swift.String) -> () : $@convention(thin) (@guaranteed Array<Any>, @guaranteed String, @guaranteed String) -> () // user: %64
  %64 = apply %63(%58, %60, %62) : $@convention(thin) (@guaranteed Array<Any>, @guaranteed String, @guaranteed String) -> ()
  release_value %62 : $String                     // id: %65
  release_value %60 : $String                     // id: %66
  release_value %58 : $Array<Any>                 // id: %67
  %68 = tuple ()                                  // user: %69
  return %68 : $()                                // id: %69
} // end sil function 'main.WYStudent2.name.didset : Swift.String'

// WYStudent2.name.getter
sil hidden [transparent] @main.WYStudent2.name.getter : Swift.String : $@convention(method) (@guaranteed WYStudent2) -> @owned String {
// %0 "self"                                      // users: %2, %1
bb0(%0 : $WYStudent2):
  debug_value %0 : $WYStudent2, let, name "self", argno 1, implicit // id: %1
  %2 = ref_element_addr %0 : $WYStudent2, #WYStudent2.name // user: %3
  %3 = begin_access [read] [dynamic] %2 : $*String // users: %4, %6
  %4 = load %3 : $*String                         // users: %7, %5
  retain_value %4 : $String                       // id: %5
  end_access %3 : $*String                        // id: %6
  return %4 : $String                             // id: %7
} // end sil function 'main.WYStudent2.name.getter : Swift.String'

// WYStudent2.name.setter
sil hidden @main.WYStudent2.name.setter : Swift.String : $@convention(method) (@owned String, @guaranteed WYStudent2) -> () {
// %0 "value"                                     // users: %22, %16, %12, %2, %11
// %1 "self"                                      // users: %20, %13, %11, %4, %3
bb0(%0 : $String, %1 : $WYStudent2):
  debug_value %0 : $String, let, name "value", argno 1, implicit // id: %2
  debug_value %1 : $WYStudent2, let, name "self", argno 2, implicit // id: %3
  %4 = ref_element_addr %1 : $WYStudent2, #WYStudent2.name // user: %5
  %5 = begin_access [read] [dynamic] %4 : $*String // users: %6, %8
  %6 = load %5 : $*String                         // users: %21, %20, %9, %7
  retain_value %6 : $String                       // id: %7
  end_access %5 : $*String                        // id: %8
  debug_value %6 : $String, let, name "tmp", implicit // id: %9
  // function_ref WYStudent2.name.willset
  %10 = function_ref @main.WYStudent2.name.willset : Swift.String : $@convention(method) (@guaranteed String, @guaranteed WYStudent2) -> () // user: %11
  %11 = apply %10(%0, %1) : $@convention(method) (@guaranteed String, @guaranteed WYStudent2) -> ()
  retain_value %0 : $String                       // id: %12
  %13 = ref_element_addr %1 : $WYStudent2, #WYStudent2.name // user: %14
  %14 = begin_access [modify] [dynamic] %13 : $*String // users: %16, %15, %18
  %15 = load %14 : $*String                       // user: %17
  store %0 to %14 : $*String                      // id: %16
  release_value %15 : $String                     // id: %17
  end_access %14 : $*String                       // id: %18
  // function_ref WYStudent2.name.didset
  %19 = function_ref @main.WYStudent2.name.didset : Swift.String : $@convention(method) (@guaranteed String, @guaranteed WYStudent2) -> () // user: %20
  %20 = apply %19(%6, %1) : $@convention(method) (@guaranteed String, @guaranteed WYStudent2) -> ()
  release_value %6 : $String                      // id: %21
  release_value %0 : $String                      // id: %22
  %23 = tuple ()                                  // user: %24
  return %23 : $()                                // id: %24
} // end sil function 'main.WYStudent2.name.setter : Swift.String'

// WYStudent2.name.modify
sil hidden [transparent] @main.WYStudent2.name.modify : Swift.String : $@yield_once @convention(method) (@guaranteed WYStudent2) -> @yields @inout String {
// %0 "self"                                      // users: %12, %19, %3, %1
bb0(%0 : $WYStudent2):
  debug_value %0 : $WYStudent2, let, name "self", argno 1, implicit // id: %1
  %2 = alloc_stack $String                        // users: %16, %10, %8, %13, %21, %20, %9
  %3 = ref_element_addr %0 : $WYStudent2, #WYStudent2.name // user: %4
  %4 = begin_access [read] [dynamic] %3 : $*String // users: %5, %7
  %5 = load %4 : $*String                         // users: %8, %6
  retain_value %5 : $String                       // id: %6
  end_access %4 : $*String                        // id: %7
  store %5 to %2 : $*String                       // id: %8
  yield %2 : $*String, resume bb1, unwind bb2     // id: %9

bb1:                                              // Preds: bb0
  %10 = load %2 : $*String                        // user: %12
  // function_ref WYStudent2.name.setter
  %11 = function_ref @main.WYStudent2.name.setter : Swift.String : $@convention(method) (@owned String, @guaranteed WYStudent2) -> () // user: %12
  %12 = apply %11(%10, %0) : $@convention(method) (@owned String, @guaranteed WYStudent2) -> ()
  dealloc_stack %2 : $*String                     // id: %13
  %14 = tuple ()                                  // user: %15
  return %14 : $()                                // id: %15

bb2:                                              // Preds: bb0
  %16 = load %2 : $*String                        // users: %19, %17
  retain_value %16 : $String                      // id: %17
  // function_ref WYStudent2.name.setter
  %18 = function_ref @main.WYStudent2.name.setter : Swift.String : $@convention(method) (@owned String, @guaranteed WYStudent2) -> () // user: %19
  %19 = apply %18(%16, %0) : $@convention(method) (@owned String, @guaranteed WYStudent2) -> ()
  destroy_addr %2 : $*String                      // id: %20
  dealloc_stack %2 : $*String                     // id: %21
  unwind                                          // id: %22
} // end sil function 'main.WYStudent2.name.modify : Swift.String'

// WYStudent2.deinit
sil hidden @main.WYStudent2.deinit : $@convention(method) (@guaranteed WYStudent2) -> @owned Builtin.NativeObject {
// %0 "self"                                      // users: %6, %2, %1
bb0(%0 : $WYStudent2):
  debug_value %0 : $WYStudent2, let, name "self", argno 1, implicit // id: %1
  %2 = ref_element_addr %0 : $WYStudent2, #WYStudent2.name // user: %3
  %3 = begin_access [deinit] [static] %2 : $*String // users: %5, %4
  destroy_addr %3 : $*String                      // id: %4
  end_access %3 : $*String                        // id: %5
  %6 = unchecked_ref_cast %0 : $WYStudent2 to $Builtin.NativeObject // user: %7
  return %6 : $Builtin.NativeObject               // id: %7
} // end sil function 'main.WYStudent2.deinit'

// WYStudent2.__deallocating_deinit
sil hidden @main.WYStudent2.__deallocating_deinit : $@convention(method) (@owned WYStudent2) -> () {
// %0 "self"                                      // users: %3, %1
bb0(%0 : $WYStudent2):
  debug_value %0 : $WYStudent2, let, name "self", argno 1, implicit // id: %1
  // function_ref WYStudent2.deinit
  %2 = function_ref @main.WYStudent2.deinit : $@convention(method) (@guaranteed WYStudent2) -> @owned Builtin.NativeObject // user: %3
  %3 = apply %2(%0) : $@convention(method) (@guaranteed WYStudent2) -> @owned Builtin.NativeObject // user: %4
  %4 = unchecked_ref_cast %3 : $Builtin.NativeObject to $WYStudent2 // user: %5
  dealloc_ref %4 : $WYStudent2                    // id: %5
  %6 = tuple ()                                   // user: %7
  return %6 : $()                                 // id: %7
} // end sil function 'main.WYStudent2.__deallocating_deinit'

// WYStudent2.__allocating_init()
sil hidden [exact_self_class] @main.WYStudent2.__allocating_init() -> main.WYStudent2 : $@convention(method) (@thick WYStudent2.Type) -> @owned WYStudent2 {
// %0 "$metatype"
bb0(%0 : $@thick WYStudent2.Type):
  %1 = alloc_ref $WYStudent2                      // user: %3
  // function_ref WYStudent2.init()
  %2 = function_ref @main.WYStudent2.init() -> main.WYStudent2 : $@convention(method) (@owned WYStudent2) -> @owned WYStudent2 // user: %3
  %3 = apply %2(%1) : $@convention(method) (@owned WYStudent2) -> @owned WYStudent2 // user: %4
  return %3 : $WYStudent2                         // id: %4
} // end sil function 'main.WYStudent2.__allocating_init() -> main.WYStudent2'

// WYStudent2.init()
sil hidden @main.WYStudent2.init() -> main.WYStudent2 : $@convention(method) (@owned WYStudent2) -> @owned WYStudent2 {
// %0 "self"                                      // users: %2, %10, %1
bb0(%0 : $WYStudent2):
  debug_value %0 : $WYStudent2, let, name "self", argno 1, implicit // id: %1
  %2 = ref_element_addr %0 : $WYStudent2, #WYStudent2.name // user: %9
  %3 = string_literal utf8 "测试"                 // user: %8
  %4 = integer_literal $Builtin.Word, 6           // user: %8
  %5 = integer_literal $Builtin.Int1, 0           // user: %8
  %6 = metatype $@thin String.Type                // user: %8
  // function_ref String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)
  %7 = function_ref @Swift.String.init(_builtinStringLiteral: Builtin.RawPointer, utf8CodeUnitCount: Builtin.Word, isASCII: Builtin.Int1) -> Swift.String : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String // user: %8
  %8 = apply %7(%3, %4, %5, %6) : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String // user: %9
  store %8 to %2 : $*String                       // id: %9
  return %0 : $WYStudent2                         // id: %10
} // end sil function 'main.WYStudent2.init() -> main.WYStudent2'

//在getter方法中会给赋值
// WYStudent4.age.getter
sil hidden [lazy_getter] [noinline] @main.WYStudent4.age.getter : Swift.Int? : $@convention(method) (@guaranteed WYStudent4) -> Optional<Int> {
// %0 "self"                                      // users: %15, %2, %1
bb0(%0 : $WYStudent4):
  debug_value %0 : $WYStudent4, let, name "self", argno 1, implicit // id: %1
  %2 = ref_element_addr %0 : $WYStudent4, #WYStudent4.$__lazy_storage_$_age // user: %3
  %3 = begin_access [read] [dynamic] %2 : $*Optional<Optional<Int>> // users: %4, %5
  %4 = load %3 : $*Optional<Optional<Int>>        // user: %6
  end_access %3 : $*Optional<Optional<Int>>       // id: %5
  //如果已有值，那么走bb1,如果没值，走bb2
  switch_enum %4 : $Optional<Optional<Int>>, case #Optional.some!enumelt: bb1, case #Optional.none!enumelt: bb2 // id: %6

//bb1,走bb3，bb3直接退出
// %7                                             // users: %9, %8
bb1(%7 : $Optional<Int>):                         // Preds: bb0
  debug_value %7 : $Optional<Int>, let, name "tmp1", implicit // id: %8
  br bb3(%7 : $Optional<Int>)                     // id: %9

//没有值走bb2，此时需要给属性赋值
bb2:                                              // Preds: bb0
//获取到直接数19
  %10 = integer_literal $Builtin.Int64, 19        // user: %11
  //构建结构体
  %11 = struct $Int (%10 : $Builtin.Int64)        // user: %12
  //判断是否存在
  %12 = enum $Optional<Int>, #Optional.some!enumelt, %11 : $Int // users: %19, %14, %13
  debug_value %12 : $Optional<Int>, let, name "tmp2", implicit // id: %13
  //拿到最终的直接数
  %14 = enum $Optional<Optional<Int>>, #Optional.some!enumelt, %12 : $Optional<Int> // user: %17
  //获取属性地址
  %15 = ref_element_addr %0 : $WYStudent4, #WYStudent4.$__lazy_storage_$_age // user: %16
  %16 = begin_access [modify] [dynamic] %15 : $*Optional<Optional<Int>> // users: %17, %18
 //给属性赋值
  store %14 to %16 : $*Optional<Optional<Int>>    // id: %17
  end_access %16 : $*Optional<Optional<Int>>      // id: %18
  br bb3(%12 : $Optional<Int>)                    // id: %19

// %20                                            // user: %21
bb3(%20 : $Optional<Int>):                        // Preds: bb2 bb1
  return %20 : $Optional<Int>                     // id: %21
} // end sil function 'main.WYStudent4.age.getter : Swift.Int?'

// WYStudent4.age.setter
sil hidden @main.WYStudent4.age.setter : Swift.Int? : $@convention(method) (Optional<Int>, @guaranteed WYStudent4) -> () {
// %0 "value"                                     // users: %4, %2
// %1 "self"                                      // users: %5, %3
bb0(%0 : $Optional<Int>, %1 : $WYStudent4):
  debug_value %0 : $Optional<Int>, let, name "value", argno 1, implicit // id: %2
  debug_value %1 : $WYStudent4, let, name "self", argno 2, implicit // id: %3
  %4 = enum $Optional<Optional<Int>>, #Optional.some!enumelt, %0 : $Optional<Int> // user: %7
  %5 = ref_element_addr %1 : $WYStudent4, #WYStudent4.$__lazy_storage_$_age // user: %6
  %6 = begin_access [modify] [dynamic] %5 : $*Optional<Optional<Int>> // users: %7, %8
  store %4 to %6 : $*Optional<Optional<Int>>      // id: %7
  end_access %6 : $*Optional<Optional<Int>>       // id: %8
  %9 = tuple ()                                   // user: %10
  return %9 : $()                                 // id: %10
} // end sil function 'main.WYStudent4.age.setter : Swift.Int?'

// WYStudent4.age.modify
sil hidden [transparent] @main.WYStudent4.age.modify : Swift.Int? : $@yield_once @convention(method) (@guaranteed WYStudent4) -> @yields @inout Optional<Int> {
// %0 "self"                                      // users: %9, %15, %4, %1
bb0(%0 : $WYStudent4):
  debug_value %0 : $WYStudent4, let, name "self", argno 1, implicit // id: %1
  %2 = alloc_stack $Optional<Int>                 // users: %13, %7, %5, %10, %16, %6
  // function_ref WYStudent4.age.getter
  %3 = function_ref @main.WYStudent4.age.getter : Swift.Int? : $@convention(method) (@guaranteed WYStudent4) -> Optional<Int> // user: %4
  %4 = apply %3(%0) : $@convention(method) (@guaranteed WYStudent4) -> Optional<Int> // user: %5
  store %4 to %2 : $*Optional<Int>                // id: %5
  yield %2 : $*Optional<Int>, resume bb1, unwind bb2 // id: %6

bb1:                                              // Preds: bb0
  %7 = load %2 : $*Optional<Int>                  // user: %9
  // function_ref WYStudent4.age.setter
  %8 = function_ref @main.WYStudent4.age.setter : Swift.Int? : $@convention(method) (Optional<Int>, @guaranteed WYStudent4) -> () // user: %9
  %9 = apply %8(%7, %0) : $@convention(method) (Optional<Int>, @guaranteed WYStudent4) -> ()
  dealloc_stack %2 : $*Optional<Int>              // id: %10
  %11 = tuple ()                                  // user: %12
  return %11 : $()                                // id: %12

bb2:                                              // Preds: bb0
  %13 = load %2 : $*Optional<Int>                 // user: %15
  // function_ref WYStudent4.age.setter
  %14 = function_ref @main.WYStudent4.age.setter : Swift.Int? : $@convention(method) (Optional<Int>, @guaranteed WYStudent4) -> () // user: %15
  %15 = apply %14(%13, %0) : $@convention(method) (Optional<Int>, @guaranteed WYStudent4) -> ()
  dealloc_stack %2 : $*Optional<Int>              // id: %16
  unwind                                          // id: %17
} // end sil function 'main.WYStudent4.age.modify : Swift.Int?'

// variable initialization expression of WYStudent4.$__lazy_storage_$_age
sil hidden [transparent] @variable initialization expression of main.WYStudent4.($__lazy_storage_$_age in _12232F587A4C5CD8B1EEDF696793A4FC) : Swift.Int?? : $@convention(thin) () -> Optional<Optional<Int>> {
bb0:
  %0 = enum $Optional<Optional<Int>>, #Optional.none!enumelt // user: %1
  return %0 : $Optional<Optional<Int>>            // id: %1
} // end sil function 'variable initialization expression of main.WYStudent4.($__lazy_storage_$_age in _12232F587A4C5CD8B1EEDF696793A4FC) : Swift.Int??'

// WYStudent4.deinit
sil hidden @main.WYStudent4.deinit : $@convention(method) (@guaranteed WYStudent4) -> @owned Builtin.NativeObject {
// %0 "self"                                      // users: %2, %1
bb0(%0 : $WYStudent4):
  debug_value %0 : $WYStudent4, let, name "self", argno 1, implicit // id: %1
  %2 = unchecked_ref_cast %0 : $WYStudent4 to $Builtin.NativeObject // user: %3
  return %2 : $Builtin.NativeObject               // id: %3
} // end sil function 'main.WYStudent4.deinit'

// WYStudent4.__deallocating_deinit
sil hidden @main.WYStudent4.__deallocating_deinit : $@convention(method) (@owned WYStudent4) -> () {
// %0 "self"                                      // users: %3, %1
bb0(%0 : $WYStudent4):
  debug_value %0 : $WYStudent4, let, name "self", argno 1, implicit // id: %1
  // function_ref WYStudent4.deinit
  %2 = function_ref @main.WYStudent4.deinit : $@convention(method) (@guaranteed WYStudent4) -> @owned Builtin.NativeObject // user: %3
  %3 = apply %2(%0) : $@convention(method) (@guaranteed WYStudent4) -> @owned Builtin.NativeObject // user: %4
  %4 = unchecked_ref_cast %3 : $Builtin.NativeObject to $WYStudent4 // user: %5
  dealloc_ref %4 : $WYStudent4                    // id: %5
  %6 = tuple ()                                   // user: %7
  return %6 : $()                                 // id: %7
} // end sil function 'main.WYStudent4.__deallocating_deinit'

// WYStudent4.__allocating_init()
sil hidden [exact_self_class] @main.WYStudent4.__allocating_init() -> main.WYStudent4 : $@convention(method) (@thick WYStudent4.Type) -> @owned WYStudent4 {
// %0 "$metatype"
bb0(%0 : $@thick WYStudent4.Type):
  %1 = alloc_ref $WYStudent4                      // user: %3
  // function_ref WYStudent4.init()
  %2 = function_ref @main.WYStudent4.init() -> main.WYStudent4 : $@convention(method) (@owned WYStudent4) -> @owned WYStudent4 // user: %3
  %3 = apply %2(%1) : $@convention(method) (@owned WYStudent4) -> @owned WYStudent4 // user: %4
  return %3 : $WYStudent4                         // id: %4
} // end sil function 'main.WYStudent4.__allocating_init() -> main.WYStudent4'

// WYStudent4.init()
sil hidden @main.WYStudent4.init() -> main.WYStudent4 : $@convention(method) (@owned WYStudent4) -> @owned WYStudent4 {
// %0 "self"                                      // users: %2, %5, %1
bb0(%0 : $WYStudent4):
  debug_value %0 : $WYStudent4, let, name "self", argno 1, implicit // id: %1
  %2 = ref_element_addr %0 : $WYStudent4, #WYStudent4.$__lazy_storage_$_age // user: %4
  %3 = enum $Optional<Optional<Int>>, #Optional.none!enumelt // user: %4
  store %3 to %2 : $*Optional<Optional<Int>>      // id: %4
  return %0 : $WYStudent4                         // id: %5
} // end sil function 'main.WYStudent4.init() -> main.WYStudent4'

// _diagnoseUnexpectedNilOptional(_filenameStart:_filenameLength:_filenameIsASCII:_line:_isImplicitUnwrap:)
sil public_external [transparent] @Swift._diagnoseUnexpectedNilOptional(_filenameStart: Builtin.RawPointer, _filenameLength: Builtin.Word, _filenameIsASCII: Builtin.Int1, _line: Builtin.Word, _isImplicitUnwrap: Builtin.Int1) -> () : $@convention(thin) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, Builtin.Word, Builtin.Int1) -> () {
// %0                                             // users: %37, %11
// %1                                             // users: %43, %17
// %2                                             // users: %38, %12
// %3                                             // users: %44, %18
// %4                                             // user: %5
bb0(%0 : $Builtin.RawPointer, %1 : $Builtin.Word, %2 : $Builtin.Int1, %3 : $Builtin.Word, %4 : $Builtin.Int1):
  cond_br %4, bb8, bb1                            // id: %5

bb1:                                              // Preds: bb0
  %6 = string_literal utf8 "Unexpectedly found nil while unwrapping an Optional value" // user: %8
  %7 = integer_literal $Builtin.Word, 57          // user: %10
  %8 = builtin "ptrtoint_Word"(%6 : $Builtin.RawPointer) : $Builtin.Word // user: %10
  %9 = integer_literal $Builtin.Int8, 2           // users: %24, %15, %10
  %10 = struct $StaticString (%8 : $Builtin.Word, %7 : $Builtin.Word, %9 : $Builtin.Int8) // user: %30
  %11 = builtin "ptrtoint_Word"(%0 : $Builtin.RawPointer) : $Builtin.Word // user: %17
  cond_br %2, bb3, bb2                            // id: %12

bb2:                                              // Preds: bb1
  %13 = integer_literal $Builtin.Int8, 0          // user: %14
  br bb4(%13 : $Builtin.Int8)                     // id: %14

bb3:                                              // Preds: bb1
  br bb4(%9 : $Builtin.Int8)                      // id: %15

// %16                                            // user: %17
bb4(%16 : $Builtin.Int8):                         // Preds: bb3 bb2
  %17 = struct $StaticString (%11 : $Builtin.Word, %1 : $Builtin.Word, %16 : $Builtin.Int8) // user: %30
  %18 = builtin "zextOrBitCast_Word_Int64"(%3 : $Builtin.Word) : $Builtin.Int64 // user: %19
  %19 = struct $UInt (%18 : $Builtin.Int64)       // user: %30
  br bb5                                          // id: %20

bb5:                                              // Preds: bb4
  %21 = string_literal utf8 "Fatal error"         // user: %23
  %22 = integer_literal $Builtin.Word, 11         // user: %24
  %23 = builtin "ptrtoint_Word"(%21 : $Builtin.RawPointer) : $Builtin.Word // user: %24
  %24 = struct $StaticString (%23 : $Builtin.Word, %22 : $Builtin.Word, %9 : $Builtin.Int8) // user: %30
  br bb6                                          // id: %25

bb6:                                              // Preds: bb5
  %26 = integer_literal $Builtin.Int32, 1         // user: %27
  %27 = struct $UInt32 (%26 : $Builtin.Int32)     // user: %30
  br bb7                                          // id: %28

bb7:                                              // Preds: bb6
  // function_ref _assertionFailure(_:_:file:line:flags:)
  %29 = function_ref @Swift._assertionFailure(_: Swift.StaticString, _: Swift.StaticString, file: Swift.StaticString, line: Swift.UInt, flags: Swift.UInt32) -> Swift.Never : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %30
  %30 = apply %29(%24, %10, %17, %19, %27) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %31

bb8:                                              // Preds: bb0
  %32 = string_literal utf8 "Unexpectedly found nil while implicitly unwrapping an Optional value" // user: %34
  %33 = integer_literal $Builtin.Word, 68         // user: %36
  %34 = builtin "ptrtoint_Word"(%32 : $Builtin.RawPointer) : $Builtin.Word // user: %36
  %35 = integer_literal $Builtin.Int8, 2          // users: %50, %41, %36
  %36 = struct $StaticString (%34 : $Builtin.Word, %33 : $Builtin.Word, %35 : $Builtin.Int8) // user: %56
  %37 = builtin "ptrtoint_Word"(%0 : $Builtin.RawPointer) : $Builtin.Word // user: %43
  cond_br %2, bb10, bb9                           // id: %38

bb9:                                              // Preds: bb8
  %39 = integer_literal $Builtin.Int8, 0          // user: %40
  br bb11(%39 : $Builtin.Int8)                    // id: %40

bb10:                                             // Preds: bb8
  br bb11(%35 : $Builtin.Int8)                    // id: %41

// %42                                            // user: %43
bb11(%42 : $Builtin.Int8):                        // Preds: bb10 bb9
  %43 = struct $StaticString (%37 : $Builtin.Word, %1 : $Builtin.Word, %42 : $Builtin.Int8) // user: %56
  %44 = builtin "zextOrBitCast_Word_Int64"(%3 : $Builtin.Word) : $Builtin.Int64 // user: %45
  %45 = struct $UInt (%44 : $Builtin.Int64)       // user: %56
  br bb12                                         // id: %46

bb12:                                             // Preds: bb11
  %47 = string_literal utf8 "Fatal error"         // user: %49
  %48 = integer_literal $Builtin.Word, 11         // user: %50
  %49 = builtin "ptrtoint_Word"(%47 : $Builtin.RawPointer) : $Builtin.Word // user: %50
  %50 = struct $StaticString (%49 : $Builtin.Word, %48 : $Builtin.Word, %35 : $Builtin.Int8) // user: %56
  br bb13                                         // id: %51

bb13:                                             // Preds: bb12
  %52 = integer_literal $Builtin.Int32, 1         // user: %53
  %53 = struct $UInt32 (%52 : $Builtin.Int32)     // user: %56
  br bb14                                         // id: %54

bb14:                                             // Preds: bb13
  // function_ref _assertionFailure(_:_:file:line:flags:)
  %55 = function_ref @Swift._assertionFailure(_: Swift.StaticString, _: Swift.StaticString, file: Swift.StaticString, line: Swift.UInt, flags: Swift.UInt32) -> Swift.Never : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %56
  %56 = apply %55(%50, %36, %43, %45, %53) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %57
} // end sil function 'Swift._diagnoseUnexpectedNilOptional(_filenameStart: Builtin.RawPointer, _filenameLength: Builtin.Word, _filenameIsASCII: Builtin.Int1, _line: Builtin.Word, _isImplicitUnwrap: Builtin.Int1) -> ()'

// one-time initialization function for age
sil private [global_init_once_fn] @one-time initialization function for age : $@convention(c) () -> () {
bb0:
  alloc_global @static main.WYStudent5.age : Swift.Int     // id: %0
  %1 = global_addr @static main.WYStudent5.age : Swift.Int : $*Int // user: %4
  %2 = integer_literal $Builtin.Int64, 18         // user: %3
  %3 = struct $Int (%2 : $Builtin.Int64)          // user: %4
  store %3 to %1 : $*Int                          // id: %4
  %5 = tuple ()                                   // user: %6
  return %5 : $()                                 // id: %6
} // end sil function 'one-time initialization function for age'

// WYStudent5.age.unsafeMutableAddressor
sil hidden [global_init] @main.WYStudent5.age.unsafeMutableAddressor : Swift.Int : $@convention(thin) () -> Builtin.RawPointer {
bb0:
  %0 = global_addr @static main.WYStudent5.age : Swift.Int : $*Int // user: %1
  %1 = address_to_pointer %0 : $*Int to $Builtin.RawPointer // user: %2
  return %1 : $Builtin.RawPointer                 // id: %2
} // end sil function 'main.WYStudent5.age.unsafeMutableAddressor : Swift.Int'

// static WYStudent5.age.getter
sil hidden [transparent] @static main.WYStudent5.age.getter : Swift.Int : $@convention(method) (@thick WYStudent5.Type) -> Int {
// %0 "self"                                      // user: %1
bb0(%0 : $@thick WYStudent5.Type):
  debug_value %0 : $@thick WYStudent5.Type, let, name "self", argno 1, implicit // id: %1
  // function_ref WYStudent5.age.unsafeMutableAddressor
  %2 = function_ref @main.WYStudent5.age.unsafeMutableAddressor : Swift.Int : $@convention(thin) () -> Builtin.RawPointer // user: %3
  %3 = apply %2() : $@convention(thin) () -> Builtin.RawPointer // user: %4
  %4 = pointer_to_address %3 : $Builtin.RawPointer to [strict] $*Int // user: %5
  %5 = begin_access [read] [dynamic] %4 : $*Int   // users: %6, %7
  %6 = load %5 : $*Int                            // user: %8
  end_access %5 : $*Int                           // id: %7
  return %6 : $Int                                // id: %8
} // end sil function 'static main.WYStudent5.age.getter : Swift.Int'

// static WYStudent5.age.setter
sil hidden [transparent] @static main.WYStudent5.age.setter : Swift.Int : $@convention(method) (Int, @thick WYStudent5.Type) -> () {
// %0 "value"                                     // users: %8, %2
// %1 "self"                                      // user: %3
bb0(%0 : $Int, %1 : $@thick WYStudent5.Type):
  debug_value %0 : $Int, let, name "value", argno 1, implicit // id: %2
  debug_value %1 : $@thick WYStudent5.Type, let, name "self", argno 2, implicit // id: %3
  // function_ref WYStudent5.age.unsafeMutableAddressor
  %4 = function_ref @main.WYStudent5.age.unsafeMutableAddressor : Swift.Int : $@convention(thin) () -> Builtin.RawPointer // user: %5
  %5 = apply %4() : $@convention(thin) () -> Builtin.RawPointer // user: %6
  %6 = pointer_to_address %5 : $Builtin.RawPointer to [strict] $*Int // user: %7
  %7 = begin_access [modify] [dynamic] %6 : $*Int // users: %8, %9
  store %0 to %7 : $*Int                          // id: %8
  end_access %7 : $*Int                           // id: %9
  %10 = tuple ()                                  // user: %11
  return %10 : $()                                // id: %11
} // end sil function 'static main.WYStudent5.age.setter : Swift.Int'

// static WYStudent5.age.modify
sil hidden [transparent] @static main.WYStudent5.age.modify : Swift.Int : $@yield_once @convention(method) (@thick WYStudent5.Type) -> @yields @inout Int {
// %0 "self"                                      // user: %1
bb0(%0 : $@thick WYStudent5.Type):
  debug_value %0 : $@thick WYStudent5.Type, let, name "self", argno 1, implicit // id: %1
  // function_ref WYStudent5.age.unsafeMutableAddressor
  %2 = function_ref @main.WYStudent5.age.unsafeMutableAddressor : Swift.Int : $@convention(thin) () -> Builtin.RawPointer // user: %3
  %3 = apply %2() : $@convention(thin) () -> Builtin.RawPointer // user: %4
  %4 = pointer_to_address %3 : $Builtin.RawPointer to [strict] $*Int // user: %5
  %5 = begin_access [modify] [dynamic] %4 : $*Int // users: %7, %10, %6
  yield %5 : $*Int, resume bb1, unwind bb2        // id: %6

bb1:                                              // Preds: bb0
  end_access %5 : $*Int                           // id: %7
  %8 = tuple ()                                   // user: %9
  return %8 : $()                                 // id: %9

bb2:                                              // Preds: bb0
  end_access %5 : $*Int                           // id: %10
  unwind                                          // id: %11
} // end sil function 'static main.WYStudent5.age.modify : Swift.Int'

// WYStudent5.deinit
sil hidden @main.WYStudent5.deinit : $@convention(method) (@guaranteed WYStudent5) -> @owned Builtin.NativeObject {
// %0 "self"                                      // users: %2, %1
bb0(%0 : $WYStudent5):
  debug_value %0 : $WYStudent5, let, name "self", argno 1, implicit // id: %1
  %2 = unchecked_ref_cast %0 : $WYStudent5 to $Builtin.NativeObject // user: %3
  return %2 : $Builtin.NativeObject               // id: %3
} // end sil function 'main.WYStudent5.deinit'

// WYStudent5.__deallocating_deinit
sil hidden @main.WYStudent5.__deallocating_deinit : $@convention(method) (@owned WYStudent5) -> () {
// %0 "self"                                      // users: %3, %1
bb0(%0 : $WYStudent5):
  debug_value %0 : $WYStudent5, let, name "self", argno 1, implicit // id: %1
  // function_ref WYStudent5.deinit
  %2 = function_ref @main.WYStudent5.deinit : $@convention(method) (@guaranteed WYStudent5) -> @owned Builtin.NativeObject // user: %3
  %3 = apply %2(%0) : $@convention(method) (@guaranteed WYStudent5) -> @owned Builtin.NativeObject // user: %4
  %4 = unchecked_ref_cast %3 : $Builtin.NativeObject to $WYStudent5 // user: %5
  dealloc_ref %4 : $WYStudent5                    // id: %5
  %6 = tuple ()                                   // user: %7
  return %6 : $()                                 // id: %7
} // end sil function 'main.WYStudent5.__deallocating_deinit'

// WYStudent5.__allocating_init()
sil hidden [exact_self_class] @main.WYStudent5.__allocating_init() -> main.WYStudent5 : $@convention(method) (@thick WYStudent5.Type) -> @owned WYStudent5 {
// %0 "$metatype"
bb0(%0 : $@thick WYStudent5.Type):
  %1 = alloc_ref $WYStudent5                      // user: %3
  // function_ref WYStudent5.init()
  %2 = function_ref @main.WYStudent5.init() -> main.WYStudent5 : $@convention(method) (@owned WYStudent5) -> @owned WYStudent5 // user: %3
  %3 = apply %2(%1) : $@convention(method) (@owned WYStudent5) -> @owned WYStudent5 // user: %4
  return %3 : $WYStudent5                         // id: %4
} // end sil function 'main.WYStudent5.__allocating_init() -> main.WYStudent5'

// WYStudent5.init()
sil hidden @main.WYStudent5.init() -> main.WYStudent5 : $@convention(method) (@owned WYStudent5) -> @owned WYStudent5 {
// %0 "self"                                      // users: %2, %1
bb0(%0 : $WYStudent5):
  debug_value %0 : $WYStudent5, let, name "self", argno 1, implicit // id: %1
  return %0 : $WYStudent5                         // id: %2
} // end sil function 'main.WYStudent5.init() -> main.WYStudent5'

// one-time initialization function for shareInstance
sil private [global_init_once_fn] @one-time initialization function for shareInstance : $@convention(c) () -> () {
bb0:
  alloc_global @static main.WYStudent6.shareInstance : main.WYStudent6 // id: %0
  %1 = global_addr @static main.WYStudent6.shareInstance : main.WYStudent6 : $*WYStudent6 // user: %5
  %2 = metatype $@thick WYStudent6.Type           // user: %4
  // function_ref WYStudent6.__allocating_init()
  %3 = function_ref @main.WYStudent6.__allocating_init() -> main.WYStudent6 : $@convention(method) (@thick WYStudent6.Type) -> @owned WYStudent6 // user: %4
  %4 = apply %3(%2) : $@convention(method) (@thick WYStudent6.Type) -> @owned WYStudent6 // user: %5
  store %4 to %1 : $*WYStudent6                   // id: %5
  %6 = tuple ()                                   // user: %7
  return %6 : $()                                 // id: %7
} // end sil function 'one-time initialization function for shareInstance'

// WYStudent6.__allocating_init()
sil private [exact_self_class] @main.WYStudent6.__allocating_init() -> main.WYStudent6 : $@convention(method) (@thick WYStudent6.Type) -> @owned WYStudent6 {
// %0 "$metatype"
bb0(%0 : $@thick WYStudent6.Type):
  %1 = alloc_ref $WYStudent6                      // user: %3
  // function_ref WYStudent6.().init()
  %2 = function_ref @main.WYStudent6.() -> main.WYStudent6(in _12232F587A4C5CD8B1EEDF696793A4FC).init() -> main.WYStudent6 : $@convention(method) (@owned WYStudent6) -> @owned WYStudent6 // user: %3
  %3 = apply %2(%1) : $@convention(method) (@owned WYStudent6) -> @owned WYStudent6 // user: %4
  return %3 : $WYStudent6                         // id: %4
} // end sil function 'main.WYStudent6.__allocating_init() -> main.WYStudent6'

// WYStudent6.shareInstance.unsafeMutableAddressor
sil hidden [global_init] @main.WYStudent6.shareInstance.unsafeMutableAddressor : main.WYStudent6 : $@convention(thin) () -> Builtin.RawPointer {
bb0:
  %0 = global_addr @one-time initialization token for shareInstance : $*Builtin.Word // user: %1
  %1 = address_to_pointer %0 : $*Builtin.Word to $Builtin.RawPointer // user: %3
  // function_ref one-time initialization function for shareInstance
  %2 = function_ref @one-time initialization function for shareInstance : $@convention(c) () -> () // user: %3
  %3 = builtin "once"(%1 : $Builtin.RawPointer, %2 : $@convention(c) () -> ()) : $()
  %4 = global_addr @static main.WYStudent6.shareInstance : main.WYStudent6 : $*WYStudent6 // user: %5
  %5 = address_to_pointer %4 : $*WYStudent6 to $Builtin.RawPointer // user: %6
  return %5 : $Builtin.RawPointer                 // id: %6
} // end sil function 'main.WYStudent6.shareInstance.unsafeMutableAddressor : main.WYStudent6'

// static WYStudent6.shareInstance.getter
sil hidden [transparent] @static main.WYStudent6.shareInstance.getter : main.WYStudent6 : $@convention(method) (@thick WYStudent6.Type) -> @owned WYStudent6 {
// %0 "self"                                      // user: %1
bb0(%0 : $@thick WYStudent6.Type):
  debug_value %0 : $@thick WYStudent6.Type, let, name "self", argno 1, implicit // id: %1
  // function_ref WYStudent6.shareInstance.unsafeMutableAddressor
  %2 = function_ref @main.WYStudent6.shareInstance.unsafeMutableAddressor : main.WYStudent6 : $@convention(thin) () -> Builtin.RawPointer // user: %3
  %3 = apply %2() : $@convention(thin) () -> Builtin.RawPointer // user: %4
  %4 = pointer_to_address %3 : $Builtin.RawPointer to [strict] $*WYStudent6 // user: %5
  %5 = load %4 : $*WYStudent6                     // users: %7, %6
  strong_retain %5 : $WYStudent6                  // id: %6
  return %5 : $WYStudent6                         // id: %7
} // end sil function 'static main.WYStudent6.shareInstance.getter : main.WYStudent6'

// WYStudent6.().init()
sil private @main.WYStudent6.() -> main.WYStudent6(in _12232F587A4C5CD8B1EEDF696793A4FC).init() -> main.WYStudent6 : $@convention(method) (@owned WYStudent6) -> @owned WYStudent6 {
// %0 "self"                                      // users: %2, %1
bb0(%0 : $WYStudent6):
  debug_value %0 : $WYStudent6, let, name "self", argno 1, implicit // id: %1
  return %0 : $WYStudent6                         // id: %2
} // end sil function 'main.WYStudent6.() -> main.WYStudent6(in _12232F587A4C5CD8B1EEDF696793A4FC).init() -> main.WYStudent6'

// WYStudent6.deinit
sil hidden @main.WYStudent6.deinit : $@convention(method) (@guaranteed WYStudent6) -> @owned Builtin.NativeObject {
// %0 "self"                                      // users: %2, %1
bb0(%0 : $WYStudent6):
  debug_value %0 : $WYStudent6, let, name "self", argno 1, implicit // id: %1
  %2 = unchecked_ref_cast %0 : $WYStudent6 to $Builtin.NativeObject // user: %3
  return %2 : $Builtin.NativeObject               // id: %3
} // end sil function 'main.WYStudent6.deinit'

// WYStudent6.__deallocating_deinit
sil hidden @main.WYStudent6.__deallocating_deinit : $@convention(method) (@owned WYStudent6) -> () {
// %0 "self"                                      // users: %3, %1
bb0(%0 : $WYStudent6):
  debug_value %0 : $WYStudent6, let, name "self", argno 1, implicit // id: %1
  // function_ref WYStudent6.deinit
  %2 = function_ref @main.WYStudent6.deinit : $@convention(method) (@guaranteed WYStudent6) -> @owned Builtin.NativeObject // user: %3
  %3 = apply %2(%0) : $@convention(method) (@guaranteed WYStudent6) -> @owned Builtin.NativeObject // user: %4
  %4 = unchecked_ref_cast %3 : $Builtin.NativeObject to $WYStudent6 // user: %5
  dealloc_ref %4 : $WYStudent6                    // id: %5
  %6 = tuple ()                                   // user: %7
  return %6 : $()                                 // id: %7
} // end sil function 'main.WYStudent6.__deallocating_deinit'

// _assertionFailure(_:_:file:line:flags:)
sil [noinline] [_semantics "programtermination_point"] @Swift._assertionFailure(_: Swift.StaticString, _: Swift.StaticString, file: Swift.StaticString, line: Swift.UInt, flags: Swift.UInt32) -> Swift.Never : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never

// Array._endMutation()
sil shared_external [_semantics "array.end_mutation"] @Swift.Array._endMutation() -> () : $@convention(method) <Element> (@inout Array<Element>) -> () {
// %0                                             // users: %9, %1
bb0(%0 : $*Array<Element>):
  %1 = struct_element_addr %0 : $*Array<Element>, #Array._buffer // user: %2
  %2 = struct_element_addr %1 : $*_ArrayBuffer<Element>, #_ArrayBuffer._storage // user: %3
  %3 = struct_element_addr %2 : $*_BridgeStorage<__ContiguousArrayStorageBase>, #_BridgeStorage.rawValue // user: %4
  %4 = load %3 : $*Builtin.BridgeObject           // user: %5
  %5 = end_cow_mutation %4 : $Builtin.BridgeObject // user: %6
  %6 = struct $_BridgeStorage<__ContiguousArrayStorageBase> (%5 : $Builtin.BridgeObject) // user: %7
  %7 = struct $_ArrayBuffer<Element> (%6 : $_BridgeStorage<__ContiguousArrayStorageBase>) // user: %8
  %8 = struct $Array<Element> (%7 : $_ArrayBuffer<Element>) // user: %9
  store %8 to %0 : $*Array<Element>               // id: %9
  %10 = tuple ()                                  // user: %11
  return %10 : $()                                // id: %11
} // end sil function 'Swift.Array._endMutation() -> ()'

sil_vtable WYStudent {
  #WYStudent.age!getter: (WYStudent) -> () -> Int : @main.WYStudent.age.getter : Swift.Int	// WYStudent.age.getter
  #WYStudent.age!setter: (WYStudent) -> (Int) -> () : @main.WYStudent.age.setter : Swift.Int	// WYStudent.age.setter
  #WYStudent.age!modify: (WYStudent) -> () -> () : @main.WYStudent.age.modify : Swift.Int	// WYStudent.age.modify
  #WYStudent.name!getter: (WYStudent) -> () -> String : @main.WYStudent.name.getter : Swift.String	// WYStudent.name.getter
  #WYStudent.name!setter: (WYStudent) -> (String) -> () : @main.WYStudent.name.setter : Swift.String	// WYStudent.name.setter
  #WYStudent.name!modify: (WYStudent) -> () -> () : @main.WYStudent.name.modify : Swift.String	// WYStudent.name.modify
  #WYStudent.init!allocator: (WYStudent.Type) -> () -> WYStudent : @main.WYStudent.__allocating_init() -> main.WYStudent	// WYStudent.__allocating_init()
  #WYStudent.deinit!deallocator: @main.WYStudent.__deallocating_deinit	// WYStudent.__deallocating_deinit
}

sil_vtable Square {
  #Square.width!getter: (Square) -> () -> Double : @main.Square.width.getter : Swift.Double	// Square.width.getter
  #Square.width!setter: (Square) -> (Double) -> () : @main.Square.width.setter : Swift.Double	// Square.width.setter
  #Square.width!modify: (Square) -> () -> () : @main.Square.width.modify : Swift.Double	// Square.width.modify
  #Square.area!getter: (Square) -> () -> Double : @main.Square.area.getter : Swift.Double	// Square.area.getter
  #Square.area!setter: (Square) -> (Double) -> () : @main.Square.area.setter : Swift.Double	// Square.area.setter
  #Square.area!modify: (Square) -> () -> () : @main.Square.area.modify : Swift.Double	// Square.area.modify
  #Square.init!allocator: (Square.Type) -> () -> Square : @main.Square.__allocating_init() -> main.Square	// Square.__allocating_init()
  #Square.deinit!deallocator: @main.Square.__deallocating_deinit	// Square.__deallocating_deinit
}

sil_vtable WYStudent2 {
  #WYStudent2.name!getter: (WYStudent2) -> () -> String : @main.WYStudent2.name.getter : Swift.String	// WYStudent2.name.getter
  #WYStudent2.name!setter: (WYStudent2) -> (String) -> () : @main.WYStudent2.name.setter : Swift.String	// WYStudent2.name.setter
  #WYStudent2.name!modify: (WYStudent2) -> () -> () : @main.WYStudent2.name.modify : Swift.String	// WYStudent2.name.modify
  #WYStudent2.init!allocator: (WYStudent2.Type) -> () -> WYStudent2 : @main.WYStudent2.__allocating_init() -> main.WYStudent2	// WYStudent2.__allocating_init()
  #WYStudent2.deinit!deallocator: @main.WYStudent2.__deallocating_deinit	// WYStudent2.__deallocating_deinit
}

sil_vtable WYStudent4 {
  #WYStudent4.age!getter: (WYStudent4) -> () -> Int? : @main.WYStudent4.age.getter : Swift.Int?	// WYStudent4.age.getter
  #WYStudent4.age!setter: (WYStudent4) -> (Int?) -> () : @main.WYStudent4.age.setter : Swift.Int?	// WYStudent4.age.setter
  #WYStudent4.age!modify: (WYStudent4) -> () -> () : @main.WYStudent4.age.modify : Swift.Int?	// WYStudent4.age.modify
  #WYStudent4.init!allocator: (WYStudent4.Type) -> () -> WYStudent4 : @main.WYStudent4.__allocating_init() -> main.WYStudent4	// WYStudent4.__allocating_init()
  #WYStudent4.deinit!deallocator: @main.WYStudent4.__deallocating_deinit	// WYStudent4.__deallocating_deinit
}

sil_vtable WYStudent5 {
  #WYStudent5.init!allocator: (WYStudent5.Type) -> () -> WYStudent5 : @main.WYStudent5.__allocating_init() -> main.WYStudent5	// WYStudent5.__allocating_init()
  #WYStudent5.deinit!deallocator: @main.WYStudent5.__deallocating_deinit	// WYStudent5.__deallocating_deinit
}

sil_vtable WYStudent6 {
  #WYStudent6.init!allocator: (WYStudent6.Type) -> () -> WYStudent6 : @main.WYStudent6.__allocating_init() -> main.WYStudent6	// WYStudent6.__allocating_init()
  #WYStudent6.deinit!deallocator: @main.WYStudent6.__deallocating_deinit	// WYStudent6.__deallocating_deinit
}



// Mappings from '#fileID' to '#filePath':
//   'main/main.swift' => 'main.swift'


sil_stage canonical

import Builtin
import Swift
import SwiftShims

import Foundation

class WYStudent {
  @_hasStorage @_hasInitialValue var age: Int { get set }
  @_hasStorage @_hasInitialValue var name: String { get set }
  @objc deinit
  init()
}

@_hasStorage @_hasInitialValue let t: WYStudent { get }

class Square {
  @_hasStorage @_hasInitialValue var width: Double { get set }
  var area: Double { get set }
  @objc deinit
  init()
}

class WYStudent2 {
  @_hasStorage @_hasInitialValue var name: String { get set }
  @objc deinit
  init()
}

@_hasStorage @_hasInitialValue var stu2: WYStudent2 { get set }

class WYStudent4 {
  lazy var age: Int? { get set }
  @_hasStorage @_hasInitialValue final var $__lazy_storage_$_age: Int?? { get set }
  @objc deinit
  init()
}

@_hasStorage @_hasInitialValue var stu4: WYStudent4 { get set }

class WYStudent5 {
  @_hasStorage @_hasInitialValue static var age: Int { get set }
  @objc deinit
  init()
}

@_hasStorage @_hasInitialValue var age: Int { get set }

class WYStudent6 {
  @_hasStorage @_hasInitialValue static let shareInstance: WYStudent6 { get }
  private init()
  @objc deinit
}

@_hasStorage @_hasInitialValue var stu6: WYStudent6 { get set }

// t
sil_global hidden [let] @main.t : main.WYStudent : $WYStudent

// stu2
sil_global hidden @main.stu2 : main.WYStudent2 : $WYStudent2

// stu4
sil_global hidden @main.stu4 : main.WYStudent4 : $WYStudent4

// one-time initialization token for age
sil_global private @one-time initialization token for age : $Builtin.Word

// static WYStudent5.age
sil_global hidden @static main.WYStudent5.age : Swift.Int : $Int = {
  %0 = integer_literal $Builtin.Int64, 18         // user: %1
  %initval = struct $Int (%0 : $Builtin.Int64)
}


// age
sil_global hidden @main.age : Swift.Int : $Int

// one-time initialization token for shareInstance
sil_global private @one-time initialization token for shareInstance : $Builtin.Word

// static WYStudent6.shareInstance
sil_global hidden [let] @static main.WYStudent6.shareInstance : main.WYStudent6 : $WYStudent6

// stu6
sil_global hidden @main.stu6 : main.WYStudent6 : $WYStudent6

// main
sil @main : $@convention(c) (Int32, UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>) -> Int32 {
bb0(%0 : $Int32, %1 : $UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>):
  %2 = integer_literal $Builtin.Word, 1           // user: %4
  // function_ref _allocateUninitializedArray<A>(_:)
  %3 = function_ref @Swift._allocateUninitializedArray<A>(Builtin.Word) -> ([A], Builtin.RawPointer) : $@convention(thin) <τ_0_0> (Builtin.Word) -> (@owned Array<τ_0_0>, Builtin.RawPointer) // user: %4
  %4 = apply %3<Any>(%2) : $@convention(thin) <τ_0_0> (Builtin.Word) -> (@owned Array<τ_0_0>, Builtin.RawPointer) // users: %6, %5
  %5 = tuple_extract %4 : $(Array<Any>, Builtin.RawPointer), 0 // user: %17
  %6 = tuple_extract %4 : $(Array<Any>, Builtin.RawPointer), 1 // user: %7
  %7 = pointer_to_address %6 : $Builtin.RawPointer to [strict] $*Any // user: %14
  %8 = string_literal utf8 "Hello, World!"        // user: %13
  %9 = integer_literal $Builtin.Word, 13          // user: %13
  %10 = integer_literal $Builtin.Int1, -1         // user: %13
  %11 = metatype $@thin String.Type               // user: %13
  // function_ref String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)
  %12 = function_ref @Swift.String.init(_builtinStringLiteral: Builtin.RawPointer, utf8CodeUnitCount: Builtin.Word, isASCII: Builtin.Int1) -> Swift.String : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String // user: %13
  %13 = apply %12(%8, %9, %10, %11) : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String // user: %15
  %14 = init_existential_addr %7 : $*Any, $String // user: %15
  store %13 to %14 : $*String                     // id: %15
  // function_ref _finalizeUninitializedArray<A>(_:)
  %16 = function_ref @Swift._finalizeUninitializedArray<A>(__owned [A]) -> [A] : $@convention(thin) <τ_0_0> (@owned Array<τ_0_0>) -> @owned Array<τ_0_0> // user: %17
  %17 = apply %16<Any>(%5) : $@convention(thin) <τ_0_0> (@owned Array<τ_0_0>) -> @owned Array<τ_0_0> // users: %26, %23
  // function_ref default argument 1 of print(_:separator:terminator:)
  %18 = function_ref @default argument 1 of Swift.print(_: Any..., separator: Swift.String, terminator: Swift.String) -> () : $@convention(thin) () -> @owned String // user: %19
  %19 = apply %18() : $@convention(thin) () -> @owned String // users: %25, %23
  // function_ref default argument 2 of print(_:separator:terminator:)
  %20 = function_ref @default argument 2 of Swift.print(_: Any..., separator: Swift.String, terminator: Swift.String) -> () : $@convention(thin) () -> @owned String // user: %21
  %21 = apply %20() : $@convention(thin) () -> @owned String // users: %24, %23
  // function_ref print(_:separator:terminator:)
  %22 = function_ref @Swift.print(_: Any..., separator: Swift.String, terminator: Swift.String) -> () : $@convention(thin) (@guaranteed Array<Any>, @guaranteed String, @guaranteed String) -> () // user: %23
  %23 = apply %22(%17, %19, %21) : $@convention(thin) (@guaranteed Array<Any>, @guaranteed String, @guaranteed String) -> ()
  release_value %21 : $String                     // id: %24
  release_value %19 : $String                     // id: %25
  release_value %17 : $Array<Any>                 // id: %26
  alloc_global @main.t : main.WYStudent          // id: %27
  %28 = global_addr @main.t : main.WYStudent : $*WYStudent // user: %32
  %29 = metatype $@thick WYStudent.Type           // user: %31
  // function_ref WYStudent.__allocating_init()
  %30 = function_ref @main.WYStudent.__allocating_init() -> main.WYStudent : $@convention(method) (@thick WYStudent.Type) -> @owned WYStudent // user: %31
  %31 = apply %30(%29) : $@convention(method) (@thick WYStudent.Type) -> @owned WYStudent // user: %32
  store %31 to %28 : $*WYStudent                  // id: %32
  %33 = integer_literal $Builtin.Word, 1          // user: %35
  // function_ref _allocateUninitializedArray<A>(_:)
  %34 = function_ref @Swift._allocateUninitializedArray<A>(Builtin.Word) -> ([A], Builtin.RawPointer) : $@convention(thin) <τ_0_0> (Builtin.Word) -> (@owned Array<τ_0_0>, Builtin.RawPointer) // user: %35
  %35 = apply %34<Any>(%33) : $@convention(thin) <τ_0_0> (Builtin.Word) -> (@owned Array<τ_0_0>, Builtin.RawPointer) // users: %37, %36
  %36 = tuple_extract %35 : $(Array<Any>, Builtin.RawPointer), 0 // user: %48
  %37 = tuple_extract %35 : $(Array<Any>, Builtin.RawPointer), 1 // user: %38
  %38 = pointer_to_address %37 : $Builtin.RawPointer to [strict] $*Any // user: %45
  %39 = string_literal utf8 "end"                 // user: %44
  %40 = integer_literal $Builtin.Word, 3          // user: %44
  %41 = integer_literal $Builtin.Int1, -1         // user: %44
  %42 = metatype $@thin String.Type               // user: %44
  // function_ref String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)
  %43 = function_ref @Swift.String.init(_builtinStringLiteral: Builtin.RawPointer, utf8CodeUnitCount: Builtin.Word, isASCII: Builtin.Int1) -> Swift.String : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String // user: %44
  %44 = apply %43(%39, %40, %41, %42) : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String // user: %46
  %45 = init_existential_addr %38 : $*Any, $String // user: %46
  store %44 to %45 : $*String                     // id: %46
  // function_ref _finalizeUninitializedArray<A>(_:)
  %47 = function_ref @Swift._finalizeUninitializedArray<A>(__owned [A]) -> [A] : $@convention(thin) <τ_0_0> (@owned Array<τ_0_0>) -> @owned Array<τ_0_0> // user: %48
  %48 = apply %47<Any>(%36) : $@convention(thin) <τ_0_0> (@owned Array<τ_0_0>) -> @owned Array<τ_0_0> // users: %57, %54
  // function_ref default argument 1 of print(_:separator:terminator:)
  %49 = function_ref @default argument 1 of Swift.print(_: Any..., separator: Swift.String, terminator: Swift.String) -> () : $@convention(thin) () -> @owned String // user: %50
  %50 = apply %49() : $@convention(thin) () -> @owned String // users: %56, %54
  // function_ref default argument 2 of print(_:separator:terminator:)
  %51 = function_ref @default argument 2 of Swift.print(_: Any..., separator: Swift.String, terminator: Swift.String) -> () : $@convention(thin) () -> @owned String // user: %52
  %52 = apply %51() : $@convention(thin) () -> @owned String // users: %55, %54
  // function_ref print(_:separator:terminator:)
  %53 = function_ref @Swift.print(_: Any..., separator: Swift.String, terminator: Swift.String) -> () : $@convention(thin) (@guaranteed Array<Any>, @guaranteed String, @guaranteed String) -> () // user: %54
  %54 = apply %53(%48, %50, %52) : $@convention(thin) (@guaranteed Array<Any>, @guaranteed String, @guaranteed String) -> ()
  release_value %52 : $String                     // id: %55
  release_value %50 : $String                     // id: %56
  release_value %48 : $Array<Any>                 // id: %57
  %58 = integer_literal $Builtin.Word, 1          // user: %60
  // function_ref _allocateUninitializedArray<A>(_:)
  %59 = function_ref @Swift._allocateUninitializedArray<A>(Builtin.Word) -> ([A], Builtin.RawPointer) : $@convention(thin) <τ_0_0> (Builtin.Word) -> (@owned Array<τ_0_0>, Builtin.RawPointer) // user: %60
  %60 = apply %59<Any>(%58) : $@convention(thin) <τ_0_0> (Builtin.Word) -> (@owned Array<τ_0_0>, Builtin.RawPointer) // users: %62, %61
  %61 = tuple_extract %60 : $(Array<Any>, Builtin.RawPointer), 0 // user: %73
  %62 = tuple_extract %60 : $(Array<Any>, Builtin.RawPointer), 1 // user: %63
  %63 = pointer_to_address %62 : $Builtin.RawPointer to [strict] $*Any // user: %70
  %64 = metatype $@thick Square.Type              // user: %65
  %65 = init_existential_metatype %64 : $@thick Square.Type, $@thick AnyObject.Type // user: %66
  %66 = thick_to_objc_metatype %65 : $@thick AnyObject.Type to $@objc_metatype AnyObject.Type // user: %67
  %67 = enum $Optional<@objc_metatype AnyObject.Type>, #Optional.some!enumelt, %66 : $@objc_metatype AnyObject.Type // user: %69
  // function_ref class_getInstanceSize
  %68 = function_ref @class_getInstanceSize : $@convention(c) (Optional<@objc_metatype AnyObject.Type>) -> Int // user: %69
  %69 = apply %68(%67) : $@convention(c) (Optional<@objc_metatype AnyObject.Type>) -> Int // user: %71
  %70 = init_existential_addr %63 : $*Any, $Int   // user: %71
  store %69 to %70 : $*Int                        // id: %71
  // function_ref _finalizeUninitializedArray<A>(_:)
  %72 = function_ref @Swift._finalizeUninitializedArray<A>(__owned [A]) -> [A] : $@convention(thin) <τ_0_0> (@owned Array<τ_0_0>) -> @owned Array<τ_0_0> // user: %73
  %73 = apply %72<Any>(%61) : $@convention(thin) <τ_0_0> (@owned Array<τ_0_0>) -> @owned Array<τ_0_0> // users: %82, %79
  // function_ref default argument 1 of print(_:separator:terminator:)
  %74 = function_ref @default argument 1 of Swift.print(_: Any..., separator: Swift.String, terminator: Swift.String) -> () : $@convention(thin) () -> @owned String // user: %75
  %75 = apply %74() : $@convention(thin) () -> @owned String // users: %81, %79
  // function_ref default argument 2 of print(_:separator:terminator:)
  %76 = function_ref @default argument 2 of Swift.print(_: Any..., separator: Swift.String, terminator: Swift.String) -> () : $@convention(thin) () -> @owned String // user: %77
  %77 = apply %76() : $@convention(thin) () -> @owned String // users: %80, %79
  // function_ref print(_:separator:terminator:)
  %78 = function_ref @Swift.print(_: Any..., separator: Swift.String, terminator: Swift.String) -> () : $@convention(thin) (@guaranteed Array<Any>, @guaranteed String, @guaranteed String) -> () // user: %79
  %79 = apply %78(%73, %75, %77) : $@convention(thin) (@guaranteed Array<Any>, @guaranteed String, @guaranteed String) -> ()
  release_value %77 : $String                     // id: %80
  release_value %75 : $String                     // id: %81
  release_value %73 : $Array<Any>                 // id: %82
  alloc_global @main.stu2 : main.WYStudent2     // id: %83
  %84 = global_addr @main.stu2 : main.WYStudent2 : $*WYStudent2 // users: %88, %89
  %85 = metatype $@thick WYStudent2.Type          // user: %87
  // function_ref WYStudent2.__allocating_init()
  %86 = function_ref @main.WYStudent2.__allocating_init() -> main.WYStudent2 : $@convention(method) (@thick WYStudent2.Type) -> @owned WYStudent2 // user: %87
  %87 = apply %86(%85) : $@convention(method) (@thick WYStudent2.Type) -> @owned WYStudent2 // user: %88
  store %87 to %84 : $*WYStudent2                 // id: %88
  %89 = begin_access [read] [dynamic] %84 : $*WYStudent2 // users: %90, %92
  %90 = load %89 : $*WYStudent2                   // users: %101, %99, %100, %91
  strong_retain %90 : $WYStudent2                 // id: %91
  end_access %89 : $*WYStudent2                   // id: %92
  %93 = string_literal utf8 "wy"                  // user: %98
  %94 = integer_literal $Builtin.Word, 2          // user: %98
  %95 = integer_literal $Builtin.Int1, -1         // user: %98
  %96 = metatype $@thin String.Type               // user: %98
  // function_ref String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)
  %97 = function_ref @Swift.String.init(_builtinStringLiteral: Builtin.RawPointer, utf8CodeUnitCount: Builtin.Word, isASCII: Builtin.Int1) -> Swift.String : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String // user: %98
  %98 = apply %97(%93, %94, %95, %96) : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String // user: %100
  %99 = class_method %90 : $WYStudent2, #WYStudent2.name!setter : (WYStudent2) -> (String) -> (), $@convention(method) (@owned String, @guaranteed WYStudent2) -> () // user: %100
  %100 = apply %99(%98, %90) : $@convention(method) (@owned String, @guaranteed WYStudent2) -> ()
  strong_release %90 : $WYStudent2                // id: %101
  alloc_global @main.stu4 : main.WYStudent4     // id: %102
  %103 = global_addr @main.stu4 : main.WYStudent4 : $*WYStudent4 // users: %107, %114
  %104 = metatype $@thick WYStudent4.Type         // user: %106
  // function_ref WYStudent4.__allocating_init()
  %105 = function_ref @main.WYStudent4.__allocating_init() -> main.WYStudent4 : $@convention(method) (@thick WYStudent4.Type) -> @owned WYStudent4 // user: %106
  %106 = apply %105(%104) : $@convention(method) (@thick WYStudent4.Type) -> @owned WYStudent4 // user: %107
  store %106 to %103 : $*WYStudent4               // id: %107
  %108 = integer_literal $Builtin.Word, 1         // user: %110
  // function_ref _allocateUninitializedArray<A>(_:)
  %109 = function_ref @Swift._allocateUninitializedArray<A>(Builtin.Word) -> ([A], Builtin.RawPointer) : $@convention(thin) <τ_0_0> (Builtin.Word) -> (@owned Array<τ_0_0>, Builtin.RawPointer) // user: %110
  %110 = apply %109<Any>(%108) : $@convention(thin) <τ_0_0> (Builtin.Word) -> (@owned Array<τ_0_0>, Builtin.RawPointer) // users: %112, %111
  %111 = tuple_extract %110 : $(Array<Any>, Builtin.RawPointer), 0 // user: %153
  %112 = tuple_extract %110 : $(Array<Any>, Builtin.RawPointer), 1 // user: %113
  %113 = pointer_to_address %112 : $Builtin.RawPointer to [strict] $*Any // user: %150
  %114 = begin_access [read] [dynamic] %103 : $*WYStudent4 // users: %115, %117
  %115 = load %114 : $*WYStudent4                 // users: %120, %119, %118, %116
  strong_retain %115 : $WYStudent4                // id: %116
  end_access %114 : $*WYStudent4                  // id: %117
  %118 = class_method %115 : $WYStudent4, #WYStudent4.age!getter : (WYStudent4) -> () -> Int?, $@convention(method) (@guaranteed WYStudent4) -> Optional<Int> // user: %119
  %119 = apply %118(%115) : $@convention(method) (@guaranteed WYStudent4) -> Optional<Int> // user: %121
  strong_release %115 : $WYStudent4               // id: %120
  switch_enum %119 : $Optional<Int>, case #Optional.some!enumelt: bb8, case #Optional.none!enumelt: bb1 // id: %121

bb1:                                              // Preds: bb0
  %122 = string_literal utf8 "main/main.swift"    // user: %131
  %123 = integer_literal $Builtin.Word, 15        // user: %134
  %124 = integer_literal $Builtin.Word, 15
  br bb2                                          // id: %125

bb2:                                              // Preds: bb1
  %126 = string_literal utf8 "Unexpectedly found nil while unwrapping an Optional value" // user: %128
  %127 = integer_literal $Builtin.Word, 57        // user: %130
  %128 = builtin "ptrtoint_Word"(%126 : $Builtin.RawPointer) : $Builtin.Word // user: %130
  %129 = integer_literal $Builtin.Int8, 2         // users: %134, %141, %130
  %130 = struct $StaticString (%128 : $Builtin.Word, %127 : $Builtin.Word, %129 : $Builtin.Int8) // user: %147
  %131 = builtin "ptrtoint_Word"(%122 : $Builtin.RawPointer) : $Builtin.Word // user: %134
  br bb3                                          // id: %132

bb3:                                              // Preds: bb2
  br bb4                                          // id: %133

bb4:                                              // Preds: bb3
  %134 = struct $StaticString (%131 : $Builtin.Word, %123 : $Builtin.Word, %129 : $Builtin.Int8) // user: %147
  %135 = integer_literal $Builtin.Int64, 73       // user: %136
  %136 = struct $UInt (%135 : $Builtin.Int64)     // user: %147
  br bb5                                          // id: %137

bb5:                                              // Preds: bb4
  %138 = string_literal utf8 "Fatal error"        // user: %140
  %139 = integer_literal $Builtin.Word, 11        // user: %141
  %140 = builtin "ptrtoint_Word"(%138 : $Builtin.RawPointer) : $Builtin.Word // user: %141
  %141 = struct $StaticString (%140 : $Builtin.Word, %139 : $Builtin.Word, %129 : $Builtin.Int8) // user: %147
  br bb6                                          // id: %142

bb6:                                              // Preds: bb5
  %143 = integer_literal $Builtin.Int32, 1        // user: %144
  %144 = struct $UInt32 (%143 : $Builtin.Int32)   // user: %147
  br bb7                                          // id: %145

bb7:                                              // Preds: bb6
  // function_ref _assertionFailure(_:_:file:line:flags:)
  %146 = function_ref @Swift._assertionFailure(_: Swift.StaticString, _: Swift.StaticString, file: Swift.StaticString, line: Swift.UInt, flags: Swift.UInt32) -> Swift.Never : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %147
  %147 = apply %146(%141, %130, %134, %136, %144) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %148

// %149                                           // user: %151
bb8(%149 : $Int):                                 // Preds: bb0
  %150 = init_existential_addr %113 : $*Any, $Int // user: %151
  store %149 to %150 : $*Int                      // id: %151
  // function_ref _finalizeUninitializedArray<A>(_:)
  %152 = function_ref @Swift._finalizeUninitializedArray<A>(__owned [A]) -> [A] : $@convention(thin) <τ_0_0> (@owned Array<τ_0_0>) -> @owned Array<τ_0_0> // user: %153
  %153 = apply %152<Any>(%111) : $@convention(thin) <τ_0_0> (@owned Array<τ_0_0>) -> @owned Array<τ_0_0> // users: %162, %159
  // function_ref default argument 1 of print(_:separator:terminator:)
  %154 = function_ref @default argument 1 of Swift.print(_: Any..., separator: Swift.String, terminator: Swift.String) -> () : $@convention(thin) () -> @owned String // user: %155
  %155 = apply %154() : $@convention(thin) () -> @owned String // users: %161, %159
  // function_ref default argument 2 of print(_:separator:terminator:)
  %156 = function_ref @default argument 2 of Swift.print(_: Any..., separator: Swift.String, terminator: Swift.String) -> () : $@convention(thin) () -> @owned String // user: %157
  %157 = apply %156() : $@convention(thin) () -> @owned String // users: %160, %159
  // function_ref print(_:separator:terminator:)
  %158 = function_ref @Swift.print(_: Any..., separator: Swift.String, terminator: Swift.String) -> () : $@convention(thin) (@guaranteed Array<Any>, @guaranteed String, @guaranteed String) -> () // user: %159
  %159 = apply %158(%153, %155, %157) : $@convention(thin) (@guaranteed Array<Any>, @guaranteed String, @guaranteed String) -> ()
  release_value %157 : $String                    // id: %160
  release_value %155 : $String                    // id: %161
  release_value %153 : $Array<Any>                // id: %162
  %163 = integer_literal $Builtin.Word, 1         // user: %165
  // function_ref _allocateUninitializedArray<A>(_:)
  %164 = function_ref @Swift._allocateUninitializedArray<A>(Builtin.Word) -> ([A], Builtin.RawPointer) : $@convention(thin) <τ_0_0> (Builtin.Word) -> (@owned Array<τ_0_0>, Builtin.RawPointer) // user: %165
  %165 = apply %164<Any>(%163) : $@convention(thin) <τ_0_0> (Builtin.Word) -> (@owned Array<τ_0_0>, Builtin.RawPointer) // users: %167, %166
  %166 = tuple_extract %165 : $(Array<Any>, Builtin.RawPointer), 0 // user: %178
  %167 = tuple_extract %165 : $(Array<Any>, Builtin.RawPointer), 1 // user: %168
  %168 = pointer_to_address %167 : $Builtin.RawPointer to [strict] $*Any // user: %175
  %169 = string_literal utf8 "end"                // user: %174
  %170 = integer_literal $Builtin.Word, 3         // user: %174
  %171 = integer_literal $Builtin.Int1, -1        // user: %174
  %172 = metatype $@thin String.Type              // user: %174
  // function_ref String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)
  %173 = function_ref @Swift.String.init(_builtinStringLiteral: Builtin.RawPointer, utf8CodeUnitCount: Builtin.Word, isASCII: Builtin.Int1) -> Swift.String : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String // user: %174
  %174 = apply %173(%169, %170, %171, %172) : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String // user: %176
  %175 = init_existential_addr %168 : $*Any, $String // user: %176
  store %174 to %175 : $*String                   // id: %176
  // function_ref _finalizeUninitializedArray<A>(_:)
  %177 = function_ref @Swift._finalizeUninitializedArray<A>(__owned [A]) -> [A] : $@convention(thin) <τ_0_0> (@owned Array<τ_0_0>) -> @owned Array<τ_0_0> // user: %178
  %178 = apply %177<Any>(%166) : $@convention(thin) <τ_0_0> (@owned Array<τ_0_0>) -> @owned Array<τ_0_0> // users: %187, %184
  // function_ref default argument 1 of print(_:separator:terminator:)
  %179 = function_ref @default argument 1 of Swift.print(_: Any..., separator: Swift.String, terminator: Swift.String) -> () : $@convention(thin) () -> @owned String // user: %180
  %180 = apply %179() : $@convention(thin) () -> @owned String // users: %186, %184
  // function_ref default argument 2 of print(_:separator:terminator:)
  %181 = function_ref @default argument 2 of Swift.print(_: Any..., separator: Swift.String, terminator: Swift.String) -> () : $@convention(thin) () -> @owned String // user: %182
  %182 = apply %181() : $@convention(thin) () -> @owned String // users: %185, %184
  // function_ref print(_:separator:terminator:)
  %183 = function_ref @Swift.print(_: Any..., separator: Swift.String, terminator: Swift.String) -> () : $@convention(thin) (@guaranteed Array<Any>, @guaranteed String, @guaranteed String) -> () // user: %184
  %184 = apply %183(%178, %180, %182) : $@convention(thin) (@guaranteed Array<Any>, @guaranteed String, @guaranteed String) -> ()
  release_value %182 : $String                    // id: %185
  release_value %180 : $String                    // id: %186
  release_value %178 : $Array<Any>                // id: %187
  %188 = integer_literal $Builtin.Word, 1         // user: %190
  // function_ref _allocateUninitializedArray<A>(_:)
  %189 = function_ref @Swift._allocateUninitializedArray<A>(Builtin.Word) -> ([A], Builtin.RawPointer) : $@convention(thin) <τ_0_0> (Builtin.Word) -> (@owned Array<τ_0_0>, Builtin.RawPointer) // user: %190
  %190 = apply %189<Any>(%188) : $@convention(thin) <τ_0_0> (Builtin.Word) -> (@owned Array<τ_0_0>, Builtin.RawPointer) // users: %192, %191
  %191 = tuple_extract %190 : $(Array<Any>, Builtin.RawPointer), 0 // user: %203
  %192 = tuple_extract %190 : $(Array<Any>, Builtin.RawPointer), 1 // user: %193
  %193 = pointer_to_address %192 : $Builtin.RawPointer to [strict] $*Any // user: %200
  %194 = metatype $@thick WYStudent4.Type         // user: %195
  %195 = init_existential_metatype %194 : $@thick WYStudent4.Type, $@thick AnyObject.Type // user: %196
  %196 = thick_to_objc_metatype %195 : $@thick AnyObject.Type to $@objc_metatype AnyObject.Type // user: %197
  %197 = enum $Optional<@objc_metatype AnyObject.Type>, #Optional.some!enumelt, %196 : $@objc_metatype AnyObject.Type // user: %199
  // function_ref class_getInstanceSize
  %198 = function_ref @class_getInstanceSize : $@convention(c) (Optional<@objc_metatype AnyObject.Type>) -> Int // user: %199
  %199 = apply %198(%197) : $@convention(c) (Optional<@objc_metatype AnyObject.Type>) -> Int // user: %201
  %200 = init_existential_addr %193 : $*Any, $Int // user: %201
  store %199 to %200 : $*Int                      // id: %201
  // function_ref _finalizeUninitializedArray<A>(_:)
  %202 = function_ref @Swift._finalizeUninitializedArray<A>(__owned [A]) -> [A] : $@convention(thin) <τ_0_0> (@owned Array<τ_0_0>) -> @owned Array<τ_0_0> // user: %203
  %203 = apply %202<Any>(%191) : $@convention(thin) <τ_0_0> (@owned Array<τ_0_0>) -> @owned Array<τ_0_0> // users: %212, %209
  // function_ref default argument 1 of print(_:separator:terminator:)
  %204 = function_ref @default argument 1 of Swift.print(_: Any..., separator: Swift.String, terminator: Swift.String) -> () : $@convention(thin) () -> @owned String // user: %205
  %205 = apply %204() : $@convention(thin) () -> @owned String // users: %211, %209
  // function_ref default argument 2 of print(_:separator:terminator:)
  %206 = function_ref @default argument 2 of Swift.print(_: Any..., separator: Swift.String, terminator: Swift.String) -> () : $@convention(thin) () -> @owned String // user: %207
  %207 = apply %206() : $@convention(thin) () -> @owned String // users: %210, %209
  // function_ref print(_:separator:terminator:)
  %208 = function_ref @Swift.print(_: Any..., separator: Swift.String, terminator: Swift.String) -> () : $@convention(thin) (@guaranteed Array<Any>, @guaranteed String, @guaranteed String) -> () // user: %209
  %209 = apply %208(%203, %205, %207) : $@convention(thin) (@guaranteed Array<Any>, @guaranteed String, @guaranteed String) -> ()
  release_value %207 : $String                    // id: %210
  release_value %205 : $String                    // id: %211
  release_value %203 : $Array<Any>                // id: %212
  alloc_global @main.age : Swift.Int                   // id: %213
  %214 = global_addr @main.age : Swift.Int : $*Int     // user: %220
  %215 = metatype $@thick WYStudent5.Type
  // function_ref WYStudent5.age.unsafeMutableAddressor
  %216 = function_ref @main.WYStudent5.age.unsafeMutableAddressor : Swift.Int : $@convention(thin) () -> Builtin.RawPointer // user: %217
  %217 = apply %216() : $@convention(thin) () -> Builtin.RawPointer // user: %218
  %218 = pointer_to_address %217 : $Builtin.RawPointer to [strict] $*Int // user: %219
  %219 = begin_access [read] [dynamic] %218 : $*Int // users: %221, %220
  copy_addr %219 to [initialization] %214 : $*Int // id: %220
  end_access %219 : $*Int                         // id: %221
  alloc_global @main.stu6 : main.WYStudent6     // id: %222
  %223 = global_addr @main.stu6 : main.WYStudent6 : $*WYStudent6 // user: %230
  %224 = metatype $@thick WYStudent6.Type
  // function_ref WYStudent6.shareInstance.unsafeMutableAddressor
  %225 = function_ref @main.WYStudent6.shareInstance.unsafeMutableAddressor : main.WYStudent6 : $@convention(thin) () -> Builtin.RawPointer // user: %226
  %226 = apply %225() : $@convention(thin) () -> Builtin.RawPointer // user: %227
  %227 = pointer_to_address %226 : $Builtin.RawPointer to [strict] $*WYStudent6 // user: %228
  %228 = load %227 : $*WYStudent6                 // users: %230, %229
  strong_retain %228 : $WYStudent6                // id: %229
  store %228 to %223 : $*WYStudent6               // id: %230
  %231 = integer_literal $Builtin.Int32, 0        // user: %232
  %232 = struct $Int32 (%231 : $Builtin.Int32)    // user: %233
  return %232 : $Int32                            // id: %233
} // end sil function 'main'

// _allocateUninitializedArray<A>(_:)
sil [always_inline] [_semantics "array.uninitialized_intrinsic"] @Swift._allocateUninitializedArray<A>(Builtin.Word) -> ([A], Builtin.RawPointer) : $@convention(thin) <τ_0_0> (Builtin.Word) -> (@owned Array<τ_0_0>, Builtin.RawPointer)

// String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)
sil [always_inline] [readonly] [_semantics "string.makeUTF8"] @Swift.String.init(_builtinStringLiteral: Builtin.RawPointer, utf8CodeUnitCount: Builtin.Word, isASCII: Builtin.Int1) -> Swift.String : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String

// _finalizeUninitializedArray<A>(_:)
sil shared_external [readnone] [_semantics "array.finalize_intrinsic"] @Swift._finalizeUninitializedArray<A>(__owned [A]) -> [A] : $@convention(thin) <Element> (@owned Array<Element>) -> @owned Array<Element> {
// %0                                             // user: %2
bb0(%0 : $Array<Element>):
  %1 = alloc_stack $Array<Element>                // users: %15, %6, %5, %4, %2
  store %0 to %1 : $*Array<Element>               // id: %2
  // function_ref Array._endMutation()
  %3 = function_ref @Swift.Array._endMutation() -> () : $@convention(method) <τ_0_0> (@inout Array<τ_0_0>) -> () // user: %4
  %4 = apply %3<Element>(%1) : $@convention(method) <τ_0_0> (@inout Array<τ_0_0>) -> ()
  %5 = load %1 : $*Array<Element>                 // users: %16, %10
  %6 = struct_element_addr %1 : $*Array<Element>, #Array._buffer // user: %7
  %7 = struct_element_addr %6 : $*_ArrayBuffer<Element>, #_ArrayBuffer._storage // user: %8
  %8 = struct_element_addr %7 : $*_BridgeStorage<__ContiguousArrayStorageBase>, #_BridgeStorage.rawValue // user: %9
  %9 = load %8 : $*Builtin.BridgeObject           // user: %14
  %10 = struct_extract %5 : $Array<Element>, #Array._buffer // user: %11
  %11 = struct_extract %10 : $_ArrayBuffer<Element>, #_ArrayBuffer._storage // user: %12
  %12 = struct_extract %11 : $_BridgeStorage<__ContiguousArrayStorageBase>, #_BridgeStorage.rawValue // user: %13
  strong_retain %12 : $Builtin.BridgeObject       // id: %13
  strong_release %9 : $Builtin.BridgeObject       // id: %14
  dealloc_stack %1 : $*Array<Element>             // id: %15
  return %5 : $Array<Element>                     // id: %16
} // end sil function 'Swift._finalizeUninitializedArray<A>(__owned [A]) -> [A]'

// default argument 1 of print(_:separator:terminator:)
sil shared_external @default argument 1 of Swift.print(_: Any..., separator: Swift.String, terminator: Swift.String) -> () : $@convention(thin) () -> @owned String {
bb0:
  %0 = string_literal utf8 " "                    // user: %5
  %1 = integer_literal $Builtin.Word, 1           // user: %5
  %2 = integer_literal $Builtin.Int1, -1          // user: %5
  %3 = metatype $@thin String.Type                // user: %5
  // function_ref String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)
  %4 = function_ref @Swift.String.init(_builtinStringLiteral: Builtin.RawPointer, utf8CodeUnitCount: Builtin.Word, isASCII: Builtin.Int1) -> Swift.String : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String // user: %5
  %5 = apply %4(%0, %1, %2, %3) : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String // user: %6
  return %5 : $String                             // id: %6
} // end sil function 'default argument 1 of Swift.print(_: Any..., separator: Swift.String, terminator: Swift.String) -> ()'

// default argument 2 of print(_:separator:terminator:)
sil shared_external @default argument 2 of Swift.print(_: Any..., separator: Swift.String, terminator: Swift.String) -> () : $@convention(thin) () -> @owned String {
bb0:
  %0 = string_literal utf8 "\n"                   // user: %5
  %1 = integer_literal $Builtin.Word, 1           // user: %5
  %2 = integer_literal $Builtin.Int1, -1          // user: %5
  %3 = metatype $@thin String.Type                // user: %5
  // function_ref String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)
  %4 = function_ref @Swift.String.init(_builtinStringLiteral: Builtin.RawPointer, utf8CodeUnitCount: Builtin.Word, isASCII: Builtin.Int1) -> Swift.String : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String // user: %5
  %5 = apply %4(%0, %1, %2, %3) : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String // user: %6
  return %5 : $String                             // id: %6
} // end sil function 'default argument 2 of Swift.print(_: Any..., separator: Swift.String, terminator: Swift.String) -> ()'

// print(_:separator:terminator:)
sil @Swift.print(_: Any..., separator: Swift.String, terminator: Swift.String) -> () : $@convention(thin) (@guaranteed Array<Any>, @guaranteed String, @guaranteed String) -> ()

// variable initialization expression of WYStudent.age
sil hidden [transparent] @variable initialization expression of main.WYStudent.age : Swift.Int : $@convention(thin) () -> Int {
bb0:
  %0 = integer_literal $Builtin.Int64, 18         // user: %1
  %1 = struct $Int (%0 : $Builtin.Int64)          // user: %2
  return %1 : $Int                                // id: %2
} // end sil function 'variable initialization expression of main.WYStudent.age : Swift.Int'

// Int.init(_builtinIntegerLiteral:)
sil public_external [transparent] @Swift.Int.init(_builtinIntegerLiteral: Builtin.IntLiteral) -> Swift.Int : $@convention(method) (Builtin.IntLiteral, @thin Int.Type) -> Int {
// %0                                             // user: %2
bb0(%0 : $Builtin.IntLiteral, %1 : $@thin Int.Type):
  %2 = builtin "s_to_s_checked_trunc_IntLiteral_Int64"(%0 : $Builtin.IntLiteral) : $(Builtin.Int64, Builtin.Int1) // user: %3
  %3 = tuple_extract %2 : $(Builtin.Int64, Builtin.Int1), 0 // user: %4
  %4 = struct $Int (%3 : $Builtin.Int64)          // user: %5
  return %4 : $Int                                // id: %5
} // end sil function 'Swift.Int.init(_builtinIntegerLiteral: Builtin.IntLiteral) -> Swift.Int'

// WYStudent.age.getter
sil hidden [transparent] @main.WYStudent.age.getter : Swift.Int : $@convention(method) (@guaranteed WYStudent) -> Int {
// %0 "self"                                      // users: %2, %1
bb0(%0 : $WYStudent):
  debug_value %0 : $WYStudent, let, name "self", argno 1, implicit // id: %1
  %2 = ref_element_addr %0 : $WYStudent, #WYStudent.age // user: %3
  %3 = begin_access [read] [dynamic] %2 : $*Int   // users: %4, %5
  %4 = load %3 : $*Int                            // user: %6
  end_access %3 : $*Int                           // id: %5
  return %4 : $Int                                // id: %6
} // end sil function 'main.WYStudent.age.getter : Swift.Int'

// WYStudent.age.setter
sil hidden [transparent] @main.WYStudent.age.setter : Swift.Int : $@convention(method) (Int, @guaranteed WYStudent) -> () {
// %0 "value"                                     // users: %6, %2
// %1 "self"                                      // users: %4, %3
bb0(%0 : $Int, %1 : $WYStudent):
  debug_value %0 : $Int, let, name "value", argno 1, implicit // id: %2
  debug_value %1 : $WYStudent, let, name "self", argno 2, implicit // id: %3
  %4 = ref_element_addr %1 : $WYStudent, #WYStudent.age // user: %5
  %5 = begin_access [modify] [dynamic] %4 : $*Int // users: %6, %7
  store %0 to %5 : $*Int                          // id: %6
  end_access %5 : $*Int                           // id: %7
  %8 = tuple ()                                   // user: %9
  return %8 : $()                                 // id: %9
} // end sil function 'main.WYStudent.age.setter : Swift.Int'

// WYStudent.age.modify
sil hidden [transparent] @main.WYStudent.age.modify : Swift.Int : $@yield_once @convention(method) (@guaranteed WYStudent) -> @yields @inout Int {
// %0 "self"                                      // users: %2, %1
bb0(%0 : $WYStudent):
  debug_value %0 : $WYStudent, let, name "self", argno 1, implicit // id: %1
  %2 = ref_element_addr %0 : $WYStudent, #WYStudent.age // user: %3
  %3 = begin_access [modify] [dynamic] %2 : $*Int // users: %5, %8, %4
  yield %3 : $*Int, resume bb1, unwind bb2        // id: %4

bb1:                                              // Preds: bb0
  end_access %3 : $*Int                           // id: %5
  %6 = tuple ()                                   // user: %7
  return %6 : $()                                 // id: %7

bb2:                                              // Preds: bb0
  end_access %3 : $*Int                           // id: %8
  unwind                                          // id: %9
} // end sil function 'main.WYStudent.age.modify : Swift.Int'

// variable initialization expression of WYStudent.name
sil hidden [transparent] @variable initialization expression of main.WYStudent.name : Swift.String : $@convention(thin) () -> @owned String {
bb0:
  %0 = string_literal utf8 "wy"                   // user: %5
  %1 = integer_literal $Builtin.Word, 2           // user: %5
  %2 = integer_literal $Builtin.Int1, -1          // user: %5
  %3 = metatype $@thin String.Type                // user: %5
  // function_ref String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)
  %4 = function_ref @Swift.String.init(_builtinStringLiteral: Builtin.RawPointer, utf8CodeUnitCount: Builtin.Word, isASCII: Builtin.Int1) -> Swift.String : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String // user: %5
  %5 = apply %4(%0, %1, %2, %3) : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String // user: %6
  return %5 : $String                             // id: %6
} // end sil function 'variable initialization expression of main.WYStudent.name : Swift.String'

// WYStudent.name.getter
sil hidden [transparent] @main.WYStudent.name.getter : Swift.String : $@convention(method) (@guaranteed WYStudent) -> @owned String {
// %0 "self"                                      // users: %2, %1
bb0(%0 : $WYStudent):
  debug_value %0 : $WYStudent, let, name "self", argno 1, implicit // id: %1
  %2 = ref_element_addr %0 : $WYStudent, #WYStudent.name // user: %3
  %3 = begin_access [read] [dynamic] %2 : $*String // users: %4, %6
  %4 = load %3 : $*String                         // users: %7, %5
  retain_value %4 : $String                       // id: %5
  end_access %3 : $*String                        // id: %6
  return %4 : $String                             // id: %7
} // end sil function 'main.WYStudent.name.getter : Swift.String'

// WYStudent.name.setter
sil hidden [transparent] @main.WYStudent.name.setter : Swift.String : $@convention(method) (@owned String, @guaranteed WYStudent) -> () {
// %0 "value"                                     // users: %11, %8, %4, %2
// %1 "self"                                      // users: %5, %3
bb0(%0 : $String, %1 : $WYStudent):
  debug_value %0 : $String, let, name "value", argno 1, implicit // id: %2
  debug_value %1 : $WYStudent, let, name "self", argno 2, implicit // id: %3
  retain_value %0 : $String                       // id: %4
  %5 = ref_element_addr %1 : $WYStudent, #WYStudent.name // user: %6
  %6 = begin_access [modify] [dynamic] %5 : $*String // users: %8, %7, %10
  %7 = load %6 : $*String                         // user: %9
  store %0 to %6 : $*String                       // id: %8
  release_value %7 : $String                      // id: %9
  end_access %6 : $*String                        // id: %10
  release_value %0 : $String                      // id: %11
  %12 = tuple ()                                  // user: %13
  return %12 : $()                                // id: %13
} // end sil function 'main.WYStudent.name.setter : Swift.String'

// WYStudent.name.modify
sil hidden [transparent] @main.WYStudent.name.modify : Swift.String : $@yield_once @convention(method) (@guaranteed WYStudent) -> @yields @inout String {
// %0 "self"                                      // users: %2, %1
bb0(%0 : $WYStudent):
  debug_value %0 : $WYStudent, let, name "self", argno 1, implicit // id: %1
  %2 = ref_element_addr %0 : $WYStudent, #WYStudent.name // user: %3
  %3 = begin_access [modify] [dynamic] %2 : $*String // users: %5, %8, %4
  yield %3 : $*String, resume bb1, unwind bb2     // id: %4

bb1:                                              // Preds: bb0
  end_access %3 : $*String                        // id: %5
  %6 = tuple ()                                   // user: %7
  return %6 : $()                                 // id: %7

bb2:                                              // Preds: bb0
  end_access %3 : $*String                        // id: %8
  unwind                                          // id: %9
} // end sil function 'main.WYStudent.name.modify : Swift.String'

// WYStudent.deinit
sil hidden @main.WYStudent.deinit : $@convention(method) (@guaranteed WYStudent) -> @owned Builtin.NativeObject {
// %0 "self"                                      // users: %6, %2, %1
bb0(%0 : $WYStudent):
  debug_value %0 : $WYStudent, let, name "self", argno 1, implicit // id: %1
  %2 = ref_element_addr %0 : $WYStudent, #WYStudent.name // user: %3
  %3 = begin_access [deinit] [static] %2 : $*String // users: %5, %4
  destroy_addr %3 : $*String                      // id: %4
  end_access %3 : $*String                        // id: %5
  %6 = unchecked_ref_cast %0 : $WYStudent to $Builtin.NativeObject // user: %7
  return %6 : $Builtin.NativeObject               // id: %7
} // end sil function 'main.WYStudent.deinit'

// WYStudent.__deallocating_deinit
sil hidden @main.WYStudent.__deallocating_deinit : $@convention(method) (@owned WYStudent) -> () {
// %0 "self"                                      // users: %3, %1
bb0(%0 : $WYStudent):
  debug_value %0 : $WYStudent, let, name "self", argno 1, implicit // id: %1
  // function_ref WYStudent.deinit
  %2 = function_ref @main.WYStudent.deinit : $@convention(method) (@guaranteed WYStudent) -> @owned Builtin.NativeObject // user: %3
  %3 = apply %2(%0) : $@convention(method) (@guaranteed WYStudent) -> @owned Builtin.NativeObject // user: %4
  %4 = unchecked_ref_cast %3 : $Builtin.NativeObject to $WYStudent // user: %5
  dealloc_ref %4 : $WYStudent                     // id: %5
  %6 = tuple ()                                   // user: %7
  return %6 : $()                                 // id: %7
} // end sil function 'main.WYStudent.__deallocating_deinit'

// WYStudent.__allocating_init()
sil hidden [exact_self_class] @main.WYStudent.__allocating_init() -> main.WYStudent : $@convention(method) (@thick WYStudent.Type) -> @owned WYStudent {
// %0 "$metatype"
bb0(%0 : $@thick WYStudent.Type):
  %1 = alloc_ref $WYStudent                       // user: %3
  // function_ref WYStudent.init()
  %2 = function_ref @main.WYStudent.init() -> main.WYStudent : $@convention(method) (@owned WYStudent) -> @owned WYStudent // user: %3
  %3 = apply %2(%1) : $@convention(method) (@owned WYStudent) -> @owned WYStudent // user: %4
  return %3 : $WYStudent                          // id: %4
} // end sil function 'main.WYStudent.__allocating_init() -> main.WYStudent'

// WYStudent.init()
sil hidden @main.WYStudent.init() -> main.WYStudent : $@convention(method) (@owned WYStudent) -> @owned WYStudent {
// %0 "self"                                      // users: %6, %2, %14, %1
bb0(%0 : $WYStudent):
  debug_value %0 : $WYStudent, let, name "self", argno 1, implicit // id: %1
  %2 = ref_element_addr %0 : $WYStudent, #WYStudent.age // user: %5
  %3 = integer_literal $Builtin.Int64, 18         // user: %4
  %4 = struct $Int (%3 : $Builtin.Int64)          // user: %5
  store %4 to %2 : $*Int                          // id: %5
  %6 = ref_element_addr %0 : $WYStudent, #WYStudent.name // user: %13
  %7 = string_literal utf8 "wy"                   // user: %12
  %8 = integer_literal $Builtin.Word, 2           // user: %12
  %9 = integer_literal $Builtin.Int1, -1          // user: %12
  %10 = metatype $@thin String.Type               // user: %12
  // function_ref String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)
  %11 = function_ref @Swift.String.init(_builtinStringLiteral: Builtin.RawPointer, utf8CodeUnitCount: Builtin.Word, isASCII: Builtin.Int1) -> Swift.String : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String // user: %12
  %12 = apply %11(%7, %8, %9, %10) : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String // user: %13
  store %12 to %6 : $*String                      // id: %13
  return %0 : $WYStudent                          // id: %14
} // end sil function 'main.WYStudent.init() -> main.WYStudent'

// variable initialization expression of Square.width
sil hidden [transparent] @variable initialization expression of main.Square.width : Swift.Double : $@convention(thin) () -> Double {
bb0:
  %0 = float_literal $Builtin.FPIEEE64, 0x4020000000000000 // 8 // user: %1
  %1 = struct $Double (%0 : $Builtin.FPIEEE64)    // user: %2
  return %1 : $Double                             // id: %2
} // end sil function 'variable initialization expression of main.Square.width : Swift.Double'

// Double.init(_builtinFloatLiteral:)
sil public_external [transparent] @Swift.Double.init(_builtinFloatLiteral: Builtin.FPIEEE80) -> Swift.Double : $@convention(method) (Builtin.FPIEEE80, @thin Double.Type) -> Double {
// %0                                             // user: %2
bb0(%0 : $Builtin.FPIEEE80, %1 : $@thin Double.Type):
  %2 = builtin "fptrunc_FPIEEE80_FPIEEE64"(%0 : $Builtin.FPIEEE80) : $Builtin.FPIEEE64 // user: %3
  %3 = struct $Double (%2 : $Builtin.FPIEEE64)    // user: %4
  return %3 : $Double                             // id: %4
} // end sil function 'Swift.Double.init(_builtinFloatLiteral: Builtin.FPIEEE80) -> Swift.Double'

// Square.width.getter
sil hidden [transparent] @main.Square.width.getter : Swift.Double : $@convention(method) (@guaranteed Square) -> Double {
// %0 "self"                                      // users: %2, %1
bb0(%0 : $Square):
  debug_value %0 : $Square, let, name "self", argno 1, implicit // id: %1
  %2 = ref_element_addr %0 : $Square, #Square.width // user: %3
  %3 = begin_access [read] [dynamic] %2 : $*Double // users: %4, %5
  %4 = load %3 : $*Double                         // user: %6
  end_access %3 : $*Double                        // id: %5
  return %4 : $Double                             // id: %6
} // end sil function 'main.Square.width.getter : Swift.Double'

// Square.width.setter
sil hidden [transparent] @main.Square.width.setter : Swift.Double : $@convention(method) (Double, @guaranteed Square) -> () {
// %0 "value"                                     // users: %6, %2
// %1 "self"                                      // users: %4, %3
bb0(%0 : $Double, %1 : $Square):
  debug_value %0 : $Double, let, name "value", argno 1, implicit // id: %2
  debug_value %1 : $Square, let, name "self", argno 2, implicit // id: %3
  %4 = ref_element_addr %1 : $Square, #Square.width // user: %5
  %5 = begin_access [modify] [dynamic] %4 : $*Double // users: %6, %7
  store %0 to %5 : $*Double                       // id: %6
  end_access %5 : $*Double                        // id: %7
  %8 = tuple ()                                   // user: %9
  return %8 : $()                                 // id: %9
} // end sil function 'main.Square.width.setter : Swift.Double'

// Square.width.modify
sil hidden [transparent] @main.Square.width.modify : Swift.Double : $@yield_once @convention(method) (@guaranteed Square) -> @yields @inout Double {
// %0 "self"                                      // users: %2, %1
bb0(%0 : $Square):
  debug_value %0 : $Square, let, name "self", argno 1, implicit // id: %1
  %2 = ref_element_addr %0 : $Square, #Square.width // user: %3
  %3 = begin_access [modify] [dynamic] %2 : $*Double // users: %5, %8, %4
  yield %3 : $*Double, resume bb1, unwind bb2     // id: %4

bb1:                                              // Preds: bb0
  end_access %3 : $*Double                        // id: %5
  %6 = tuple ()                                   // user: %7
  return %6 : $()                                 // id: %7

bb2:                                              // Preds: bb0
  end_access %3 : $*Double                        // id: %8
  unwind                                          // id: %9
} // end sil function 'main.Square.width.modify : Swift.Double'

// Square.area.getter
sil hidden @main.Square.area.getter : Swift.Double : $@convention(method) (@guaranteed Square) -> Double {
// %0 "self"                                      // users: %5, %4, %3, %2, %1
bb0(%0 : $Square):
  debug_value %0 : $Square, let, name "self", argno 1, implicit // id: %1
  %2 = class_method %0 : $Square, #Square.width!getter : (Square) -> () -> Double, $@convention(method) (@guaranteed Square) -> Double // user: %3
  %3 = apply %2(%0) : $@convention(method) (@guaranteed Square) -> Double // user: %6
  %4 = class_method %0 : $Square, #Square.width!getter : (Square) -> () -> Double, $@convention(method) (@guaranteed Square) -> Double // user: %5
  %5 = apply %4(%0) : $@convention(method) (@guaranteed Square) -> Double // user: %7
  %6 = struct_extract %3 : $Double, #Double._value // user: %8
  %7 = struct_extract %5 : $Double, #Double._value // user: %8
  %8 = builtin "fmul_FPIEEE64"(%6 : $Builtin.FPIEEE64, %7 : $Builtin.FPIEEE64) : $Builtin.FPIEEE64 // user: %9
  %9 = struct $Double (%8 : $Builtin.FPIEEE64)    // user: %10
  return %9 : $Double                             // id: %10
} // end sil function 'main.Square.area.getter : Swift.Double'

// static Double.* infix(_:_:)
sil public_external [transparent] @static Swift.Double.* infix(Swift.Double, Swift.Double) -> Swift.Double : $@convention(method) (Double, Double, @thin Double.Type) -> Double {
// %0                                             // user: %3
// %1                                             // user: %4
bb0(%0 : $Double, %1 : $Double, %2 : $@thin Double.Type):
  %3 = struct_extract %0 : $Double, #Double._value // user: %5
  %4 = struct_extract %1 : $Double, #Double._value // user: %5
  %5 = builtin "fmul_FPIEEE64"(%3 : $Builtin.FPIEEE64, %4 : $Builtin.FPIEEE64) : $Builtin.FPIEEE64 // user: %6
  %6 = struct $Double (%5 : $Builtin.FPIEEE64)    // user: %7
  return %6 : $Double                             // id: %7
} // end sil function 'static Swift.Double.* infix(Swift.Double, Swift.Double) -> Swift.Double'

// Square.area.setter
sil hidden @main.Square.area.setter : Swift.Double : $@convention(method) (Double, @guaranteed Square) -> () {
// %0 "newValue"                                  // users: %5, %2
// %1 "self"                                      // users: %7, %6, %3
bb0(%0 : $Double, %1 : $Square):
  debug_value %0 : $Double, let, name "newValue", argno 1, implicit // id: %2
  debug_value %1 : $Square, let, name "self", argno 2, implicit // id: %3
  // function_ref sqrt
  %4 = function_ref @sqrt : $@convention(c) (Double) -> Double // user: %5
  %5 = apply %4(%0) : $@convention(c) (Double) -> Double // user: %7
  %6 = class_method %1 : $Square, #Square.width!setter : (Square) -> (Double) -> (), $@convention(method) (Double, @guaranteed Square) -> () // user: %7
  %7 = apply %6(%5, %1) : $@convention(method) (Double, @guaranteed Square) -> ()
  %8 = tuple ()                                   // user: %9
  return %8 : $()                                 // id: %9
} // end sil function 'main.Square.area.setter : Swift.Double'

// sqrt
// clang name: sqrt
sil [readnone] [clang sqrt] @sqrt : $@convention(c) (Double) -> Double

// Square.area.modify
sil hidden [transparent] @main.Square.area.modify : Swift.Double : $@yield_once @convention(method) (@guaranteed Square) -> @yields @inout Double {
// %0 "self"                                      // users: %9, %15, %4, %1
bb0(%0 : $Square):
  debug_value %0 : $Square, let, name "self", argno 1, implicit // id: %1
  %2 = alloc_stack $Double                        // users: %13, %7, %5, %10, %16, %6
  // function_ref Square.area.getter
  %3 = function_ref @main.Square.area.getter : Swift.Double : $@convention(method) (@guaranteed Square) -> Double // user: %4
  %4 = apply %3(%0) : $@convention(method) (@guaranteed Square) -> Double // user: %5
  store %4 to %2 : $*Double                       // id: %5
  yield %2 : $*Double, resume bb1, unwind bb2     // id: %6

bb1:                                              // Preds: bb0
  %7 = load %2 : $*Double                         // user: %9
  // function_ref Square.area.setter
  %8 = function_ref @main.Square.area.setter : Swift.Double : $@convention(method) (Double, @guaranteed Square) -> () // user: %9
  %9 = apply %8(%7, %0) : $@convention(method) (Double, @guaranteed Square) -> ()
  dealloc_stack %2 : $*Double                     // id: %10
  %11 = tuple ()                                  // user: %12
  return %11 : $()                                // id: %12

bb2:                                              // Preds: bb0
  %13 = load %2 : $*Double                        // user: %15
  // function_ref Square.area.setter
  %14 = function_ref @main.Square.area.setter : Swift.Double : $@convention(method) (Double, @guaranteed Square) -> () // user: %15
  %15 = apply %14(%13, %0) : $@convention(method) (Double, @guaranteed Square) -> ()
  dealloc_stack %2 : $*Double                     // id: %16
  unwind                                          // id: %17
} // end sil function 'main.Square.area.modify : Swift.Double'

// Square.deinit
sil hidden @main.Square.deinit : $@convention(method) (@guaranteed Square) -> @owned Builtin.NativeObject {
// %0 "self"                                      // users: %2, %1
bb0(%0 : $Square):
  debug_value %0 : $Square, let, name "self", argno 1, implicit // id: %1
  %2 = unchecked_ref_cast %0 : $Square to $Builtin.NativeObject // user: %3
  return %2 : $Builtin.NativeObject               // id: %3
} // end sil function 'main.Square.deinit'

// Square.__deallocating_deinit
sil hidden @main.Square.__deallocating_deinit : $@convention(method) (@owned Square) -> () {
// %0 "self"                                      // users: %3, %1
bb0(%0 : $Square):
  debug_value %0 : $Square, let, name "self", argno 1, implicit // id: %1
  // function_ref Square.deinit
  %2 = function_ref @main.Square.deinit : $@convention(method) (@guaranteed Square) -> @owned Builtin.NativeObject // user: %3
  %3 = apply %2(%0) : $@convention(method) (@guaranteed Square) -> @owned Builtin.NativeObject // user: %4
  %4 = unchecked_ref_cast %3 : $Builtin.NativeObject to $Square // user: %5
  dealloc_ref %4 : $Square                        // id: %5
  %6 = tuple ()                                   // user: %7
  return %6 : $()                                 // id: %7
} // end sil function 'main.Square.__deallocating_deinit'

// Square.__allocating_init()
sil hidden [exact_self_class] @main.Square.__allocating_init() -> main.Square : $@convention(method) (@thick Square.Type) -> @owned Square {
// %0 "$metatype"
bb0(%0 : $@thick Square.Type):
  %1 = alloc_ref $Square                          // user: %3
  // function_ref Square.init()
  %2 = function_ref @main.Square.init() -> main.Square : $@convention(method) (@owned Square) -> @owned Square // user: %3
  %3 = apply %2(%1) : $@convention(method) (@owned Square) -> @owned Square // user: %4
  return %3 : $Square                             // id: %4
} // end sil function 'main.Square.__allocating_init() -> main.Square'

// Square.init()
sil hidden @main.Square.init() -> main.Square : $@convention(method) (@owned Square) -> @owned Square {
// %0 "self"                                      // users: %2, %6, %1
bb0(%0 : $Square):
  debug_value %0 : $Square, let, name "self", argno 1, implicit // id: %1
  %2 = ref_element_addr %0 : $Square, #Square.width // user: %5
  %3 = float_literal $Builtin.FPIEEE64, 0x4020000000000000 // 8 // user: %4
  %4 = struct $Double (%3 : $Builtin.FPIEEE64)    // user: %5
  store %4 to %2 : $*Double                       // id: %5
  return %0 : $Square                             // id: %6
} // end sil function 'main.Square.init() -> main.Square'

// class_getInstanceSize
// clang name: class_getInstanceSize
sil [available 10.5] [clang class_getInstanceSize] @class_getInstanceSize : $@convention(c) (Optional<@objc_metatype AnyObject.Type>) -> Int

// variable initialization expression of WYStudent2.name
sil hidden [transparent] @variable initialization expression of main.WYStudent2.name : Swift.String : $@convention(thin) () -> @owned String {
bb0:
  %0 = string_literal utf8 "测试"                 // user: %5
  %1 = integer_literal $Builtin.Word, 6           // user: %5
  %2 = integer_literal $Builtin.Int1, 0           // user: %5
  %3 = metatype $@thin String.Type                // user: %5
  // function_ref String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)
  %4 = function_ref @Swift.String.init(_builtinStringLiteral: Builtin.RawPointer, utf8CodeUnitCount: Builtin.Word, isASCII: Builtin.Int1) -> Swift.String : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String // user: %5
  %5 = apply %4(%0, %1, %2, %3) : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String // user: %6
  return %5 : $String                             // id: %6
} // end sil function 'variable initialization expression of main.WYStudent2.name : Swift.String'

// WYStudent2.name.willset
sil private @main.WYStudent2.name.willset : Swift.String : $@convention(method) (@guaranteed String, @guaranteed WYStudent2) -> () {
// %0 "newValue"                                  // users: %31, %2
// %1 "self"                                      // user: %3
bb0(%0 : $String, %1 : $WYStudent2):
  debug_value %0 : $String, let, name "newValue", argno 1, implicit // id: %2
  debug_value %1 : $WYStudent2, let, name "self", argno 2, implicit // id: %3
  %4 = integer_literal $Builtin.Word, 1           // user: %6
  // function_ref _allocateUninitializedArray<A>(_:)
  %5 = function_ref @Swift._allocateUninitializedArray<A>(Builtin.Word) -> ([A], Builtin.RawPointer) : $@convention(thin) <τ_0_0> (Builtin.Word) -> (@owned Array<τ_0_0>, Builtin.RawPointer) // user: %6
  %6 = apply %5<Any>(%4) : $@convention(thin) <τ_0_0> (Builtin.Word) -> (@owned Array<τ_0_0>, Builtin.RawPointer) // users: %8, %7
  %7 = tuple_extract %6 : $(Array<Any>, Builtin.RawPointer), 0 // user: %58
  %8 = tuple_extract %6 : $(Array<Any>, Builtin.RawPointer), 1 // user: %9
  %9 = pointer_to_address %8 : $Builtin.RawPointer to [strict] $*Any // user: %55
  %10 = alloc_stack $DefaultStringInterpolation, var, name "$interpolation", implicit // users: %48, %18, %51, %50, %25, %32, %43
  %11 = integer_literal $Builtin.Int64, 17        // user: %12
  %12 = struct $Int (%11 : $Builtin.Int64)        // user: %17
  %13 = integer_literal $Builtin.Int64, 1         // user: %14
  %14 = struct $Int (%13 : $Builtin.Int64)        // user: %17
  %15 = metatype $@thin DefaultStringInterpolation.Type // user: %17
  // function_ref DefaultStringInterpolation.init(literalCapacity:interpolationCount:)
  %16 = function_ref @Swift.DefaultStringInterpolation.init(literalCapacity: Swift.Int, interpolationCount: Swift.Int) -> Swift.DefaultStringInterpolation : $@convention(method) (Int, Int, @thin DefaultStringInterpolation.Type) -> @owned DefaultStringInterpolation // user: %17
  %17 = apply %16(%12, %14, %15) : $@convention(method) (Int, Int, @thin DefaultStringInterpolation.Type) -> @owned DefaultStringInterpolation // user: %18
  store %17 to %10 : $*DefaultStringInterpolation // id: %18
  %19 = string_literal utf8 "willSet newValue "   // user: %24
  %20 = integer_literal $Builtin.Word, 17         // user: %24
  %21 = integer_literal $Builtin.Int1, -1         // user: %24
  %22 = metatype $@thin String.Type               // user: %24
  // function_ref String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)
  %23 = function_ref @Swift.String.init(_builtinStringLiteral: Builtin.RawPointer, utf8CodeUnitCount: Builtin.Word, isASCII: Builtin.Int1) -> Swift.String : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String // user: %24
  %24 = apply %23(%19, %20, %21, %22) : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String // users: %29, %27
  %25 = begin_access [modify] [static] %10 : $*DefaultStringInterpolation // users: %28, %27
  // function_ref DefaultStringInterpolation.appendLiteral(_:)
  %26 = function_ref @Swift.DefaultStringInterpolation.appendLiteral(Swift.String) -> () : $@convention(method) (@guaranteed String, @inout DefaultStringInterpolation) -> () // user: %27
  %27 = apply %26(%24, %25) : $@convention(method) (@guaranteed String, @inout DefaultStringInterpolation) -> ()
  end_access %25 : $*DefaultStringInterpolation   // id: %28
  release_value %24 : $String                     // id: %29
  %30 = alloc_stack $String                       // users: %31, %36, %34
  store %0 to %30 : $*String                      // id: %31
  %32 = begin_access [modify] [static] %10 : $*DefaultStringInterpolation // users: %35, %34
  // function_ref DefaultStringInterpolation.appendInterpolation<A>(_:)
  %33 = function_ref @Swift.DefaultStringInterpolation.appendInterpolation<A where A: Swift.CustomStringConvertible, A: Swift.TextOutputStreamable>(A) -> () : $@convention(method) <τ_0_0 where τ_0_0 : CustomStringConvertible, τ_0_0 : TextOutputStreamable> (@in_guaranteed τ_0_0, @inout DefaultStringInterpolation) -> () // user: %34
  %34 = apply %33<String>(%30, %32) : $@convention(method) <τ_0_0 where τ_0_0 : CustomStringConvertible, τ_0_0 : TextOutputStreamable> (@in_guaranteed τ_0_0, @inout DefaultStringInterpolation) -> ()
  end_access %32 : $*DefaultStringInterpolation   // id: %35
  dealloc_stack %30 : $*String                    // id: %36
  %37 = string_literal utf8 ""                    // user: %42
  %38 = integer_literal $Builtin.Word, 0          // user: %42
  %39 = integer_literal $Builtin.Int1, -1         // user: %42
  %40 = metatype $@thin String.Type               // user: %42
  // function_ref String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)
  %41 = function_ref @Swift.String.init(_builtinStringLiteral: Builtin.RawPointer, utf8CodeUnitCount: Builtin.Word, isASCII: Builtin.Int1) -> Swift.String : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String // user: %42
  %42 = apply %41(%37, %38, %39, %40) : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String // users: %47, %45
  %43 = begin_access [modify] [static] %10 : $*DefaultStringInterpolation // users: %46, %45
  // function_ref DefaultStringInterpolation.appendLiteral(_:)
  %44 = function_ref @Swift.DefaultStringInterpolation.appendLiteral(Swift.String) -> () : $@convention(method) (@guaranteed String, @inout DefaultStringInterpolation) -> () // user: %45
  %45 = apply %44(%42, %43) : $@convention(method) (@guaranteed String, @inout DefaultStringInterpolation) -> ()
  end_access %43 : $*DefaultStringInterpolation   // id: %46
  release_value %42 : $String                     // id: %47
  %48 = load %10 : $*DefaultStringInterpolation   // users: %54, %49
  retain_value %48 : $DefaultStringInterpolation  // id: %49
  destroy_addr %10 : $*DefaultStringInterpolation // id: %50
  dealloc_stack %10 : $*DefaultStringInterpolation // id: %51
  %52 = metatype $@thin String.Type               // user: %54
  // function_ref String.init(stringInterpolation:)
  %53 = function_ref @Swift.String.init(stringInterpolation: Swift.DefaultStringInterpolation) -> Swift.String : $@convention(method) (@owned DefaultStringInterpolation, @thin String.Type) -> @owned String // user: %54
  %54 = apply %53(%48, %52) : $@convention(method) (@owned DefaultStringInterpolation, @thin String.Type) -> @owned String // user: %56
  %55 = init_existential_addr %9 : $*Any, $String // user: %56
  store %54 to %55 : $*String                     // id: %56
  // function_ref _finalizeUninitializedArray<A>(_:)
  %57 = function_ref @Swift._finalizeUninitializedArray<A>(__owned [A]) -> [A] : $@convention(thin) <τ_0_0> (@owned Array<τ_0_0>) -> @owned Array<τ_0_0> // user: %58
  %58 = apply %57<Any>(%7) : $@convention(thin) <τ_0_0> (@owned Array<τ_0_0>) -> @owned Array<τ_0_0> // users: %67, %64
  // function_ref default argument 1 of print(_:separator:terminator:)
  %59 = function_ref @default argument 1 of Swift.print(_: Any..., separator: Swift.String, terminator: Swift.String) -> () : $@convention(thin) () -> @owned String // user: %60
  %60 = apply %59() : $@convention(thin) () -> @owned String // users: %66, %64
  // function_ref default argument 2 of print(_:separator:terminator:)
  %61 = function_ref @default argument 2 of Swift.print(_: Any..., separator: Swift.String, terminator: Swift.String) -> () : $@convention(thin) () -> @owned String // user: %62
  %62 = apply %61() : $@convention(thin) () -> @owned String // users: %65, %64
  // function_ref print(_:separator:terminator:)
  %63 = function_ref @Swift.print(_: Any..., separator: Swift.String, terminator: Swift.String) -> () : $@convention(thin) (@guaranteed Array<Any>, @guaranteed String, @guaranteed String) -> () // user: %64
  %64 = apply %63(%58, %60, %62) : $@convention(thin) (@guaranteed Array<Any>, @guaranteed String, @guaranteed String) -> ()
  release_value %62 : $String                     // id: %65
  release_value %60 : $String                     // id: %66
  release_value %58 : $Array<Any>                 // id: %67
  %68 = tuple ()                                  // user: %69
  return %68 : $()                                // id: %69
} // end sil function 'main.WYStudent2.name.willset : Swift.String'

// DefaultStringInterpolation.init(literalCapacity:interpolationCount:)
sil @Swift.DefaultStringInterpolation.init(literalCapacity: Swift.Int, interpolationCount: Swift.Int) -> Swift.DefaultStringInterpolation : $@convention(method) (Int, Int, @thin DefaultStringInterpolation.Type) -> @owned DefaultStringInterpolation

// DefaultStringInterpolation.appendLiteral(_:)
sil @Swift.DefaultStringInterpolation.appendLiteral(Swift.String) -> () : $@convention(method) (@guaranteed String, @inout DefaultStringInterpolation) -> ()

// DefaultStringInterpolation.appendInterpolation<A>(_:)
sil @Swift.DefaultStringInterpolation.appendInterpolation<A where A: Swift.CustomStringConvertible, A: Swift.TextOutputStreamable>(A) -> () : $@convention(method) <τ_0_0 where τ_0_0 : CustomStringConvertible, τ_0_0 : TextOutputStreamable> (@in_guaranteed τ_0_0, @inout DefaultStringInterpolation) -> ()

// String.init(stringInterpolation:)
sil [readonly] @Swift.String.init(stringInterpolation: Swift.DefaultStringInterpolation) -> Swift.String : $@convention(method) (@owned DefaultStringInterpolation, @thin String.Type) -> @owned String

// WYStudent2.name.didset
sil private @main.WYStudent2.name.didset : Swift.String : $@convention(method) (@guaranteed String, @guaranteed WYStudent2) -> () {
// %0 "oldValue"                                  // users: %31, %2
// %1 "self"                                      // user: %3
bb0(%0 : $String, %1 : $WYStudent2):
  debug_value %0 : $String, let, name "oldValue", argno 1, implicit // id: %2
  debug_value %1 : $WYStudent2, let, name "self", argno 2, implicit // id: %3
  %4 = integer_literal $Builtin.Word, 1           // user: %6
  // function_ref _allocateUninitializedArray<A>(_:)
  %5 = function_ref @Swift._allocateUninitializedArray<A>(Builtin.Word) -> ([A], Builtin.RawPointer) : $@convention(thin) <τ_0_0> (Builtin.Word) -> (@owned Array<τ_0_0>, Builtin.RawPointer) // user: %6
  %6 = apply %5<Any>(%4) : $@convention(thin) <τ_0_0> (Builtin.Word) -> (@owned Array<τ_0_0>, Builtin.RawPointer) // users: %8, %7
  %7 = tuple_extract %6 : $(Array<Any>, Builtin.RawPointer), 0 // user: %58
  %8 = tuple_extract %6 : $(Array<Any>, Builtin.RawPointer), 1 // user: %9
  %9 = pointer_to_address %8 : $Builtin.RawPointer to [strict] $*Any // user: %55
  %10 = alloc_stack $DefaultStringInterpolation, var, name "$interpolation", implicit // users: %48, %18, %51, %50, %25, %32, %43
  %11 = integer_literal $Builtin.Int64, 16        // user: %12
  %12 = struct $Int (%11 : $Builtin.Int64)        // user: %17
  %13 = integer_literal $Builtin.Int64, 1         // user: %14
  %14 = struct $Int (%13 : $Builtin.Int64)        // user: %17
  %15 = metatype $@thin DefaultStringInterpolation.Type // user: %17
  // function_ref DefaultStringInterpolation.init(literalCapacity:interpolationCount:)
  %16 = function_ref @Swift.DefaultStringInterpolation.init(literalCapacity: Swift.Int, interpolationCount: Swift.Int) -> Swift.DefaultStringInterpolation : $@convention(method) (Int, Int, @thin DefaultStringInterpolation.Type) -> @owned DefaultStringInterpolation // user: %17
  %17 = apply %16(%12, %14, %15) : $@convention(method) (Int, Int, @thin DefaultStringInterpolation.Type) -> @owned DefaultStringInterpolation // user: %18
  store %17 to %10 : $*DefaultStringInterpolation // id: %18
  %19 = string_literal utf8 "didSet oldValue "    // user: %24
  %20 = integer_literal $Builtin.Word, 16         // user: %24
  %21 = integer_literal $Builtin.Int1, -1         // user: %24
  %22 = metatype $@thin String.Type               // user: %24
  // function_ref String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)
  %23 = function_ref @Swift.String.init(_builtinStringLiteral: Builtin.RawPointer, utf8CodeUnitCount: Builtin.Word, isASCII: Builtin.Int1) -> Swift.String : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String // user: %24
  %24 = apply %23(%19, %20, %21, %22) : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String // users: %29, %27
  %25 = begin_access [modify] [static] %10 : $*DefaultStringInterpolation // users: %28, %27
  // function_ref DefaultStringInterpolation.appendLiteral(_:)
  %26 = function_ref @Swift.DefaultStringInterpolation.appendLiteral(Swift.String) -> () : $@convention(method) (@guaranteed String, @inout DefaultStringInterpolation) -> () // user: %27
  %27 = apply %26(%24, %25) : $@convention(method) (@guaranteed String, @inout DefaultStringInterpolation) -> ()
  end_access %25 : $*DefaultStringInterpolation   // id: %28
  release_value %24 : $String                     // id: %29
  %30 = alloc_stack $String                       // users: %31, %36, %34
  store %0 to %30 : $*String                      // id: %31
  %32 = begin_access [modify] [static] %10 : $*DefaultStringInterpolation // users: %35, %34
  // function_ref DefaultStringInterpolation.appendInterpolation<A>(_:)
  %33 = function_ref @Swift.DefaultStringInterpolation.appendInterpolation<A where A: Swift.CustomStringConvertible, A: Swift.TextOutputStreamable>(A) -> () : $@convention(method) <τ_0_0 where τ_0_0 : CustomStringConvertible, τ_0_0 : TextOutputStreamable> (@in_guaranteed τ_0_0, @inout DefaultStringInterpolation) -> () // user: %34
  %34 = apply %33<String>(%30, %32) : $@convention(method) <τ_0_0 where τ_0_0 : CustomStringConvertible, τ_0_0 : TextOutputStreamable> (@in_guaranteed τ_0_0, @inout DefaultStringInterpolation) -> ()
  end_access %32 : $*DefaultStringInterpolation   // id: %35
  dealloc_stack %30 : $*String                    // id: %36
  %37 = string_literal utf8 ""                    // user: %42
  %38 = integer_literal $Builtin.Word, 0          // user: %42
  %39 = integer_literal $Builtin.Int1, -1         // user: %42
  %40 = metatype $@thin String.Type               // user: %42
  // function_ref String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)
  %41 = function_ref @Swift.String.init(_builtinStringLiteral: Builtin.RawPointer, utf8CodeUnitCount: Builtin.Word, isASCII: Builtin.Int1) -> Swift.String : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String // user: %42
  %42 = apply %41(%37, %38, %39, %40) : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String // users: %47, %45
  %43 = begin_access [modify] [static] %10 : $*DefaultStringInterpolation // users: %46, %45
  // function_ref DefaultStringInterpolation.appendLiteral(_:)
  %44 = function_ref @Swift.DefaultStringInterpolation.appendLiteral(Swift.String) -> () : $@convention(method) (@guaranteed String, @inout DefaultStringInterpolation) -> () // user: %45
  %45 = apply %44(%42, %43) : $@convention(method) (@guaranteed String, @inout DefaultStringInterpolation) -> ()
  end_access %43 : $*DefaultStringInterpolation   // id: %46
  release_value %42 : $String                     // id: %47
  %48 = load %10 : $*DefaultStringInterpolation   // users: %54, %49
  retain_value %48 : $DefaultStringInterpolation  // id: %49
  destroy_addr %10 : $*DefaultStringInterpolation // id: %50
  dealloc_stack %10 : $*DefaultStringInterpolation // id: %51
  %52 = metatype $@thin String.Type               // user: %54
  // function_ref String.init(stringInterpolation:)
  %53 = function_ref @Swift.String.init(stringInterpolation: Swift.DefaultStringInterpolation) -> Swift.String : $@convention(method) (@owned DefaultStringInterpolation, @thin String.Type) -> @owned String // user: %54
  %54 = apply %53(%48, %52) : $@convention(method) (@owned DefaultStringInterpolation, @thin String.Type) -> @owned String // user: %56
  %55 = init_existential_addr %9 : $*Any, $String // user: %56
  store %54 to %55 : $*String                     // id: %56
  // function_ref _finalizeUninitializedArray<A>(_:)
  %57 = function_ref @Swift._finalizeUninitializedArray<A>(__owned [A]) -> [A] : $@convention(thin) <τ_0_0> (@owned Array<τ_0_0>) -> @owned Array<τ_0_0> // user: %58
  %58 = apply %57<Any>(%7) : $@convention(thin) <τ_0_0> (@owned Array<τ_0_0>) -> @owned Array<τ_0_0> // users: %67, %64
  // function_ref default argument 1 of print(_:separator:terminator:)
  %59 = function_ref @default argument 1 of Swift.print(_: Any..., separator: Swift.String, terminator: Swift.String) -> () : $@convention(thin) () -> @owned String // user: %60
  %60 = apply %59() : $@convention(thin) () -> @owned String // users: %66, %64
  // function_ref default argument 2 of print(_:separator:terminator:)
  %61 = function_ref @default argument 2 of Swift.print(_: Any..., separator: Swift.String, terminator: Swift.String) -> () : $@convention(thin) () -> @owned String // user: %62
  %62 = apply %61() : $@convention(thin) () -> @owned String // users: %65, %64
  // function_ref print(_:separator:terminator:)
  %63 = function_ref @Swift.print(_: Any..., separator: Swift.String, terminator: Swift.String) -> () : $@convention(thin) (@guaranteed Array<Any>, @guaranteed String, @guaranteed String) -> () // user: %64
  %64 = apply %63(%58, %60, %62) : $@convention(thin) (@guaranteed Array<Any>, @guaranteed String, @guaranteed String) -> ()
  release_value %62 : $String                     // id: %65
  release_value %60 : $String                     // id: %66
  release_value %58 : $Array<Any>                 // id: %67
  %68 = tuple ()                                  // user: %69
  return %68 : $()                                // id: %69
} // end sil function 'main.WYStudent2.name.didset : Swift.String'

// WYStudent2.name.getter
sil hidden [transparent] @main.WYStudent2.name.getter : Swift.String : $@convention(method) (@guaranteed WYStudent2) -> @owned String {
// %0 "self"                                      // users: %2, %1
bb0(%0 : $WYStudent2):
  debug_value %0 : $WYStudent2, let, name "self", argno 1, implicit // id: %1
  %2 = ref_element_addr %0 : $WYStudent2, #WYStudent2.name // user: %3
  %3 = begin_access [read] [dynamic] %2 : $*String // users: %4, %6
  %4 = load %3 : $*String                         // users: %7, %5
  retain_value %4 : $String                       // id: %5
  end_access %3 : $*String                        // id: %6
  return %4 : $String                             // id: %7
} // end sil function 'main.WYStudent2.name.getter : Swift.String'

// WYStudent2.name.setter
sil hidden @main.WYStudent2.name.setter : Swift.String : $@convention(method) (@owned String, @guaranteed WYStudent2) -> () {
// %0 "value"                                     // users: %22, %16, %12, %2, %11
// %1 "self"                                      // users: %20, %13, %11, %4, %3
bb0(%0 : $String, %1 : $WYStudent2):
  debug_value %0 : $String, let, name "value", argno 1, implicit // id: %2
  debug_value %1 : $WYStudent2, let, name "self", argno 2, implicit // id: %3
  %4 = ref_element_addr %1 : $WYStudent2, #WYStudent2.name // user: %5
  %5 = begin_access [read] [dynamic] %4 : $*String // users: %6, %8
  %6 = load %5 : $*String                         // users: %21, %20, %9, %7
  retain_value %6 : $String                       // id: %7
  end_access %5 : $*String                        // id: %8
  debug_value %6 : $String, let, name "tmp", implicit // id: %9
  // function_ref WYStudent2.name.willset
  %10 = function_ref @main.WYStudent2.name.willset : Swift.String : $@convention(method) (@guaranteed String, @guaranteed WYStudent2) -> () // user: %11
  %11 = apply %10(%0, %1) : $@convention(method) (@guaranteed String, @guaranteed WYStudent2) -> ()
  retain_value %0 : $String                       // id: %12
  %13 = ref_element_addr %1 : $WYStudent2, #WYStudent2.name // user: %14
  %14 = begin_access [modify] [dynamic] %13 : $*String // users: %16, %15, %18
  %15 = load %14 : $*String                       // user: %17
  store %0 to %14 : $*String                      // id: %16
  release_value %15 : $String                     // id: %17
  end_access %14 : $*String                       // id: %18
  // function_ref WYStudent2.name.didset
  %19 = function_ref @main.WYStudent2.name.didset : Swift.String : $@convention(method) (@guaranteed String, @guaranteed WYStudent2) -> () // user: %20
  %20 = apply %19(%6, %1) : $@convention(method) (@guaranteed String, @guaranteed WYStudent2) -> ()
  release_value %6 : $String                      // id: %21
  release_value %0 : $String                      // id: %22
  %23 = tuple ()                                  // user: %24
  return %23 : $()                                // id: %24
} // end sil function 'main.WYStudent2.name.setter : Swift.String'

// WYStudent2.name.modify
sil hidden [transparent] @main.WYStudent2.name.modify : Swift.String : $@yield_once @convention(method) (@guaranteed WYStudent2) -> @yields @inout String {
// %0 "self"                                      // users: %12, %19, %3, %1
bb0(%0 : $WYStudent2):
  debug_value %0 : $WYStudent2, let, name "self", argno 1, implicit // id: %1
  %2 = alloc_stack $String                        // users: %16, %10, %8, %13, %21, %20, %9
  %3 = ref_element_addr %0 : $WYStudent2, #WYStudent2.name // user: %4
  %4 = begin_access [read] [dynamic] %3 : $*String // users: %5, %7
  %5 = load %4 : $*String                         // users: %8, %6
  retain_value %5 : $String                       // id: %6
  end_access %4 : $*String                        // id: %7
  store %5 to %2 : $*String                       // id: %8
  yield %2 : $*String, resume bb1, unwind bb2     // id: %9

bb1:                                              // Preds: bb0
  %10 = load %2 : $*String                        // user: %12
  // function_ref WYStudent2.name.setter
  %11 = function_ref @main.WYStudent2.name.setter : Swift.String : $@convention(method) (@owned String, @guaranteed WYStudent2) -> () // user: %12
  %12 = apply %11(%10, %0) : $@convention(method) (@owned String, @guaranteed WYStudent2) -> ()
  dealloc_stack %2 : $*String                     // id: %13
  %14 = tuple ()                                  // user: %15
  return %14 : $()                                // id: %15

bb2:                                              // Preds: bb0
  %16 = load %2 : $*String                        // users: %19, %17
  retain_value %16 : $String                      // id: %17
  // function_ref WYStudent2.name.setter
  %18 = function_ref @main.WYStudent2.name.setter : Swift.String : $@convention(method) (@owned String, @guaranteed WYStudent2) -> () // user: %19
  %19 = apply %18(%16, %0) : $@convention(method) (@owned String, @guaranteed WYStudent2) -> ()
  destroy_addr %2 : $*String                      // id: %20
  dealloc_stack %2 : $*String                     // id: %21
  unwind                                          // id: %22
} // end sil function 'main.WYStudent2.name.modify : Swift.String'

// WYStudent2.deinit
sil hidden @main.WYStudent2.deinit : $@convention(method) (@guaranteed WYStudent2) -> @owned Builtin.NativeObject {
// %0 "self"                                      // users: %6, %2, %1
bb0(%0 : $WYStudent2):
  debug_value %0 : $WYStudent2, let, name "self", argno 1, implicit // id: %1
  %2 = ref_element_addr %0 : $WYStudent2, #WYStudent2.name // user: %3
  %3 = begin_access [deinit] [static] %2 : $*String // users: %5, %4
  destroy_addr %3 : $*String                      // id: %4
  end_access %3 : $*String                        // id: %5
  %6 = unchecked_ref_cast %0 : $WYStudent2 to $Builtin.NativeObject // user: %7
  return %6 : $Builtin.NativeObject               // id: %7
} // end sil function 'main.WYStudent2.deinit'

// WYStudent2.__deallocating_deinit
sil hidden @main.WYStudent2.__deallocating_deinit : $@convention(method) (@owned WYStudent2) -> () {
// %0 "self"                                      // users: %3, %1
bb0(%0 : $WYStudent2):
  debug_value %0 : $WYStudent2, let, name "self", argno 1, implicit // id: %1
  // function_ref WYStudent2.deinit
  %2 = function_ref @main.WYStudent2.deinit : $@convention(method) (@guaranteed WYStudent2) -> @owned Builtin.NativeObject // user: %3
  %3 = apply %2(%0) : $@convention(method) (@guaranteed WYStudent2) -> @owned Builtin.NativeObject // user: %4
  %4 = unchecked_ref_cast %3 : $Builtin.NativeObject to $WYStudent2 // user: %5
  dealloc_ref %4 : $WYStudent2                    // id: %5
  %6 = tuple ()                                   // user: %7
  return %6 : $()                                 // id: %7
} // end sil function 'main.WYStudent2.__deallocating_deinit'

// WYStudent2.__allocating_init()
sil hidden [exact_self_class] @main.WYStudent2.__allocating_init() -> main.WYStudent2 : $@convention(method) (@thick WYStudent2.Type) -> @owned WYStudent2 {
// %0 "$metatype"
bb0(%0 : $@thick WYStudent2.Type):
  %1 = alloc_ref $WYStudent2                      // user: %3
  // function_ref WYStudent2.init()
  %2 = function_ref @main.WYStudent2.init() -> main.WYStudent2 : $@convention(method) (@owned WYStudent2) -> @owned WYStudent2 // user: %3
  %3 = apply %2(%1) : $@convention(method) (@owned WYStudent2) -> @owned WYStudent2 // user: %4
  return %3 : $WYStudent2                         // id: %4
} // end sil function 'main.WYStudent2.__allocating_init() -> main.WYStudent2'

// WYStudent2.init()
sil hidden @main.WYStudent2.init() -> main.WYStudent2 : $@convention(method) (@owned WYStudent2) -> @owned WYStudent2 {
// %0 "self"                                      // users: %2, %10, %1
bb0(%0 : $WYStudent2):
  debug_value %0 : $WYStudent2, let, name "self", argno 1, implicit // id: %1
  %2 = ref_element_addr %0 : $WYStudent2, #WYStudent2.name // user: %9
  %3 = string_literal utf8 "测试"                 // user: %8
  %4 = integer_literal $Builtin.Word, 6           // user: %8
  %5 = integer_literal $Builtin.Int1, 0           // user: %8
  %6 = metatype $@thin String.Type                // user: %8
  // function_ref String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)
  %7 = function_ref @Swift.String.init(_builtinStringLiteral: Builtin.RawPointer, utf8CodeUnitCount: Builtin.Word, isASCII: Builtin.Int1) -> Swift.String : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String // user: %8
  %8 = apply %7(%3, %4, %5, %6) : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String // user: %9
  store %8 to %2 : $*String                       // id: %9
  return %0 : $WYStudent2                         // id: %10
} // end sil function 'main.WYStudent2.init() -> main.WYStudent2'

// WYStudent4.age.getter
sil hidden [lazy_getter] [noinline] @main.WYStudent4.age.getter : Swift.Int? : $@convention(method) (@guaranteed WYStudent4) -> Optional<Int> {
// %0 "self"                                      // users: %15, %2, %1
bb0(%0 : $WYStudent4):
  debug_value %0 : $WYStudent4, let, name "self", argno 1, implicit // id: %1
  %2 = ref_element_addr %0 : $WYStudent4, #WYStudent4.$__lazy_storage_$_age // user: %3
  %3 = begin_access [read] [dynamic] %2 : $*Optional<Optional<Int>> // users: %4, %5
  %4 = load %3 : $*Optional<Optional<Int>>        // user: %6
  end_access %3 : $*Optional<Optional<Int>>       // id: %5
  switch_enum %4 : $Optional<Optional<Int>>, case #Optional.some!enumelt: bb1, case #Optional.none!enumelt: bb2 // id: %6

// %7                                             // users: %9, %8
bb1(%7 : $Optional<Int>):                         // Preds: bb0
  debug_value %7 : $Optional<Int>, let, name "tmp1", implicit // id: %8
  br bb3(%7 : $Optional<Int>)                     // id: %9

bb2:                                              // Preds: bb0
  %10 = integer_literal $Builtin.Int64, 19        // user: %11
  %11 = struct $Int (%10 : $Builtin.Int64)        // user: %12
  %12 = enum $Optional<Int>, #Optional.some!enumelt, %11 : $Int // users: %19, %14, %13
  debug_value %12 : $Optional<Int>, let, name "tmp2", implicit // id: %13
  %14 = enum $Optional<Optional<Int>>, #Optional.some!enumelt, %12 : $Optional<Int> // user: %17
  %15 = ref_element_addr %0 : $WYStudent4, #WYStudent4.$__lazy_storage_$_age // user: %16
  %16 = begin_access [modify] [dynamic] %15 : $*Optional<Optional<Int>> // users: %17, %18
  store %14 to %16 : $*Optional<Optional<Int>>    // id: %17
  end_access %16 : $*Optional<Optional<Int>>      // id: %18
  br bb3(%12 : $Optional<Int>)                    // id: %19

// %20                                            // user: %21
bb3(%20 : $Optional<Int>):                        // Preds: bb2 bb1
  return %20 : $Optional<Int>                     // id: %21
} // end sil function 'main.WYStudent4.age.getter : Swift.Int?'

// WYStudent4.age.setter
sil hidden @main.WYStudent4.age.setter : Swift.Int? : $@convention(method) (Optional<Int>, @guaranteed WYStudent4) -> () {
// %0 "value"                                     // users: %4, %2
// %1 "self"                                      // users: %5, %3
bb0(%0 : $Optional<Int>, %1 : $WYStudent4):
  debug_value %0 : $Optional<Int>, let, name "value", argno 1, implicit // id: %2
  debug_value %1 : $WYStudent4, let, name "self", argno 2, implicit // id: %3
  %4 = enum $Optional<Optional<Int>>, #Optional.some!enumelt, %0 : $Optional<Int> // user: %7
  %5 = ref_element_addr %1 : $WYStudent4, #WYStudent4.$__lazy_storage_$_age // user: %6
  %6 = begin_access [modify] [dynamic] %5 : $*Optional<Optional<Int>> // users: %7, %8
  store %4 to %6 : $*Optional<Optional<Int>>      // id: %7
  end_access %6 : $*Optional<Optional<Int>>       // id: %8
  %9 = tuple ()                                   // user: %10
  return %9 : $()                                 // id: %10
} // end sil function 'main.WYStudent4.age.setter : Swift.Int?'

// WYStudent4.age.modify
sil hidden [transparent] @main.WYStudent4.age.modify : Swift.Int? : $@yield_once @convention(method) (@guaranteed WYStudent4) -> @yields @inout Optional<Int> {
// %0 "self"                                      // users: %9, %15, %4, %1
bb0(%0 : $WYStudent4):
  debug_value %0 : $WYStudent4, let, name "self", argno 1, implicit // id: %1
  %2 = alloc_stack $Optional<Int>                 // users: %13, %7, %5, %10, %16, %6
  // function_ref WYStudent4.age.getter
  %3 = function_ref @main.WYStudent4.age.getter : Swift.Int? : $@convention(method) (@guaranteed WYStudent4) -> Optional<Int> // user: %4
  %4 = apply %3(%0) : $@convention(method) (@guaranteed WYStudent4) -> Optional<Int> // user: %5
  store %4 to %2 : $*Optional<Int>                // id: %5
  yield %2 : $*Optional<Int>, resume bb1, unwind bb2 // id: %6

bb1:                                              // Preds: bb0
  %7 = load %2 : $*Optional<Int>                  // user: %9
  // function_ref WYStudent4.age.setter
  %8 = function_ref @main.WYStudent4.age.setter : Swift.Int? : $@convention(method) (Optional<Int>, @guaranteed WYStudent4) -> () // user: %9
  %9 = apply %8(%7, %0) : $@convention(method) (Optional<Int>, @guaranteed WYStudent4) -> ()
  dealloc_stack %2 : $*Optional<Int>              // id: %10
  %11 = tuple ()                                  // user: %12
  return %11 : $()                                // id: %12

bb2:                                              // Preds: bb0
  %13 = load %2 : $*Optional<Int>                 // user: %15
  // function_ref WYStudent4.age.setter
  %14 = function_ref @main.WYStudent4.age.setter : Swift.Int? : $@convention(method) (Optional<Int>, @guaranteed WYStudent4) -> () // user: %15
  %15 = apply %14(%13, %0) : $@convention(method) (Optional<Int>, @guaranteed WYStudent4) -> ()
  dealloc_stack %2 : $*Optional<Int>              // id: %16
  unwind                                          // id: %17
} // end sil function 'main.WYStudent4.age.modify : Swift.Int?'

// variable initialization expression of WYStudent4.$__lazy_storage_$_age
sil hidden [transparent] @variable initialization expression of main.WYStudent4.($__lazy_storage_$_age in _12232F587A4C5CD8B1EEDF696793A4FC) : Swift.Int?? : $@convention(thin) () -> Optional<Optional<Int>> {
bb0:
  %0 = enum $Optional<Optional<Int>>, #Optional.none!enumelt // user: %1
  return %0 : $Optional<Optional<Int>>            // id: %1
} // end sil function 'variable initialization expression of main.WYStudent4.($__lazy_storage_$_age in _12232F587A4C5CD8B1EEDF696793A4FC) : Swift.Int??'

// WYStudent4.deinit
sil hidden @main.WYStudent4.deinit : $@convention(method) (@guaranteed WYStudent4) -> @owned Builtin.NativeObject {
// %0 "self"                                      // users: %2, %1
bb0(%0 : $WYStudent4):
  debug_value %0 : $WYStudent4, let, name "self", argno 1, implicit // id: %1
  %2 = unchecked_ref_cast %0 : $WYStudent4 to $Builtin.NativeObject // user: %3
  return %2 : $Builtin.NativeObject               // id: %3
} // end sil function 'main.WYStudent4.deinit'

// WYStudent4.__deallocating_deinit
sil hidden @main.WYStudent4.__deallocating_deinit : $@convention(method) (@owned WYStudent4) -> () {
// %0 "self"                                      // users: %3, %1
bb0(%0 : $WYStudent4):
  debug_value %0 : $WYStudent4, let, name "self", argno 1, implicit // id: %1
  // function_ref WYStudent4.deinit
  %2 = function_ref @main.WYStudent4.deinit : $@convention(method) (@guaranteed WYStudent4) -> @owned Builtin.NativeObject // user: %3
  %3 = apply %2(%0) : $@convention(method) (@guaranteed WYStudent4) -> @owned Builtin.NativeObject // user: %4
  %4 = unchecked_ref_cast %3 : $Builtin.NativeObject to $WYStudent4 // user: %5
  dealloc_ref %4 : $WYStudent4                    // id: %5
  %6 = tuple ()                                   // user: %7
  return %6 : $()                                 // id: %7
} // end sil function 'main.WYStudent4.__deallocating_deinit'

// WYStudent4.__allocating_init()
sil hidden [exact_self_class] @main.WYStudent4.__allocating_init() -> main.WYStudent4 : $@convention(method) (@thick WYStudent4.Type) -> @owned WYStudent4 {
// %0 "$metatype"
bb0(%0 : $@thick WYStudent4.Type):
  %1 = alloc_ref $WYStudent4                      // user: %3
  // function_ref WYStudent4.init()
  %2 = function_ref @main.WYStudent4.init() -> main.WYStudent4 : $@convention(method) (@owned WYStudent4) -> @owned WYStudent4 // user: %3
  %3 = apply %2(%1) : $@convention(method) (@owned WYStudent4) -> @owned WYStudent4 // user: %4
  return %3 : $WYStudent4                         // id: %4
} // end sil function 'main.WYStudent4.__allocating_init() -> main.WYStudent4'

// WYStudent4.init()
sil hidden @main.WYStudent4.init() -> main.WYStudent4 : $@convention(method) (@owned WYStudent4) -> @owned WYStudent4 {
// %0 "self"                                      // users: %2, %5, %1
bb0(%0 : $WYStudent4):
  debug_value %0 : $WYStudent4, let, name "self", argno 1, implicit // id: %1
  %2 = ref_element_addr %0 : $WYStudent4, #WYStudent4.$__lazy_storage_$_age // user: %4
  %3 = enum $Optional<Optional<Int>>, #Optional.none!enumelt // user: %4
  store %3 to %2 : $*Optional<Optional<Int>>      // id: %4
  return %0 : $WYStudent4                         // id: %5
} // end sil function 'main.WYStudent4.init() -> main.WYStudent4'

// _diagnoseUnexpectedNilOptional(_filenameStart:_filenameLength:_filenameIsASCII:_line:_isImplicitUnwrap:)
sil public_external [transparent] @Swift._diagnoseUnexpectedNilOptional(_filenameStart: Builtin.RawPointer, _filenameLength: Builtin.Word, _filenameIsASCII: Builtin.Int1, _line: Builtin.Word, _isImplicitUnwrap: Builtin.Int1) -> () : $@convention(thin) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, Builtin.Word, Builtin.Int1) -> () {
// %0                                             // users: %37, %11
// %1                                             // users: %43, %17
// %2                                             // users: %38, %12
// %3                                             // users: %44, %18
// %4                                             // user: %5
bb0(%0 : $Builtin.RawPointer, %1 : $Builtin.Word, %2 : $Builtin.Int1, %3 : $Builtin.Word, %4 : $Builtin.Int1):
  cond_br %4, bb8, bb1                            // id: %5

bb1:                                              // Preds: bb0
  %6 = string_literal utf8 "Unexpectedly found nil while unwrapping an Optional value" // user: %8
  %7 = integer_literal $Builtin.Word, 57          // user: %10
  %8 = builtin "ptrtoint_Word"(%6 : $Builtin.RawPointer) : $Builtin.Word // user: %10
  %9 = integer_literal $Builtin.Int8, 2           // users: %24, %15, %10
  %10 = struct $StaticString (%8 : $Builtin.Word, %7 : $Builtin.Word, %9 : $Builtin.Int8) // user: %30
  %11 = builtin "ptrtoint_Word"(%0 : $Builtin.RawPointer) : $Builtin.Word // user: %17
  cond_br %2, bb3, bb2                            // id: %12

bb2:                                              // Preds: bb1
  %13 = integer_literal $Builtin.Int8, 0          // user: %14
  br bb4(%13 : $Builtin.Int8)                     // id: %14

bb3:                                              // Preds: bb1
  br bb4(%9 : $Builtin.Int8)                      // id: %15

// %16                                            // user: %17
bb4(%16 : $Builtin.Int8):                         // Preds: bb3 bb2
  %17 = struct $StaticString (%11 : $Builtin.Word, %1 : $Builtin.Word, %16 : $Builtin.Int8) // user: %30
  %18 = builtin "zextOrBitCast_Word_Int64"(%3 : $Builtin.Word) : $Builtin.Int64 // user: %19
  %19 = struct $UInt (%18 : $Builtin.Int64)       // user: %30
  br bb5                                          // id: %20

bb5:                                              // Preds: bb4
  %21 = string_literal utf8 "Fatal error"         // user: %23
  %22 = integer_literal $Builtin.Word, 11         // user: %24
  %23 = builtin "ptrtoint_Word"(%21 : $Builtin.RawPointer) : $Builtin.Word // user: %24
  %24 = struct $StaticString (%23 : $Builtin.Word, %22 : $Builtin.Word, %9 : $Builtin.Int8) // user: %30
  br bb6                                          // id: %25

bb6:                                              // Preds: bb5
  %26 = integer_literal $Builtin.Int32, 1         // user: %27
  %27 = struct $UInt32 (%26 : $Builtin.Int32)     // user: %30
  br bb7                                          // id: %28

bb7:                                              // Preds: bb6
  // function_ref _assertionFailure(_:_:file:line:flags:)
  %29 = function_ref @Swift._assertionFailure(_: Swift.StaticString, _: Swift.StaticString, file: Swift.StaticString, line: Swift.UInt, flags: Swift.UInt32) -> Swift.Never : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %30
  %30 = apply %29(%24, %10, %17, %19, %27) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %31

bb8:                                              // Preds: bb0
  %32 = string_literal utf8 "Unexpectedly found nil while implicitly unwrapping an Optional value" // user: %34
  %33 = integer_literal $Builtin.Word, 68         // user: %36
  %34 = builtin "ptrtoint_Word"(%32 : $Builtin.RawPointer) : $Builtin.Word // user: %36
  %35 = integer_literal $Builtin.Int8, 2          // users: %50, %41, %36
  %36 = struct $StaticString (%34 : $Builtin.Word, %33 : $Builtin.Word, %35 : $Builtin.Int8) // user: %56
  %37 = builtin "ptrtoint_Word"(%0 : $Builtin.RawPointer) : $Builtin.Word // user: %43
  cond_br %2, bb10, bb9                           // id: %38

bb9:                                              // Preds: bb8
  %39 = integer_literal $Builtin.Int8, 0          // user: %40
  br bb11(%39 : $Builtin.Int8)                    // id: %40

bb10:                                             // Preds: bb8
  br bb11(%35 : $Builtin.Int8)                    // id: %41

// %42                                            // user: %43
bb11(%42 : $Builtin.Int8):                        // Preds: bb10 bb9
  %43 = struct $StaticString (%37 : $Builtin.Word, %1 : $Builtin.Word, %42 : $Builtin.Int8) // user: %56
  %44 = builtin "zextOrBitCast_Word_Int64"(%3 : $Builtin.Word) : $Builtin.Int64 // user: %45
  %45 = struct $UInt (%44 : $Builtin.Int64)       // user: %56
  br bb12                                         // id: %46

bb12:                                             // Preds: bb11
  %47 = string_literal utf8 "Fatal error"         // user: %49
  %48 = integer_literal $Builtin.Word, 11         // user: %50
  %49 = builtin "ptrtoint_Word"(%47 : $Builtin.RawPointer) : $Builtin.Word // user: %50
  %50 = struct $StaticString (%49 : $Builtin.Word, %48 : $Builtin.Word, %35 : $Builtin.Int8) // user: %56
  br bb13                                         // id: %51

bb13:                                             // Preds: bb12
  %52 = integer_literal $Builtin.Int32, 1         // user: %53
  %53 = struct $UInt32 (%52 : $Builtin.Int32)     // user: %56
  br bb14                                         // id: %54

bb14:                                             // Preds: bb13
  // function_ref _assertionFailure(_:_:file:line:flags:)
  %55 = function_ref @Swift._assertionFailure(_: Swift.StaticString, _: Swift.StaticString, file: Swift.StaticString, line: Swift.UInt, flags: Swift.UInt32) -> Swift.Never : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %56
  %56 = apply %55(%50, %36, %43, %45, %53) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %57
} // end sil function 'Swift._diagnoseUnexpectedNilOptional(_filenameStart: Builtin.RawPointer, _filenameLength: Builtin.Word, _filenameIsASCII: Builtin.Int1, _line: Builtin.Word, _isImplicitUnwrap: Builtin.Int1) -> ()'

// one-time initialization function for age
sil private [global_init_once_fn] @one-time initialization function for age : $@convention(c) () -> () {
bb0:
  alloc_global @static main.WYStudent5.age : Swift.Int     // id: %0
  %1 = global_addr @static main.WYStudent5.age : Swift.Int : $*Int // user: %4
  %2 = integer_literal $Builtin.Int64, 18         // user: %3
  %3 = struct $Int (%2 : $Builtin.Int64)          // user: %4
  store %3 to %1 : $*Int                          // id: %4
  %5 = tuple ()                                   // user: %6
  return %5 : $()                                 // id: %6
} // end sil function 'one-time initialization function for age'

// WYStudent5.age.unsafeMutableAddressor
sil hidden [global_init] @main.WYStudent5.age.unsafeMutableAddressor : Swift.Int : $@convention(thin) () -> Builtin.RawPointer {
bb0:
  %0 = global_addr @static main.WYStudent5.age : Swift.Int : $*Int // user: %1
  %1 = address_to_pointer %0 : $*Int to $Builtin.RawPointer // user: %2
  return %1 : $Builtin.RawPointer                 // id: %2
} // end sil function 'main.WYStudent5.age.unsafeMutableAddressor : Swift.Int'

// static WYStudent5.age.getter
sil hidden [transparent] @static main.WYStudent5.age.getter : Swift.Int : $@convention(method) (@thick WYStudent5.Type) -> Int {
// %0 "self"                                      // user: %1
bb0(%0 : $@thick WYStudent5.Type):
  debug_value %0 : $@thick WYStudent5.Type, let, name "self", argno 1, implicit // id: %1
  // function_ref WYStudent5.age.unsafeMutableAddressor
  %2 = function_ref @main.WYStudent5.age.unsafeMutableAddressor : Swift.Int : $@convention(thin) () -> Builtin.RawPointer // user: %3
  %3 = apply %2() : $@convention(thin) () -> Builtin.RawPointer // user: %4
  %4 = pointer_to_address %3 : $Builtin.RawPointer to [strict] $*Int // user: %5
  %5 = begin_access [read] [dynamic] %4 : $*Int   // users: %6, %7
  %6 = load %5 : $*Int                            // user: %8
  end_access %5 : $*Int                           // id: %7
  return %6 : $Int                                // id: %8
} // end sil function 'static main.WYStudent5.age.getter : Swift.Int'

// static WYStudent5.age.setter
sil hidden [transparent] @static main.WYStudent5.age.setter : Swift.Int : $@convention(method) (Int, @thick WYStudent5.Type) -> () {
// %0 "value"                                     // users: %8, %2
// %1 "self"                                      // user: %3
bb0(%0 : $Int, %1 : $@thick WYStudent5.Type):
  debug_value %0 : $Int, let, name "value", argno 1, implicit // id: %2
  debug_value %1 : $@thick WYStudent5.Type, let, name "self", argno 2, implicit // id: %3
  // function_ref WYStudent5.age.unsafeMutableAddressor
  %4 = function_ref @main.WYStudent5.age.unsafeMutableAddressor : Swift.Int : $@convention(thin) () -> Builtin.RawPointer // user: %5
  %5 = apply %4() : $@convention(thin) () -> Builtin.RawPointer // user: %6
  %6 = pointer_to_address %5 : $Builtin.RawPointer to [strict] $*Int // user: %7
  %7 = begin_access [modify] [dynamic] %6 : $*Int // users: %8, %9
  store %0 to %7 : $*Int                          // id: %8
  end_access %7 : $*Int                           // id: %9
  %10 = tuple ()                                  // user: %11
  return %10 : $()                                // id: %11
} // end sil function 'static main.WYStudent5.age.setter : Swift.Int'

// static WYStudent5.age.modify
sil hidden [transparent] @static main.WYStudent5.age.modify : Swift.Int : $@yield_once @convention(method) (@thick WYStudent5.Type) -> @yields @inout Int {
// %0 "self"                                      // user: %1
bb0(%0 : $@thick WYStudent5.Type):
  debug_value %0 : $@thick WYStudent5.Type, let, name "self", argno 1, implicit // id: %1
  // function_ref WYStudent5.age.unsafeMutableAddressor
  %2 = function_ref @main.WYStudent5.age.unsafeMutableAddressor : Swift.Int : $@convention(thin) () -> Builtin.RawPointer // user: %3
  %3 = apply %2() : $@convention(thin) () -> Builtin.RawPointer // user: %4
  %4 = pointer_to_address %3 : $Builtin.RawPointer to [strict] $*Int // user: %5
  %5 = begin_access [modify] [dynamic] %4 : $*Int // users: %7, %10, %6
  yield %5 : $*Int, resume bb1, unwind bb2        // id: %6

bb1:                                              // Preds: bb0
  end_access %5 : $*Int                           // id: %7
  %8 = tuple ()                                   // user: %9
  return %8 : $()                                 // id: %9

bb2:                                              // Preds: bb0
  end_access %5 : $*Int                           // id: %10
  unwind                                          // id: %11
} // end sil function 'static main.WYStudent5.age.modify : Swift.Int'

// WYStudent5.deinit
sil hidden @main.WYStudent5.deinit : $@convention(method) (@guaranteed WYStudent5) -> @owned Builtin.NativeObject {
// %0 "self"                                      // users: %2, %1
bb0(%0 : $WYStudent5):
  debug_value %0 : $WYStudent5, let, name "self", argno 1, implicit // id: %1
  %2 = unchecked_ref_cast %0 : $WYStudent5 to $Builtin.NativeObject // user: %3
  return %2 : $Builtin.NativeObject               // id: %3
} // end sil function 'main.WYStudent5.deinit'

// WYStudent5.__deallocating_deinit
sil hidden @main.WYStudent5.__deallocating_deinit : $@convention(method) (@owned WYStudent5) -> () {
// %0 "self"                                      // users: %3, %1
bb0(%0 : $WYStudent5):
  debug_value %0 : $WYStudent5, let, name "self", argno 1, implicit // id: %1
  // function_ref WYStudent5.deinit
  %2 = function_ref @main.WYStudent5.deinit : $@convention(method) (@guaranteed WYStudent5) -> @owned Builtin.NativeObject // user: %3
  %3 = apply %2(%0) : $@convention(method) (@guaranteed WYStudent5) -> @owned Builtin.NativeObject // user: %4
  %4 = unchecked_ref_cast %3 : $Builtin.NativeObject to $WYStudent5 // user: %5
  dealloc_ref %4 : $WYStudent5                    // id: %5
  %6 = tuple ()                                   // user: %7
  return %6 : $()                                 // id: %7
} // end sil function 'main.WYStudent5.__deallocating_deinit'

// WYStudent5.__allocating_init()
sil hidden [exact_self_class] @main.WYStudent5.__allocating_init() -> main.WYStudent5 : $@convention(method) (@thick WYStudent5.Type) -> @owned WYStudent5 {
// %0 "$metatype"
bb0(%0 : $@thick WYStudent5.Type):
  %1 = alloc_ref $WYStudent5                      // user: %3
  // function_ref WYStudent5.init()
  %2 = function_ref @main.WYStudent5.init() -> main.WYStudent5 : $@convention(method) (@owned WYStudent5) -> @owned WYStudent5 // user: %3
  %3 = apply %2(%1) : $@convention(method) (@owned WYStudent5) -> @owned WYStudent5 // user: %4
  return %3 : $WYStudent5                         // id: %4
} // end sil function 'main.WYStudent5.__allocating_init() -> main.WYStudent5'

// WYStudent5.init()
sil hidden @main.WYStudent5.init() -> main.WYStudent5 : $@convention(method) (@owned WYStudent5) -> @owned WYStudent5 {
// %0 "self"                                      // users: %2, %1
bb0(%0 : $WYStudent5):
  debug_value %0 : $WYStudent5, let, name "self", argno 1, implicit // id: %1
  return %0 : $WYStudent5                         // id: %2
} // end sil function 'main.WYStudent5.init() -> main.WYStudent5'

// one-time initialization function for shareInstance
sil private [global_init_once_fn] @one-time initialization function for shareInstance : $@convention(c) () -> () {
bb0:
  alloc_global @static main.WYStudent6.shareInstance : main.WYStudent6 // id: %0
  %1 = global_addr @static main.WYStudent6.shareInstance : main.WYStudent6 : $*WYStudent6 // user: %5
  %2 = metatype $@thick WYStudent6.Type           // user: %4
  // function_ref WYStudent6.__allocating_init()
  %3 = function_ref @main.WYStudent6.__allocating_init() -> main.WYStudent6 : $@convention(method) (@thick WYStudent6.Type) -> @owned WYStudent6 // user: %4
  %4 = apply %3(%2) : $@convention(method) (@thick WYStudent6.Type) -> @owned WYStudent6 // user: %5
  store %4 to %1 : $*WYStudent6                   // id: %5
  %6 = tuple ()                                   // user: %7
  return %6 : $()                                 // id: %7
} // end sil function 'one-time initialization function for shareInstance'

// WYStudent6.__allocating_init()
sil private [exact_self_class] @main.WYStudent6.__allocating_init() -> main.WYStudent6 : $@convention(method) (@thick WYStudent6.Type) -> @owned WYStudent6 {
// %0 "$metatype"
bb0(%0 : $@thick WYStudent6.Type):
  %1 = alloc_ref $WYStudent6                      // user: %3
  // function_ref WYStudent6.().init()
  %2 = function_ref @main.WYStudent6.() -> main.WYStudent6(in _12232F587A4C5CD8B1EEDF696793A4FC).init() -> main.WYStudent6 : $@convention(method) (@owned WYStudent6) -> @owned WYStudent6 // user: %3
  %3 = apply %2(%1) : $@convention(method) (@owned WYStudent6) -> @owned WYStudent6 // user: %4
  return %3 : $WYStudent6                         // id: %4
} // end sil function 'main.WYStudent6.__allocating_init() -> main.WYStudent6'

// WYStudent6.shareInstance.unsafeMutableAddressor
sil hidden [global_init] @main.WYStudent6.shareInstance.unsafeMutableAddressor : main.WYStudent6 : $@convention(thin) () -> Builtin.RawPointer {
bb0:
  %0 = global_addr @one-time initialization token for shareInstance : $*Builtin.Word // user: %1
  %1 = address_to_pointer %0 : $*Builtin.Word to $Builtin.RawPointer // user: %3
  // function_ref one-time initialization function for shareInstance
  %2 = function_ref @one-time initialization function for shareInstance : $@convention(c) () -> () // user: %3
  %3 = builtin "once"(%1 : $Builtin.RawPointer, %2 : $@convention(c) () -> ()) : $()
  %4 = global_addr @static main.WYStudent6.shareInstance : main.WYStudent6 : $*WYStudent6 // user: %5
  %5 = address_to_pointer %4 : $*WYStudent6 to $Builtin.RawPointer // user: %6
  return %5 : $Builtin.RawPointer                 // id: %6
} // end sil function 'main.WYStudent6.shareInstance.unsafeMutableAddressor : main.WYStudent6'

// static WYStudent6.shareInstance.getter
sil hidden [transparent] @static main.WYStudent6.shareInstance.getter : main.WYStudent6 : $@convention(method) (@thick WYStudent6.Type) -> @owned WYStudent6 {
// %0 "self"                                      // user: %1
bb0(%0 : $@thick WYStudent6.Type):
  debug_value %0 : $@thick WYStudent6.Type, let, name "self", argno 1, implicit // id: %1
  // function_ref WYStudent6.shareInstance.unsafeMutableAddressor
  %2 = function_ref @main.WYStudent6.shareInstance.unsafeMutableAddressor : main.WYStudent6 : $@convention(thin) () -> Builtin.RawPointer // user: %3
  %3 = apply %2() : $@convention(thin) () -> Builtin.RawPointer // user: %4
  %4 = pointer_to_address %3 : $Builtin.RawPointer to [strict] $*WYStudent6 // user: %5
  %5 = load %4 : $*WYStudent6                     // users: %7, %6
  strong_retain %5 : $WYStudent6                  // id: %6
  return %5 : $WYStudent6                         // id: %7
} // end sil function 'static main.WYStudent6.shareInstance.getter : main.WYStudent6'

// WYStudent6.().init()
sil private @main.WYStudent6.() -> main.WYStudent6(in _12232F587A4C5CD8B1EEDF696793A4FC).init() -> main.WYStudent6 : $@convention(method) (@owned WYStudent6) -> @owned WYStudent6 {
// %0 "self"                                      // users: %2, %1
bb0(%0 : $WYStudent6):
  debug_value %0 : $WYStudent6, let, name "self", argno 1, implicit // id: %1
  return %0 : $WYStudent6                         // id: %2
} // end sil function 'main.WYStudent6.() -> main.WYStudent6(in _12232F587A4C5CD8B1EEDF696793A4FC).init() -> main.WYStudent6'

// WYStudent6.deinit
sil hidden @main.WYStudent6.deinit : $@convention(method) (@guaranteed WYStudent6) -> @owned Builtin.NativeObject {
// %0 "self"                                      // users: %2, %1
bb0(%0 : $WYStudent6):
  debug_value %0 : $WYStudent6, let, name "self", argno 1, implicit // id: %1
  %2 = unchecked_ref_cast %0 : $WYStudent6 to $Builtin.NativeObject // user: %3
  return %2 : $Builtin.NativeObject               // id: %3
} // end sil function 'main.WYStudent6.deinit'

// WYStudent6.__deallocating_deinit
sil hidden @main.WYStudent6.__deallocating_deinit : $@convention(method) (@owned WYStudent6) -> () {
// %0 "self"                                      // users: %3, %1
bb0(%0 : $WYStudent6):
  debug_value %0 : $WYStudent6, let, name "self", argno 1, implicit // id: %1
  // function_ref WYStudent6.deinit
  %2 = function_ref @main.WYStudent6.deinit : $@convention(method) (@guaranteed WYStudent6) -> @owned Builtin.NativeObject // user: %3
  %3 = apply %2(%0) : $@convention(method) (@guaranteed WYStudent6) -> @owned Builtin.NativeObject // user: %4
  %4 = unchecked_ref_cast %3 : $Builtin.NativeObject to $WYStudent6 // user: %5
  dealloc_ref %4 : $WYStudent6                    // id: %5
  %6 = tuple ()                                   // user: %7
  return %6 : $()                                 // id: %7
} // end sil function 'main.WYStudent6.__deallocating_deinit'

// _assertionFailure(_:_:file:line:flags:)
sil [noinline] [_semantics "programtermination_point"] @Swift._assertionFailure(_: Swift.StaticString, _: Swift.StaticString, file: Swift.StaticString, line: Swift.UInt, flags: Swift.UInt32) -> Swift.Never : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never

// Array._endMutation()
sil shared_external [_semantics "array.end_mutation"] @Swift.Array._endMutation() -> () : $@convention(method) <Element> (@inout Array<Element>) -> () {
// %0                                             // users: %9, %1
bb0(%0 : $*Array<Element>):
  %1 = struct_element_addr %0 : $*Array<Element>, #Array._buffer // user: %2
  %2 = struct_element_addr %1 : $*_ArrayBuffer<Element>, #_ArrayBuffer._storage // user: %3
  %3 = struct_element_addr %2 : $*_BridgeStorage<__ContiguousArrayStorageBase>, #_BridgeStorage.rawValue // user: %4
  %4 = load %3 : $*Builtin.BridgeObject           // user: %5
  %5 = end_cow_mutation %4 : $Builtin.BridgeObject // user: %6
  %6 = struct $_BridgeStorage<__ContiguousArrayStorageBase> (%5 : $Builtin.BridgeObject) // user: %7
  %7 = struct $_ArrayBuffer<Element> (%6 : $_BridgeStorage<__ContiguousArrayStorageBase>) // user: %8
  %8 = struct $Array<Element> (%7 : $_ArrayBuffer<Element>) // user: %9
  store %8 to %0 : $*Array<Element>               // id: %9
  %10 = tuple ()                                  // user: %11
  return %10 : $()                                // id: %11
} // end sil function 'Swift.Array._endMutation() -> ()'

sil_vtable WYStudent {
  #WYStudent.age!getter: (WYStudent) -> () -> Int : @main.WYStudent.age.getter : Swift.Int	// WYStudent.age.getter
  #WYStudent.age!setter: (WYStudent) -> (Int) -> () : @main.WYStudent.age.setter : Swift.Int	// WYStudent.age.setter
  #WYStudent.age!modify: (WYStudent) -> () -> () : @main.WYStudent.age.modify : Swift.Int	// WYStudent.age.modify
  #WYStudent.name!getter: (WYStudent) -> () -> String : @main.WYStudent.name.getter : Swift.String	// WYStudent.name.getter
  #WYStudent.name!setter: (WYStudent) -> (String) -> () : @main.WYStudent.name.setter : Swift.String	// WYStudent.name.setter
  #WYStudent.name!modify: (WYStudent) -> () -> () : @main.WYStudent.name.modify : Swift.String	// WYStudent.name.modify
  #WYStudent.init!allocator: (WYStudent.Type) -> () -> WYStudent : @main.WYStudent.__allocating_init() -> main.WYStudent	// WYStudent.__allocating_init()
  #WYStudent.deinit!deallocator: @main.WYStudent.__deallocating_deinit	// WYStudent.__deallocating_deinit
}

sil_vtable Square {
  #Square.width!getter: (Square) -> () -> Double : @main.Square.width.getter : Swift.Double	// Square.width.getter
  #Square.width!setter: (Square) -> (Double) -> () : @main.Square.width.setter : Swift.Double	// Square.width.setter
  #Square.width!modify: (Square) -> () -> () : @main.Square.width.modify : Swift.Double	// Square.width.modify
  #Square.area!getter: (Square) -> () -> Double : @main.Square.area.getter : Swift.Double	// Square.area.getter
  #Square.area!setter: (Square) -> (Double) -> () : @main.Square.area.setter : Swift.Double	// Square.area.setter
  #Square.area!modify: (Square) -> () -> () : @main.Square.area.modify : Swift.Double	// Square.area.modify
  #Square.init!allocator: (Square.Type) -> () -> Square : @main.Square.__allocating_init() -> main.Square	// Square.__allocating_init()
  #Square.deinit!deallocator: @main.Square.__deallocating_deinit	// Square.__deallocating_deinit
}

sil_vtable WYStudent2 {
  #WYStudent2.name!getter: (WYStudent2) -> () -> String : @main.WYStudent2.name.getter : Swift.String	// WYStudent2.name.getter
  #WYStudent2.name!setter: (WYStudent2) -> (String) -> () : @main.WYStudent2.name.setter : Swift.String	// WYStudent2.name.setter
  #WYStudent2.name!modify: (WYStudent2) -> () -> () : @main.WYStudent2.name.modify : Swift.String	// WYStudent2.name.modify
  #WYStudent2.init!allocator: (WYStudent2.Type) -> () -> WYStudent2 : @main.WYStudent2.__allocating_init() -> main.WYStudent2	// WYStudent2.__allocating_init()
  #WYStudent2.deinit!deallocator: @main.WYStudent2.__deallocating_deinit	// WYStudent2.__deallocating_deinit
}

sil_vtable WYStudent4 {
  #WYStudent4.age!getter: (WYStudent4) -> () -> Int? : @main.WYStudent4.age.getter : Swift.Int?	// WYStudent4.age.getter
  #WYStudent4.age!setter: (WYStudent4) -> (Int?) -> () : @main.WYStudent4.age.setter : Swift.Int?	// WYStudent4.age.setter
  #WYStudent4.age!modify: (WYStudent4) -> () -> () : @main.WYStudent4.age.modify : Swift.Int?	// WYStudent4.age.modify
  #WYStudent4.init!allocator: (WYStudent4.Type) -> () -> WYStudent4 : @main.WYStudent4.__allocating_init() -> main.WYStudent4	// WYStudent4.__allocating_init()
  #WYStudent4.deinit!deallocator: @main.WYStudent4.__deallocating_deinit	// WYStudent4.__deallocating_deinit
}

sil_vtable WYStudent5 {
  #WYStudent5.init!allocator: (WYStudent5.Type) -> () -> WYStudent5 : @main.WYStudent5.__allocating_init() -> main.WYStudent5	// WYStudent5.__allocating_init()
  #WYStudent5.deinit!deallocator: @main.WYStudent5.__deallocating_deinit	// WYStudent5.__deallocating_deinit
}

sil_vtable WYStudent6 {
  #WYStudent6.init!allocator: (WYStudent6.Type) -> () -> WYStudent6 : @main.WYStudent6.__allocating_init() -> main.WYStudent6	// WYStudent6.__allocating_init()
  #WYStudent6.deinit!deallocator: @main.WYStudent6.__deallocating_deinit	// WYStudent6.__deallocating_deinit
}



// Mappings from '#fileID' to '#filePath':
//   'main/main.swift' => 'main.swift'


